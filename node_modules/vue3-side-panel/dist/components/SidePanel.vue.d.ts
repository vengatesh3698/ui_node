import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    idName: {
        type: PropType<string>;
        default: string;
    };
    hideCloseBtn: {
        type: PropType<boolean>;
        default: boolean;
    };
    noClose: {
        type: PropType<boolean>;
        default: boolean;
    };
    side: {
        type: PropType<string>;
        validator: (value: string) => boolean;
        default: string;
    };
    rerender: {
        type: PropType<boolean>;
        default: boolean;
    };
    zIndex: {
        type: PropType<number | "auto" | undefined>;
        default: string;
    };
    width: {
        type: PropType<string>;
        default: string;
    };
    height: {
        type: PropType<string>;
        default: string;
    };
    lockScroll: {
        type: PropType<boolean>;
        default: boolean;
    };
    lockScrollHtml: {
        type: PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: PropType<boolean>;
        default: boolean;
        required: true;
    };
    overlayColor: {
        type: PropType<string>;
        default: string;
    };
    overlayOpacity: {
        type: PropType<number>;
        default: number;
    };
    overlayDuration: {
        type: PropType<number>;
        default: number;
    };
    panelColor: {
        type: PropType<string>;
        default: string;
    };
    panelDuration: {
        type: PropType<number>;
        default: number;
    };
    transitionName: {
        type: PropType<string>;
        default: undefined;
    };
    headerClass: {
        type: PropType<string>;
        default: string;
    };
    bodyClass: {
        type: PropType<string>;
        default: string;
    };
    footerClass: {
        type: PropType<string>;
        default: string;
    };
}, {
    body: import("vue").Ref<HTMLElement | null>;
    panel: import("vue").Ref<HTMLElement | null>;
    overlay: import("vue").Ref<HTMLElement | null>;
    overlayStyles: import("vue").ComputedRef<{
        zIndex: number | undefined;
        animationDuration: string;
        '--overlay-opacity': number;
        opacity: number;
        backgroundColor: string;
        pointerEvents: string;
    }>;
    header: import("vue").Ref<HTMLElement | null>;
    footer: import("vue").Ref<HTMLElement | null>;
    closePanel: () => void;
    panelStyles: import("vue").ComputedRef<{
        zIndex: number | undefined;
        backgroundColor: string;
        animationDuration: string;
        height?: string | undefined;
        maxHeight?: string | undefined;
        width: string | undefined;
        maxWidth: string;
    }>;
    bodyHeight: import("vue").ComputedRef<number | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    idName: {
        type: PropType<string>;
        default: string;
    };
    hideCloseBtn: {
        type: PropType<boolean>;
        default: boolean;
    };
    noClose: {
        type: PropType<boolean>;
        default: boolean;
    };
    side: {
        type: PropType<string>;
        validator: (value: string) => boolean;
        default: string;
    };
    rerender: {
        type: PropType<boolean>;
        default: boolean;
    };
    zIndex: {
        type: PropType<number | "auto" | undefined>;
        default: string;
    };
    width: {
        type: PropType<string>;
        default: string;
    };
    height: {
        type: PropType<string>;
        default: string;
    };
    lockScroll: {
        type: PropType<boolean>;
        default: boolean;
    };
    lockScrollHtml: {
        type: PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: PropType<boolean>;
        default: boolean;
        required: true;
    };
    overlayColor: {
        type: PropType<string>;
        default: string;
    };
    overlayOpacity: {
        type: PropType<number>;
        default: number;
    };
    overlayDuration: {
        type: PropType<number>;
        default: number;
    };
    panelColor: {
        type: PropType<string>;
        default: string;
    };
    panelDuration: {
        type: PropType<number>;
        default: number;
    };
    transitionName: {
        type: PropType<string>;
        default: undefined;
    };
    headerClass: {
        type: PropType<string>;
        default: string;
    };
    bodyClass: {
        type: PropType<string>;
        default: string;
    };
    footerClass: {
        type: PropType<string>;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    idName: string;
    hideCloseBtn: boolean;
    noClose: boolean;
    side: string;
    rerender: boolean;
    zIndex: number | "auto" | undefined;
    width: string;
    height: string;
    lockScroll: boolean;
    lockScrollHtml: boolean;
    modelValue: boolean;
    overlayColor: string;
    overlayOpacity: number;
    overlayDuration: number;
    panelColor: string;
    panelDuration: number;
    transitionName: string;
    headerClass: string;
    bodyClass: string;
    footerClass: string;
}>;
export default _default;
//# sourceMappingURL=SidePanel.vue?vue&type=script&lang.d.ts.map