{"ast":null,"code":"import { _ as _sfc_main } from \"./VaConfig.vue_vue_type_script_lang-ecb21208.mjs\";\nimport { resolveComponent, openBlock, createBlock, normalizeProps, mergeProps, withCtx, renderSlot } from \"vue\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper-cc2b3d55.mjs\";\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_CssVarsRenderer = resolveComponent(\"CssVarsRenderer\");\n  return _ctx.doRenderCssVars ? (openBlock(), createBlock(_component_CssVarsRenderer, normalizeProps(mergeProps({\n    key: 0\n  }, _ctx.$attrs)), {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  }, 16)) : renderSlot(_ctx.$slots, \"default\", {\n    key: 1\n  });\n}\nconst VaConfig = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { VaConfig as V };","map":{"version":3,"names":["_component_CssVarsRenderer","resolveComponent","createBlock","normalizeProps","mergeProps","key","_ctx","$attrs","default","withCtx","renderSlot","$slots","_"],"sources":["../../../../../src/components/va-config/VaConfig.vue"],"sourcesContent":["<template>\n  <CssVarsRenderer v-if=\"doRenderCssVars\" v-bind=\"$attrs\">\n    <slot />\n  </CssVarsRenderer>\n  <slot v-else />\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, h, Fragment } from 'vue'\nimport { useComponentPresetProp } from '../../composables/useComponentPreset'\nimport { ComponentConfig } from '../../services/component-config'\n\nimport { provideLocalConfig, useLocalConfig } from '../../composables/useLocalConfig'\nimport { useGlobalConfigProvider } from './hooks/useGlobalConfigProvider'\nimport { PartialGlobalConfig } from '../../services/global-config'\nimport { renderSlotNodes } from '../../utils/headless'\nimport { useColors } from '../../composables'\n\nconst CssVarsRenderer = defineComponent({\n  name: 'VaCssVarsRenderer',\n\n  inheritAttrs: false,\n\n  setup (props, { slots, attrs }) {\n    const { colorsToCSSVariable, colors } = useColors()\n\n    const style = computed(() => {\n      return colorsToCSSVariable(colors)\n    })\n\n    return () => h(Fragment, attrs, renderSlotNodes(slots.default, {}, {\n      style: style.value,\n    }) || undefined)\n  },\n})\n\nexport default defineComponent({\n  name: 'VaConfig',\n  components: { CssVarsRenderer },\n  props: {\n    ...useComponentPresetProp,\n    components: { type: Object as PropType<ComponentConfig>, default: () => ({}) },\n    colors: { type: Object as PropType<PartialGlobalConfig['colors']> },\n    i18n: { type: Object as PropType<PartialGlobalConfig['i18n']> },\n  },\n  inheritAttrs: false,\n  setup (props) {\n    const prevChain = useLocalConfig()\n    // We want it to be an array and not a merged object for optimization purposes\n    const nextChain = computed(() => [...prevChain.value, props.components])\n\n    provideLocalConfig(nextChain)\n\n    const newConfig = useGlobalConfigProvider(computed(() => {\n      const config = {} as any\n\n      if (props.colors) {\n        config.colors = props.colors\n      }\n\n      if (props.i18n) {\n        config.i18n = props.i18n\n      }\n\n      return config\n    }))\n\n    const doRenderCssVars = computed(() => {\n      return Boolean(props.colors)\n    })\n\n    return {\n      newConfig,\n      doRenderCssVars,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;EACwC,MAAAA,0BAAA,GAAAC,gBAAA;8CAC5BC,WAAA,CAAAF,0BAAA,EAAAG,cAAA,CAAAC,UAAA;IAAAC,GAAA;EAAA,GAAAC,IAAA,CAAAC,MAAA;IAAAC,OAAA,EAAAC,OAAA,QAAAC,UAAA,CAAAJ,IAAA,CAAAK,MAAA,a;IAEVC,CAAA;EAAA,UAAAF,UAAA,CAAAJ,IAAA,CAAAK,MAAA;IAAAN,GAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}