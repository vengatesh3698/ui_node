{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed } from \"vue\";\nconst verticalPlacement = [\"top\", \"bottom\"];\nconst horizontalPlacement = [\"left\", \"right\"];\nconst placementPosition = [...verticalPlacement, ...horizontalPlacement];\nconst placementAlignment = [\"start\", \"end\", \"center\"];\nconst placementsPositions = placementPosition.reduce((acc, position) => {\n  acc.push(position);\n  placementAlignment.forEach(alignment => acc.push(`${position}-${alignment}`));\n  return acc;\n}, [\"auto\"]);\nconst placementAliasesPositions = verticalPlacement.reduce((acc, yPosition) => {\n  horizontalPlacement.forEach(xPosition => {\n    acc.push(`${yPosition}-${xPosition}`);\n    acc.push(`${xPosition}-${yPosition}`);\n  });\n  return acc;\n}, []);\nconst placementsPositionsWithAliases = [...placementsPositions, ...placementAliasesPositions];\nconst aliasToPlacement = {\n  \"top-left\": \"top-start\",\n  \"left-top\": \"top-start\",\n  \"top-right\": \"top-end\",\n  \"right-top\": \"top-end\",\n  \"bottom-left\": \"bottom-start\",\n  \"left-bottom\": \"bottom-start\",\n  \"bottom-right\": \"bottom-end\",\n  \"right-bottom\": \"bottom-end\"\n};\nconst usePlacementAliasesProps = {\n  placement: {\n    type: String,\n    default: \"auto\",\n    validator: position => placementsPositionsWithAliases.includes(position)\n  }\n};\nconst usePlacementAliases = props => {\n  const placementArray = computed(() => {\n    const placement = aliasToPlacement[props.placement] || props.placement;\n    return placement.split(\"-\");\n  });\n  const position = computed(() => {\n    const position2 = placementArray.value[0];\n    return position2 === \"auto\" ? \"bottom\" : position2;\n  });\n  const align = computed(() => {\n    return placementArray.value[1] || \"center\";\n  });\n  return {\n    position,\n    align\n  };\n};\nexport { usePlacementAliasesProps as a, placementsPositionsWithAliases as p, usePlacementAliases as u };","map":{"version":3,"names":["verticalPlacement","horizontalPlacement","placementPosition","placementAlignment","placementsPositions","reduce","acc","position","push","forEach","alignment","placementAliasesPositions","yPosition","xPosition","placementsPositionsWithAliases","aliasToPlacement","usePlacementAliasesProps","placement","type","String","default","validator","includes","usePlacementAliases","props","placementArray","computed","split","position2","value","align"],"sources":["../../../../src/composables/usePlacementAliases.ts"],"sourcesContent":["import { PropType, ExtractPropTypes, computed } from 'vue'\n\ntype verticalPlacement = 'top' | 'bottom'\ntype horizontalPlacement = 'left' | 'right'\ntype PlacementAlias = `${verticalPlacement}-${horizontalPlacement}` | `${horizontalPlacement}-${verticalPlacement}`\n\nexport type PlacementPosition = horizontalPlacement | verticalPlacement\ntype PlacementPositionWithDefault = PlacementPosition | 'auto'\n\nexport type PlacementAlignment = 'start' | 'end' | 'center'\nexport type Placement = PlacementPositionWithDefault | `${PlacementPosition}-${PlacementAlignment}`\nexport type PlacementWithAlias = Placement | PlacementAlias\nexport type ParsedPlacement = { position: PlacementPosition, align: PlacementAlignment }\n\nconst verticalPlacement: verticalPlacement[] = ['top', 'bottom']\nconst horizontalPlacement: horizontalPlacement[] = ['left', 'right']\nconst placementPosition = [...verticalPlacement, ...horizontalPlacement] as PlacementPosition[]\nconst placementAlignment = ['start', 'end', 'center'] as PlacementAlignment[]\n\nexport const placementsPositions = placementPosition\n  .reduce((acc, position) => {\n    acc.push(position)\n    placementAlignment.forEach((alignment) => acc.push(`${position}-${alignment}`))\n    return acc\n  }, ['auto'] as Placement[])\n\nexport const placementAliasesPositions = verticalPlacement\n  .reduce((acc, yPosition) => {\n    horizontalPlacement.forEach((xPosition) => {\n      acc.push(`${yPosition}-${xPosition}`)\n      acc.push(`${xPosition}-${yPosition}`)\n    })\n    return acc\n  }, [] as PlacementAlias[])\n\nexport const placementsPositionsWithAliases: PlacementWithAlias[] = [...placementsPositions, ...placementAliasesPositions]\n\n// TODO: may be rewrite this const, it's not very flexible\nexport const aliasToPlacement: Record<PlacementAlias, Placement> = {\n  'top-left': 'top-start',\n  'left-top': 'top-start',\n  'top-right': 'top-end',\n  'right-top': 'top-end',\n  'bottom-left': 'bottom-start',\n  'left-bottom': 'bottom-start',\n  'bottom-right': 'bottom-end',\n  'right-bottom': 'bottom-end',\n}\n\nexport const usePlacementAliasesProps = {\n  placement: {\n    type: String as PropType<PlacementWithAlias>,\n    default: 'auto',\n    validator: (position: PlacementWithAlias) => placementsPositionsWithAliases.includes(position),\n  },\n}\n\nexport type UsePlacementAliasesProps = ExtractPropTypes<typeof usePlacementAliasesProps>\n\nexport const usePlacementAliases = (props: UsePlacementAliasesProps) => {\n  const placementArray = computed(() => {\n    const placement = aliasToPlacement[props.placement as PlacementAlias] || props.placement as PlacementWithAlias\n    return placement.split('-')\n  })\n\n  const position = computed(() => {\n    const position = placementArray.value[0]\n    return (position === 'auto' ? 'bottom' : position) as PlacementPosition\n  })\n\n  const align = computed(() => {\n    return (placementArray.value[1] || 'center') as PlacementAlignment\n  })\n\n  return { position, align }\n}\n"],"mappings":";;AAcA,MAAMA,iBAAA,GAAyC,CAAC,OAAO,QAAQ;AAC/D,MAAMC,mBAAA,GAA6C,CAAC,QAAQ,OAAO;AACnE,MAAMC,iBAAA,GAAoB,CAAC,GAAGF,iBAAA,EAAmB,GAAGC,mBAAmB;AACvE,MAAME,kBAAA,GAAqB,CAAC,SAAS,OAAO,QAAQ;AAE7C,MAAMC,mBAAA,GAAsBF,iBAAA,CAChCG,MAAA,CAAO,CAACC,GAAA,EAAKC,QAAA,KAAa;EACzBD,GAAA,CAAIE,IAAA,CAAKD,QAAQ;EACEJ,kBAAA,CAAAM,OAAA,CAASC,SAAA,IAAcJ,GAAA,CAAIE,IAAA,CAAK,GAAGD,QAAA,IAAYG,SAAA,EAAW,CAAC;EACvE,OAAAJ,GAAA;AACT,GAAG,CAAC,MAAM,CAAgB;AAErB,MAAMK,yBAAA,GAA4BX,iBAAA,CACtCK,MAAA,CAAO,CAACC,GAAA,EAAKM,SAAA,KAAc;EACNX,mBAAA,CAAAQ,OAAA,CAASI,SAAA,IAAc;IACrCP,GAAA,CAAAE,IAAA,CAAK,GAAGI,SAAA,IAAaC,SAAA,EAAW;IAChCP,GAAA,CAAAE,IAAA,CAAK,GAAGK,SAAA,IAAaD,SAAA,EAAW;EAAA,CACrC;EACM,OAAAN,GAAA;AACT,GAAG,EAAsB;AAEpB,MAAMQ,8BAAA,GAAuD,CAAC,GAAGV,mBAAA,EAAqB,GAAGO,yBAAyB;AAGlH,MAAMI,gBAAA,GAAsD;EACjE,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,aAAa;EACb,eAAe;EACf,eAAe;EACf,gBAAgB;EAChB,gBAAgB;AAClB;AAEO,MAAMC,wBAAA,GAA2B;EACtCC,SAAA,EAAW;IACTC,IAAA,EAAMC,MAAA;IACNC,OAAA,EAAS;IACTC,SAAA,EAAYd,QAAA,IAAiCO,8BAAA,CAA+BQ,QAAA,CAASf,QAAQ;EAC/F;AACF;AAIa,MAAAgB,mBAAA,GAAuBC,KAAA,IAAoC;EAChE,MAAAC,cAAA,GAAiBC,QAAA,CAAS,MAAM;IACpC,MAAMT,SAAA,GAAYF,gBAAA,CAAiBS,KAAA,CAAMP,SAA2B,KAAKO,KAAA,CAAMP,SAAA;IACxE,OAAAA,SAAA,CAAUU,KAAA,CAAM,GAAG;EAAA,CAC3B;EAEK,MAAApB,QAAA,GAAWmB,QAAA,CAAS,MAAM;IACxB,MAAAE,SAAA,GAAWH,cAAA,CAAeI,KAAA,CAAM,CAAC;IAC/B,OAAAD,SAAA,KAAa,SAAS,WAAWA,SAAA;EAAA,CAC1C;EAEK,MAAAE,KAAA,GAAQJ,QAAA,CAAS,MAAM;IACnB,OAAAD,cAAA,CAAeI,KAAA,CAAM,CAAC,KAAK;EAAA,CACpC;EAEM;IAAEtB,QAAA;IAAUuB;EAAA;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}