{"ast":null,"code":"import { ref, onMounted, onBeforeUnmount, watch, computed } from \"vue\";\nimport Cleave from \"cleave.js\";\nconst DEFAULT_MASK_TOKENS = {\n  creditCard: {\n    creditCard: true\n  },\n  date: {\n    date: true,\n    datePattern: [\"d\", \"m\", \"Y\"]\n  },\n  time: {\n    time: true,\n    timePattern: [\"h\", \"m\"],\n    timeFormat: \"24\"\n  },\n  numeral: {\n    numeral: true,\n    numeralThousandsGroupStyle: \"thousand\"\n  }\n};\nconst useCleaveProps = {\n  mask: {\n    type: [String, Object],\n    default: \"\"\n  },\n  returnRaw: {\n    type: Boolean,\n    default: true\n  }\n};\nconst useCleave = (element, props, syncValue) => {\n  const cleave = ref();\n  const getMask = mask => {\n    if (typeof mask === \"string\") {\n      return DEFAULT_MASK_TOKENS[mask] ? {\n        ...DEFAULT_MASK_TOKENS[mask]\n      } : {};\n    }\n    return {\n      ...mask\n    };\n  };\n  const destroyCleave = () => {\n    if (cleave.value) {\n      cleave.value.destroy();\n    }\n  };\n  const initCleave = () => {\n    destroyCleave();\n    if (!element.value) {\n      return;\n    }\n    cleave.value = new Cleave(element.value, getMask(props.mask));\n  };\n  onMounted(() => {\n    initCleave();\n  });\n  onBeforeUnmount(() => {\n    destroyCleave();\n  });\n  watch(() => [element.value, props.mask], () => {\n    initCleave();\n  });\n  const computedValue = computed(() => {\n    if (cleave.value) {\n      if (props.returnRaw && syncValue.value === cleave.value.getRawValue()) {\n        return cleave.value.getFormattedValue();\n      }\n    }\n    return syncValue.value;\n  });\n  const onInput = event => {\n    const value = event.target.value;\n    if (props.mask !== \"string\" && !Object.keys(props.mask).length) {\n      syncValue.value = value;\n      return;\n    }\n    if (cleave.value) {\n      cleave.value.setRawValue(value);\n      if (props.returnRaw) {\n        syncValue.value = cleave.value.getRawValue();\n        return;\n      }\n      syncValue.value = cleave.value.getFormattedValue();\n      return;\n    }\n    syncValue.value = value;\n  };\n  return {\n    cleave,\n    computedValue,\n    onInput\n  };\n};\nexport { useCleave as a, useCleaveProps as u };","map":{"version":3,"names":["DEFAULT_MASK_TOKENS","creditCard","date","datePattern","time","timePattern","timeFormat","numeral","numeralThousandsGroupStyle","useCleaveProps","mask","type","String","Object","default","returnRaw","Boolean","useCleave","element","props","syncValue","cleave","ref","getMask","destroyCleave","value","destroy","initCleave","Cleave","onMounted","onBeforeUnmount","watch","computedValue","computed","getRawValue","getFormattedValue","onInput","event","target","keys","length","setRawValue"],"sources":["../../../../../../src/components/va-input/hooks/useCleave.ts"],"sourcesContent":["import { computed, onBeforeUnmount, onMounted, PropType, ref, Ref, watch, ExtractPropTypes, WritableComputedRef } from 'vue'\nimport Cleave from 'cleave.js'\nimport { CleaveOptions } from 'cleave.js/options'\n\nconst DEFAULT_MASK_TOKENS: Record<string, Record<string, unknown>> = {\n  creditCard: {\n    creditCard: true,\n  },\n  date: {\n    date: true,\n    datePattern: ['d', 'm', 'Y'],\n  },\n  time: {\n    time: true,\n    timePattern: ['h', 'm'],\n    timeFormat: '24',\n  },\n  numeral: {\n    numeral: true,\n    numeralThousandsGroupStyle: 'thousand',\n  },\n}\n\nexport const useCleaveProps = {\n  mask: { type: [String, Object] as PropType<string | Record<string, number[]> | CleaveOptions>, default: '' },\n  returnRaw: { type: Boolean, default: true },\n}\n\nexport const useCleave = (\n  element: Ref<HTMLInputElement | undefined>,\n  props: ExtractPropTypes<typeof useCleaveProps>,\n  syncValue: WritableComputedRef<string | number>,\n) => {\n  const cleave = ref<Cleave>()\n\n  const getMask = (mask: CleaveOptions | string) => {\n    if (typeof mask === 'string') {\n      return DEFAULT_MASK_TOKENS[mask] ? { ...DEFAULT_MASK_TOKENS[mask] } : {}\n    }\n    return { ...mask }\n  }\n\n  const destroyCleave = () => {\n    if (cleave.value) { cleave.value.destroy() }\n  }\n\n  const initCleave = () => {\n    destroyCleave()\n\n    if (!element.value) { return }\n\n    cleave.value = new Cleave(element.value, getMask(props.mask))\n  }\n\n  onMounted(() => { initCleave() })\n  onBeforeUnmount(() => { destroyCleave() })\n\n  watch(() => [element.value, props.mask], () => { initCleave() })\n\n  const computedValue = computed<string | number>(() => {\n    if (cleave.value) {\n      if (props.returnRaw && syncValue.value === cleave.value.getRawValue()) {\n        return cleave.value.getFormattedValue()\n      }\n    }\n\n    return syncValue.value\n  })\n\n  const onInput = (event: Event) => {\n    const value = (event.target as HTMLInputElement).value\n\n    if (props.mask !== 'string' && !Object.keys(props.mask).length) {\n      syncValue.value = value\n      return\n    }\n\n    if (cleave.value) {\n      cleave.value.setRawValue(value)\n      if (props.returnRaw) {\n        syncValue.value = cleave.value.getRawValue()\n        return\n      }\n\n      syncValue.value = cleave.value.getFormattedValue()\n      return\n    }\n\n    syncValue.value = value\n  }\n\n  return {\n    cleave,\n    computedValue,\n    onInput,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}