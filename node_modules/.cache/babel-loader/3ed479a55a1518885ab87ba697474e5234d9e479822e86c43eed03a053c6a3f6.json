{"ast":null,"code":"import { ref, unref } from \"vue\";\nfunction isUndefined(t) {\n  return t === void 0;\n}\nconst useGridKeyboardNavigation = ({\n  rowSize,\n  start,\n  end,\n  onSelected,\n  onFocusIndex\n}) => {\n  const focusedCellIndex = ref(-1);\n  let previouslyClicked = false;\n  const onMousedown = () => {\n    previouslyClicked = true;\n  };\n  const onFocus = () => {\n    if (previouslyClicked) {\n      return;\n    }\n    previouslyClicked = false;\n    const index = onFocusIndex === void 0 ? unref(start) || 0 : unref(onFocusIndex);\n    focusedCellIndex.value = index;\n  };\n  const onBlur = () => {\n    previouslyClicked = false;\n    focusedCellIndex.value = -1;\n  };\n  const onKeydown = e => {\n    if ([\"ArrowRight\", \"ArrowLeft\", \"ArrowDown\", \"ArrowUp\", \"Enter\", \"Space\"].includes(e.key)) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    if (e.key === \"Enter\" || e.key === \"Space\") {\n      if (onSelected === void 0) {\n        return;\n      }\n      onSelected(focusedCellIndex.value);\n      return;\n    }\n    if (e.key === \"ArrowRight\") {\n      focusedCellIndex.value += 1;\n    }\n    if (e.key === \"ArrowLeft\") {\n      focusedCellIndex.value -= 1;\n    }\n    if (e.key === \"ArrowDown\") {\n      focusedCellIndex.value += rowSize;\n    }\n    if (e.key === \"ArrowUp\") {\n      focusedCellIndex.value -= rowSize;\n    }\n    if (!isUndefined(start) && focusedCellIndex.value < unref(start)) {\n      focusedCellIndex.value = unref(start);\n    }\n    if (!isUndefined(end) && focusedCellIndex.value > unref(end) - 1) {\n      focusedCellIndex.value = unref(end) - 1;\n    }\n  };\n  const containerAttributes = {\n    onFocus,\n    onKeydown,\n    onBlur,\n    onMousedown,\n    tabindex: 0\n  };\n  return {\n    focusedCellIndex,\n    containerAttributes\n  };\n};\nexport { useGridKeyboardNavigation as u };","map":{"version":3,"names":["isUndefined","t","useGridKeyboardNavigation","rowSize","start","end","onSelected","onFocusIndex","focusedCellIndex","ref","previouslyClicked","onMousedown","onFocus","index","unref","value","onBlur","onKeydown","e","includes","key","preventDefault","stopPropagation","containerAttributes","tabindex"],"sources":["../../../../../../src/components/va-date-picker/hooks/grid-keyboard-navigation.ts"],"sourcesContent":["import { ref, Ref, isRef, unref } from 'vue'\n\nfunction isUndefined<T> (t: T | undefined): t is undefined {\n  return t === undefined\n}\n\nexport const useGridKeyboardNavigation = (\n  {\n    rowSize,\n    start,\n    end,\n    onSelected,\n    onFocusIndex,\n  }: {\n    rowSize: number,\n    start?: Ref<number> | number,\n    end?: Ref<number> | number,\n    onFocusIndex?: Ref<number> | number,\n    onSelected?: (selectedValue: number) => any | null,\n  },\n) => {\n  const focusedCellIndex = ref(-1)\n\n  let previouslyClicked = false\n  const onMousedown = () => { previouslyClicked = true }\n\n  const onFocus = () => {\n    if (previouslyClicked) { return }\n    previouslyClicked = false\n\n    const index = onFocusIndex === undefined ? unref(start) || 0 : unref(onFocusIndex)\n\n    focusedCellIndex.value = index\n  }\n\n  const onBlur = () => {\n    previouslyClicked = false\n\n    focusedCellIndex.value = -1\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    if (['ArrowRight', 'ArrowLeft', 'ArrowDown', 'ArrowUp', 'Enter', 'Space'].includes(e.key)) {\n      // Prevent default for arrow keys and enter. Do not prevent default for tab! :)\n      e.preventDefault()\n      e.stopPropagation()\n    }\n\n    if (e.key === 'Enter' || e.key === 'Space') {\n      if (onSelected === undefined) { return }\n\n      onSelected(focusedCellIndex.value)\n      return\n    }\n\n    if (e.key === 'ArrowRight') {\n      focusedCellIndex.value += 1\n    }\n    if (e.key === 'ArrowLeft') {\n      focusedCellIndex.value -= 1\n    }\n    if (e.key === 'ArrowDown') {\n      focusedCellIndex.value += rowSize\n    }\n    if (e.key === 'ArrowUp') {\n      focusedCellIndex.value -= rowSize\n    }\n\n    if (!isUndefined(start) && focusedCellIndex.value < unref(start)) {\n      focusedCellIndex.value = unref(start)\n    }\n    if (!isUndefined(end) && focusedCellIndex.value > unref(end) - 1) {\n      focusedCellIndex.value = unref(end) - 1\n    }\n  }\n\n  const containerAttributes = {\n    onFocus, onKeydown, onBlur, onMousedown, tabindex: 0,\n  }\n\n  return {\n    focusedCellIndex, containerAttributes,\n  }\n}\n"],"mappings":";AAEA,SAASA,YAAgBC,CAAA,EAAkC;EACzD,OAAOA,CAAA,KAAM;AACf;AAEO,MAAMC,yBAAA,GAA4BA,CACvC;EACEC,OAAA;EACAC,KAAA;EACAC,GAAA;EACAC,UAAA;EACAC;AACF,MAOG;EACG,MAAAC,gBAAA,GAAmBC,GAAA,CAAI,EAAE;EAE/B,IAAIC,iBAAA,GAAoB;EACxB,MAAMC,WAAA,GAAcA,CAAA,KAAM;IAAsBD,iBAAA;EAAA;EAEhD,MAAME,OAAA,GAAUA,CAAA,KAAM;IACpB,IAAIF,iBAAA,EAAmB;MAAE;IAAO;IACZA,iBAAA;IAEd,MAAAG,KAAA,GAAQN,YAAA,KAAiB,SAAYO,KAAA,CAAMV,KAAK,KAAK,IAAIU,KAAA,CAAMP,YAAY;IAEjFC,gBAAA,CAAiBO,KAAA,GAAQF,KAAA;EAAA;EAG3B,MAAMG,MAAA,GAASA,CAAA,KAAM;IACCN,iBAAA;IAEpBF,gBAAA,CAAiBO,KAAA,GAAQ;EAAA;EAGrB,MAAAE,SAAA,GAAaC,CAAA,IAAqB;IAClC,KAAC,cAAc,aAAa,aAAa,WAAW,SAAS,OAAO,EAAEC,QAAA,CAASD,CAAA,CAAEE,GAAG,GAAG;MAEzFF,CAAA,CAAEG,cAAA,CAAe;MACjBH,CAAA,CAAEI,eAAA,CAAgB;IACpB;IAEA,IAAIJ,CAAA,CAAEE,GAAA,KAAQ,WAAWF,CAAA,CAAEE,GAAA,KAAQ,SAAS;MAC1C,IAAId,UAAA,KAAe,QAAW;QAAE;MAAO;MAEvCA,UAAA,CAAWE,gBAAA,CAAiBO,KAAK;MACjC;IACF;IAEI,IAAAG,CAAA,CAAEE,GAAA,KAAQ,cAAc;MAC1BZ,gBAAA,CAAiBO,KAAA,IAAS;IAC5B;IACI,IAAAG,CAAA,CAAEE,GAAA,KAAQ,aAAa;MACzBZ,gBAAA,CAAiBO,KAAA,IAAS;IAC5B;IACI,IAAAG,CAAA,CAAEE,GAAA,KAAQ,aAAa;MACzBZ,gBAAA,CAAiBO,KAAA,IAASZ,OAAA;IAC5B;IACI,IAAAe,CAAA,CAAEE,GAAA,KAAQ,WAAW;MACvBZ,gBAAA,CAAiBO,KAAA,IAASZ,OAAA;IAC5B;IAEI,KAACH,WAAA,CAAYI,KAAK,KAAKI,gBAAA,CAAiBO,KAAA,GAAQD,KAAA,CAAMV,KAAK,GAAG;MAC/CI,gBAAA,CAAAO,KAAA,GAAQD,KAAA,CAAMV,KAAK;IACtC;IACI,KAACJ,WAAA,CAAYK,GAAG,KAAKG,gBAAA,CAAiBO,KAAA,GAAQD,KAAA,CAAMT,GAAG,IAAI,GAAG;MAC/CG,gBAAA,CAAAO,KAAA,GAAQD,KAAA,CAAMT,GAAG,IAAI;IACxC;EAAA;EAGF,MAAMkB,mBAAA,GAAsB;IAC1BX,OAAA;IAASK,SAAA;IAAWD,MAAA;IAAQL,WAAA;IAAaa,QAAA,EAAU;EAAA;EAG9C;IACLhB,gBAAA;IAAkBe;EAAA;AAEtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}