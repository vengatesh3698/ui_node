{"ast":null,"code":"import { r as regexGroupsValues } from \"./regex-c1fc6a08.mjs\";\nconst dynamicSegmentRegex = /{[^}]*}/g;\nconst dynamicSegmentStringToRegex = template => {\n  return template.replace(dynamicSegmentRegex, \"(.*)\");\n};\nconst dynamicSegmentsNames = template => {\n  return (template.match(dynamicSegmentRegex) || []).map(g => g.replace(/{|}/g, \"\"));\n};\nconst dynamicSegmentsValues = (str, template) => {\n  return regexGroupsValues(str, dynamicSegmentStringToRegex(template));\n};\nconst dynamicSegments = (str, template) => {\n  const params = dynamicSegmentsNames(template);\n  const values = dynamicSegmentsValues(str, template);\n  return params.reduce((acc, paramValue, i) => ({\n    ...acc,\n    [paramValue]: values[i]\n  }), {});\n};\nconst strictMatch = (str, regex) => {\n  return (str.match(regex) || [])[0] === str;\n};\nconst isMatchDynamicSegments = (str, template) => {\n  const templateRegex = dynamicSegmentStringToRegex(template);\n  return strictMatch(str, new RegExp(templateRegex));\n};\nexport { dynamicSegments as d, isMatchDynamicSegments as i };","map":{"version":3,"names":["dynamicSegmentRegex","dynamicSegmentStringToRegex","template","replace","dynamicSegmentsNames","match","map","g","dynamicSegmentsValues","str","regexGroupsValues","dynamicSegments","params","values","reduce","acc","paramValue","i","strictMatch","regex","isMatchDynamicSegments","templateRegex","RegExp"],"sources":["../../../../../../src/services/icon/utils/dynamic-segment.ts"],"sourcesContent":["import { regexGroupsValues } from './regex'\n\nconst dynamicSegmentRegex = /{[^}]*}/g // match {any-thing}, {even with space}\n\n/**\n * Replace {anything} to regex (.*) group\n * @example\n * ```\n * \"fa-{code}\" -> \"fa-(.*)\"\n * \"fa-{code}-{suffix}\" -> \"fa-(.*)-(.*)\"\n * ```\n */\nconst dynamicSegmentStringToRegex = (template: string) => {\n  return template.replace(dynamicSegmentRegex, '(.*)')\n}\n\n/**\n Returns content from string in {}\n @example\n ```\n \"fa-{code}-{suffix}\" -> ['code', 'suffix']\n ```\n */\nconst dynamicSegmentsNames = (template: string) => {\n  return (template.match(dynamicSegmentRegex) || []) // 'fa-{code}-{suffix}' -> ['{code}', '{suffix}']\n    .map((g) => g.replace(/{|}/g, '')) // ['{code}', '{suffix}'] -> ['code', 'suffix']\n}\n\n/**\n * Transform template to regex and returns regex group values\n * @example\n * ```\n * \"fa-clock-o\", \"fa-{code}-{suffix}\" -> [\"clock\", \"o\"]\n * ```\n */\nconst dynamicSegmentsValues = (str: string, template: string) => {\n  return regexGroupsValues(str, dynamicSegmentStringToRegex(template))\n}\n\n/**\n * Returns object with param name from template and match value from str\n * @example\n * ```\n * \"fa-phone\", \"fa-{icon code}\" -> { 'icon code': 'phone' }\n * \"fa4 clock-o\", \"fa4 {icon-code}-{suffix}\" -> { 'icon-code': 'clock', 'suffix': 'o' }\n * \"fa4 clock-o\", \"fa4 {icon-code}\" -> { 'icon-code': 'clock-o' }\n * ```\n */\nexport const dynamicSegments = (str: string, template: string) => {\n  const params = dynamicSegmentsNames(template)\n  const values = dynamicSegmentsValues(str, template)\n\n  return params.reduce((acc, paramValue, i) => ({ ...acc, [paramValue]: values[i] }), {})\n}\n\n/**\n * Returns true if match string equals to input `str`\n * @example\n * ```\n * \"vuestic-home-open\", /vuestic-(.*)-o/ -> false\n * \"vuestic-home-open\", /vuestic-(.*)-open/ -> true\n * ```\n */\nconst strictMatch = (str: string, regex: RegExp) => {\n  return (str.match(regex) || [])[0] === str\n}\n\n/**\n * Returns true if str match template\n * @example\n *  ```\n * \"fa-phone\", \"fa-{icon code}\" -> true\n * \"fa4 clock-o\", \"fa4 {icon-code}-{suffix}\" -> true\n * \"fa4 clock-o\", \"fa4 {icon-code}\" -> false\n * ```\n */\nexport const isMatchDynamicSegments = (str: string, template: string) => {\n  const templateRegex = dynamicSegmentStringToRegex(template)\n  return strictMatch(str, new RegExp(templateRegex))\n}\n"],"mappings":";AAEA,MAAMA,mBAAA,GAAsB;AAU5B,MAAMC,2BAAA,GAA+BC,QAAA,IAAqB;EACjD,OAAAA,QAAA,CAASC,OAAA,CAAQH,mBAAA,EAAqB,MAAM;AACrD;AASA,MAAMI,oBAAA,GAAwBF,QAAA,IAAqB;EACjD,QAAQA,QAAA,CAASG,KAAA,CAAML,mBAAmB,KAAK,IAC5CM,GAAA,CAAKC,CAAA,IAAMA,CAAA,CAAEJ,OAAA,CAAQ,QAAQ,EAAE,CAAC;AACrC;AASA,MAAMK,qBAAA,GAAwBA,CAACC,GAAA,EAAaP,QAAA,KAAqB;EAC/D,OAAOQ,iBAAA,CAAkBD,GAAA,EAAKR,2BAAA,CAA4BC,QAAQ,CAAC;AACrE;AAWa,MAAAS,eAAA,GAAkBA,CAACF,GAAA,EAAaP,QAAA,KAAqB;EAC1D,MAAAU,MAAA,GAASR,oBAAA,CAAqBF,QAAQ;EACtC,MAAAW,MAAA,GAASL,qBAAA,CAAsBC,GAAA,EAAKP,QAAQ;EAElD,OAAOU,MAAA,CAAOE,MAAA,CAAO,CAACC,GAAA,EAAKC,UAAA,EAAYC,CAAA,MAAO;IAAE,GAAGF,GAAA;IAAK,CAACC,UAAU,GAAGH,MAAA,CAAOI,CAAC;EAAE,IAAI,CAAE;AACxF;AAUA,MAAMC,WAAA,GAAcA,CAACT,GAAA,EAAaU,KAAA,KAAkB;EAClD,QAAQV,GAAA,CAAIJ,KAAA,CAAMc,KAAK,KAAK,IAAI,CAAC,MAAMV,GAAA;AACzC;AAWa,MAAAW,sBAAA,GAAyBA,CAACX,GAAA,EAAaP,QAAA,KAAqB;EACjE,MAAAmB,aAAA,GAAgBpB,2BAAA,CAA4BC,QAAQ;EAC1D,OAAOgB,WAAA,CAAYT,GAAA,EAAK,IAAIa,MAAA,CAAOD,aAAa,CAAC;AACnD"},"metadata":{},"sourceType":"module","externalDependencies":[]}