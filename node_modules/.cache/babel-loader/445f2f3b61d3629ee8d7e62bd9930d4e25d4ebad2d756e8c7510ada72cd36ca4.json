{"ast":null,"code":"const useTimeFormatter = props => {\n  const formatDate = date => {\n    if (!date) {\n      return \"\";\n    }\n    if (props.ampm) {\n      return date.toLocaleTimeString(\"en-US\");\n    }\n    return date.toLocaleTimeString(\"en-GB\");\n  };\n  const sliceTime = (time, start, end) => time.split(\":\").slice(start, end).join(\":\");\n  const formatWithView = date => {\n    if (props.view === \"seconds\") {\n      return formatDate(date);\n    }\n    const [time, period] = formatDate(date).split(\" \");\n    if (props.view === \"minutes\") {\n      if (!period) {\n        return sliceTime(time, 0, 2);\n      }\n      return [sliceTime(time, 0, 2), period].join(\" \");\n    }\n    if (props.view === \"hours\") {\n      if (!period) {\n        return sliceTime(time, 0, 1);\n      }\n      return [sliceTime(time, 0, 1), period].join(\" \");\n    }\n    return \"\";\n  };\n  return {\n    format: date => props.format ? props.format(date) : formatWithView(date)\n  };\n};\nexport { useTimeFormatter as u };","map":{"version":3,"names":["useTimeFormatter","props","formatDate","date","ampm","toLocaleTimeString","sliceTime","time","start","end","split","slice","join","formatWithView","view","period","format"],"sources":["../../../../../../src/components/va-time-input/hooks/time-text-formatter.ts"],"sourcesContent":["export const useTimeFormatter = (props: {\n  ampm?: boolean,\n  view?: 'hours' | 'minutes' | 'seconds'\n  format?: (date?: Date) => string\n}) => {\n  const formatDate = (date?: Date) => {\n    if (!date) { return '' }\n\n    if (props.ampm) {\n      return date.toLocaleTimeString('en-US')\n    }\n\n    return date.toLocaleTimeString('en-GB')\n  }\n\n  const sliceTime = (time: string, start: number, end: number) => time.split(':').slice(start, end).join(':')\n\n  const formatWithView = (date?: Date) => {\n    if (props.view === 'seconds') {\n      return formatDate(date)\n    }\n\n    const [time, period] = formatDate(date).split(' ')\n\n    if (props.view === 'minutes') {\n      if (!period) { return sliceTime(time, 0, 2) }\n\n      return [sliceTime(time, 0, 2), period].join(' ')\n    }\n\n    if (props.view === 'hours') {\n      if (!period) { return sliceTime(time, 0, 1) }\n\n      return [sliceTime(time, 0, 1), period].join(' ')\n    }\n\n    return ''\n  }\n\n  return {\n    format: (date?: Date) => props.format ? props.format(date) : formatWithView(date),\n  }\n}\n"],"mappings":"AAAa,MAAAA,gBAAA,GAAoBC,KAAA,IAI3B;EACE,MAAAC,UAAA,GAAcC,IAAA,IAAgB;IAClC,IAAI,CAACA,IAAA,EAAM;MAAS;IAAG;IAEvB,IAAIF,KAAA,CAAMG,IAAA,EAAM;MACP,OAAAD,IAAA,CAAKE,kBAAA,CAAmB,OAAO;IACxC;IAEO,OAAAF,IAAA,CAAKE,kBAAA,CAAmB,OAAO;EAAA;EAGxC,MAAMC,SAAA,GAAYA,CAACC,IAAA,EAAcC,KAAA,EAAeC,GAAA,KAAgBF,IAAA,CAAKG,KAAA,CAAM,GAAG,EAAEC,KAAA,CAAMH,KAAA,EAAOC,GAAG,EAAEG,IAAA,CAAK,GAAG;EAEpG,MAAAC,cAAA,GAAkBV,IAAA,IAAgB;IAClC,IAAAF,KAAA,CAAMa,IAAA,KAAS,WAAW;MAC5B,OAAOZ,UAAA,CAAWC,IAAI;IACxB;IAEM,OAACI,IAAA,EAAMQ,MAAM,IAAIb,UAAA,CAAWC,IAAI,EAAEO,KAAA,CAAM,GAAG;IAE7C,IAAAT,KAAA,CAAMa,IAAA,KAAS,WAAW;MAC5B,IAAI,CAACC,MAAA,EAAQ;QAAS,OAAAT,SAAA,CAAUC,IAAA,EAAM,GAAG,CAAC;MAAE;MAErC,QAACD,SAAA,CAAUC,IAAA,EAAM,GAAG,CAAC,GAAGQ,MAAM,EAAEH,IAAA,CAAK,GAAG;IACjD;IAEI,IAAAX,KAAA,CAAMa,IAAA,KAAS,SAAS;MAC1B,IAAI,CAACC,MAAA,EAAQ;QAAS,OAAAT,SAAA,CAAUC,IAAA,EAAM,GAAG,CAAC;MAAE;MAErC,QAACD,SAAA,CAAUC,IAAA,EAAM,GAAG,CAAC,GAAGQ,MAAM,EAAEH,IAAA,CAAK,GAAG;IACjD;IAEO;EAAA;EAGF;IACLI,MAAA,EAASb,IAAA,IAAgBF,KAAA,CAAMe,MAAA,GAASf,KAAA,CAAMe,MAAA,CAAOb,IAAI,IAAIU,cAAA,CAAeV,IAAI;EAAA;AAEpF"},"metadata":{},"sourceType":"module","externalDependencies":[]}