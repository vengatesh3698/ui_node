{"ast":null,"code":"import { m as mergeDeep } from \"../../../utils/merge-deep-d17b3b27.mjs\";\nimport { c as cloneDeep } from \"../../../../vendor-fff696df.mjs\";\nimport { computed, provide } from \"vue\";\nimport { m as makeColorsConfig } from \"../../../services/color/config/make-config-a982a813.mjs\";\nimport { u as useGlobalConfig } from \"../../../composables/useGlobalConfig-29bee2de.mjs\";\nimport { G as GLOBAL_CONFIG } from \"../../../services/global-config/global-config-5a68b2b2.mjs\";\nconst useGlobalConfigProvider = next => {\n  const {\n    globalConfig,\n    mergeGlobalConfig,\n    setGlobalConfig,\n    getGlobalConfig\n  } = useGlobalConfig();\n  const nextChain = computed(() => {\n    var _a;\n    const gcCopy = cloneDeep(globalConfig.value);\n    const compiledCopy = {\n      ...gcCopy,\n      colors: makeColorsConfig(gcCopy.colors)\n    };\n    const config = mergeDeep(compiledCopy, next.value);\n    if ((_a = next.value.colors) == null ? void 0 : _a.variables) {\n      Object.keys(next.value.colors.variables).forEach(key => {\n        config.colors.variables[key] = next.value.colors.variables[key];\n      });\n    }\n    return config;\n  });\n  provide(GLOBAL_CONFIG, {\n    mergeGlobalConfig,\n    setGlobalConfig,\n    getGlobalConfig,\n    globalConfig: nextChain\n  });\n  return nextChain;\n};\nexport { useGlobalConfigProvider as u };","map":{"version":3,"names":["useGlobalConfigProvider","next","globalConfig","mergeGlobalConfig","setGlobalConfig","getGlobalConfig","useGlobalConfig","nextChain","computed","gcCopy","cloneDeep","value","compiledCopy","colors","makeColorsConfig","config","mergeDeep","_a","variables","Object","keys","forEach","key","provide","GLOBAL_CONFIG"],"sources":["../../../../../../src/components/va-config/hooks/useGlobalConfigProvider.ts"],"sourcesContent":["import { mergeDeep } from './../../../utils/merge-deep'\nimport cloneDeep from 'lodash/cloneDeep'\nimport { provide, computed, Ref } from 'vue'\nimport { useGlobalConfig } from '../../../composables'\nimport { GLOBAL_CONFIG, GlobalConfig, GlobalConfigUpdater, PartialGlobalConfig } from '../../../services/global-config'\nimport { makeColorsConfig } from '../../../services/color/config/make-config'\n\nexport const useGlobalConfigProvider = (next: Ref<PartialGlobalConfig>) => {\n  const { globalConfig, mergeGlobalConfig, setGlobalConfig, getGlobalConfig } = useGlobalConfig()\n\n  const nextChain = computed(() => {\n    const gcCopy = cloneDeep(globalConfig.value)\n    const compiledCopy: GlobalConfig = {\n      ...gcCopy,\n      colors: makeColorsConfig(gcCopy.colors),\n    }\n\n    const config = mergeDeep(compiledCopy, next.value) as GlobalConfig\n\n    // Variables is a virtual property, so we need to merge it manually after preset in chosen!\n    if (next.value.colors?.variables) {\n      Object.keys(next.value.colors.variables).forEach((key) => {\n        config.colors.variables[key] = next.value.colors!.variables![key]!\n      })\n    }\n\n    return config\n  })\n\n  provide(GLOBAL_CONFIG, {\n    mergeGlobalConfig,\n    setGlobalConfig,\n    getGlobalConfig,\n    globalConfig: nextChain,\n  })\n\n  return nextChain\n}\n"],"mappings":";;;;;;AAOa,MAAAA,uBAAA,GAA2BC,IAAA,IAAmC;EACzE,MAAM;IAAEC,YAAA;IAAcC,iBAAA;IAAmBC,eAAA;IAAiBC;EAAA,IAAoBC,eAAA;EAExE,MAAAC,SAAA,GAAYC,QAAA,CAAS,MAAM;;IACzB,MAAAC,MAAA,GAASC,SAAA,CAAUR,YAAA,CAAaS,KAAK;IAC3C,MAAMC,YAAA,GAA6B;MACjC,GAAGH,MAAA;MACHI,MAAA,EAAQC,gBAAA,CAAiBL,MAAA,CAAOI,MAAM;IAAA;IAGxC,MAAME,MAAA,GAASC,SAAA,CAAUJ,YAAA,EAAcX,IAAA,CAAKU,KAAK;IAG7C,KAAAM,EAAA,GAAAhB,IAAA,CAAKU,KAAA,CAAME,MAAA,KAAX,gBAAAI,EAAA,CAAmBC,SAAA,EAAW;MACzBC,MAAA,CAAAC,IAAA,CAAKnB,IAAA,CAAKU,KAAA,CAAME,MAAA,CAAOK,SAAS,EAAEG,OAAA,CAASC,GAAA,IAAQ;QACjDP,MAAA,CAAAF,MAAA,CAAOK,SAAA,CAAUI,GAAG,IAAIrB,IAAA,CAAKU,KAAA,CAAME,MAAA,CAAQK,SAAA,CAAWI,GAAG;MAAA,CACjE;IACH;IAEO,OAAAP,MAAA;EAAA,CACR;EAEDQ,OAAA,CAAQC,aAAA,EAAe;IACrBrB,iBAAA;IACAC,eAAA;IACAC,eAAA;IACAH,YAAA,EAAcK;EAAA,CACf;EAEM,OAAAA,SAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}