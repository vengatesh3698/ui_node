{"ast":null,"code":"import { computed, getCurrentInstance } from \"vue\";\nimport { u as useGlobalConfig } from \"./useGlobalConfig-29bee2de.mjs\";\nconst sizesConfig = {\n  defaultSize: 48,\n  sizes: {\n    small: 32,\n    medium: 48,\n    large: 64\n  }\n};\nconst fontSizesConfig = {\n  defaultSize: 1,\n  sizes: {\n    small: 0.75,\n    medium: 1,\n    large: 1.25\n  }\n};\nconst useSizeProps = {\n  size: {\n    type: [String, Number],\n    default: \"\",\n    validator: size => {\n      return typeof size === \"string\" || typeof size === \"number\";\n    }\n  },\n  sizesConfig: {\n    type: Object,\n    default: () => sizesConfig\n  },\n  fontSizesConfig: {\n    type: Object,\n    default: () => fontSizesConfig\n  }\n};\nconst fontRegex = /(?<fontSize>\\d+)(?<extension>px|rem)/i;\nconst convertToRem = px => px / 16 - 0.5;\nconst useSize = (props, componentName = (_a => (_a = getCurrentInstance()) == null ? void 0 : _a.type.name)()) => {\n  const {\n    getGlobalConfig\n  } = useGlobalConfig();\n  const sizesConfigGlobal = computed(() => {\n    var _a2, _b;\n    return componentName ? (_b = (_a2 = getGlobalConfig().components) == null ? void 0 : _a2[componentName]) == null ? void 0 : _b.sizesConfig : void 0;\n  });\n  const sizeComputed = computed(() => {\n    var _a2, _b, _c;\n    const {\n      defaultSize,\n      sizes\n    } = props.sizesConfig;\n    const defaultSizeGlobal = (_a2 = sizesConfigGlobal.value) == null ? void 0 : _a2.defaultSize;\n    if (!props.size) {\n      return `${defaultSize || defaultSizeGlobal}px`;\n    }\n    if (typeof props.size === \"string\") {\n      const sizeFromGlobalConfig = (_c = (_b = sizesConfigGlobal.value) == null ? void 0 : _b.sizes) == null ? void 0 : _c[props.size];\n      const sizeFromProps = sizes[props.size];\n      if (sizeFromProps) {\n        return `${sizeFromProps}px`;\n      }\n      if (sizeFromGlobalConfig) {\n        return `${sizeFromGlobalConfig}px`;\n      }\n      return props.size;\n    }\n    return `${props.size}px`;\n  });\n  const fontSizeInRem = computed(() => {\n    const {\n      defaultSize,\n      sizes\n    } = props.fontSizesConfig;\n    if (!props.size) {\n      return defaultSize;\n    }\n    if (typeof props.size === \"string\") {\n      if (props.size in sizes) {\n        return sizes[props.size];\n      }\n      const fontSizeParsed = props.size.match(fontRegex);\n      if (!fontSizeParsed || !fontSizeParsed.groups) {\n        throw new Error(\"Size prop should be either valid string or number\");\n      }\n      const {\n        extension,\n        fontSize\n      } = fontSizeParsed.groups;\n      return extension === \"rem\" ? +fontSize : convertToRem(+fontSize);\n    }\n    return convertToRem(props.size);\n  });\n  const fontSizeComputed = computed(() => `${fontSizeInRem.value}rem`);\n  return {\n    sizeComputed,\n    fontSizeComputed,\n    fontSizeInRem\n  };\n};\nexport { useSize as a, useSizeProps as u };","map":{"version":3,"names":["sizesConfig","defaultSize","sizes","small","medium","large","fontSizesConfig","useSizeProps","size","type","String","Number","default","validator","Object","fontRegex","convertToRem","px","useSize","props","componentName","_a","getCurrentInstance","name","getGlobalConfig","useGlobalConfig","sizesConfigGlobal","computed","_b","_a2","components","sizeComputed","defaultSizeGlobal","value","sizeFromGlobalConfig","_c","sizeFromProps","fontSizeInRem","fontSizeParsed","match","groups","Error","extension","fontSize","fontSizeComputed"],"sources":["../../../../src/composables/useSize.ts"],"sourcesContent":["import { computed, getCurrentInstance, PropType } from 'vue'\n\nimport { useGlobalConfig, SizeConfig } from '../services/global-config/global-config'\nimport type { VuesticComponentName } from '../services/vue-plugin/types/components'\n\nexport const sizesConfig: SizeConfig = {\n  defaultSize: 48,\n  sizes: {\n    small: 32,\n    medium: 48,\n    large: 64,\n  },\n}\n\nexport const fontSizesConfig: SizeConfig = {\n  defaultSize: 1,\n  sizes: {\n    small: 0.75,\n    medium: 1,\n    large: 1.25,\n  },\n}\n\ninterface SizeProps {\n  size: string | number;\n  sizesConfig: Record<string, any>;\n  fontSizesConfig: Record<string, any>;\n}\n\n/**\n * You could add these props to any component by destructuring them inside props option.\n * @example\n * props: { ...useSizeProps, componentsOwnProp, etc. }\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\n */\nexport const useSizeProps = {\n  size: {\n    type: [String, Number],\n    default: '',\n    validator: (size: string | number) => {\n      return typeof size === 'string' || typeof size === 'number'\n    },\n  },\n\n  sizesConfig: {\n    type: Object as PropType<Record<string, any>>,\n    default: () => sizesConfig,\n  },\n\n  fontSizesConfig: {\n    type: Object as PropType<Record<string, any>>,\n    default: () => fontSizesConfig,\n  },\n}\n\nconst fontRegex = /(?<fontSize>\\d+)(?<extension>px|rem)/i\n\nconst convertToRem = (px: number) => px / 16 - 0.5\n\nexport const useSize = (\n  props: SizeProps,\n  componentName: string | undefined = getCurrentInstance()?.type.name,\n) => {\n  const { getGlobalConfig } = useGlobalConfig()\n\n  const sizesConfigGlobal = computed<SizeConfig>(() => {\n    return componentName\n      ? (getGlobalConfig().components as any)?.[componentName as VuesticComponentName]?.sizesConfig\n      : undefined\n  })\n\n  const sizeComputed = computed<string>(() => {\n    const { defaultSize, sizes } = props.sizesConfig\n    const defaultSizeGlobal = sizesConfigGlobal.value?.defaultSize\n\n    if (!props.size) { return `${defaultSize || defaultSizeGlobal}px` }\n\n    if (typeof props.size === 'string') {\n      const sizeFromGlobalConfig = sizesConfigGlobal.value?.sizes?.[props.size]\n      const sizeFromProps = sizes[props.size]\n\n      if (sizeFromProps) { return `${sizeFromProps}px` }\n      if (sizeFromGlobalConfig) { return `${sizeFromGlobalConfig}px` }\n\n      return props.size\n    }\n\n    return `${props.size}px`\n  })\n\n  const fontSizeInRem = computed<number>(() => {\n    const { defaultSize, sizes } = props.fontSizesConfig\n\n    if (!props.size) { return defaultSize }\n\n    if (typeof props.size === 'string') {\n      if (props.size in sizes) { return sizes[props.size] }\n\n      const fontSizeParsed = props.size.match(fontRegex)\n      if (!fontSizeParsed || !fontSizeParsed.groups) {\n        throw new Error('Size prop should be either valid string or number')\n      }\n\n      const { extension, fontSize } = fontSizeParsed.groups\n      return extension === 'rem' ? +fontSize : convertToRem(+fontSize)\n    }\n\n    return convertToRem(props.size)\n  })\n\n  const fontSizeComputed = computed<string>(() => `${fontSizeInRem.value}rem`)\n\n  return {\n    sizeComputed,\n    fontSizeComputed,\n    fontSizeInRem,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}