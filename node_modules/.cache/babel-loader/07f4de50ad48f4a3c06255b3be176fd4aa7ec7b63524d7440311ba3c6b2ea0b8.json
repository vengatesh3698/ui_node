{"ast":null,"code":"import { inject as inject$1 } from \"vue\";\nlet app;\nconst setCurrentApp = instance => {\n  app = instance;\n};\nconst getCurrentApp = () => app;\nconst inject = (key, value) => {\n  var _a;\n  const app2 = (_a = getCurrentApp()) == null ? void 0 : _a._context.provides[key];\n  return app2 || inject$1(key, value);\n};\nexport { getCurrentApp as g, inject as i, setCurrentApp as s };","map":{"version":3,"names":["app","setCurrentApp","instance","getCurrentApp","inject","key","value","app2","_a","_context","provides","inject$1"],"sources":["../../../../src/services/current-app.ts"],"sourcesContent":["import type { App } from 'vue'\nimport { inject as vueInject } from 'vue'\n\n/**\n * Similar to `getCurrentInstance` but for plugins, so we can use inject in plugins.\n */\nlet app: App | null\n\nexport const setCurrentApp = (instance: App | null) => { app = instance }\nexport const getCurrentApp = () => app\n\n/** Wrapper around vue inject, so it can be used in plugins */\nexport const inject = ((key: string, value?: any) => {\n  const app = getCurrentApp()?._context.provides[key]\n\n  return app || vueInject(key, value)\n}) as unknown as typeof vueInject\n"],"mappings":";AAMA,IAAIA,GAAA;AAES,MAAAC,aAAA,GAAiBC,QAAA,IAAyB;EAAQF,GAAA,GAAAE,QAAA;AAAS;AACjE,MAAMC,aAAA,GAAgBA,CAAA,KAAMH,GAAA;AAGtB,MAAAI,MAAA,GAAUA,CAACC,GAAA,EAAaC,KAAA,KAAgB;;EACnD,MAAMC,IAAA,IAAMC,EAAA,GAAAL,aAAA,CAAiB,MAAjB,gBAAAK,EAAA,CAAiBC,QAAA,CAASC,QAAA,CAASL,GAAA;EAExC,OAAAE,IAAA,IAAOI,QAAA,CAAUN,GAAA,EAAKC,KAAK;AACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}