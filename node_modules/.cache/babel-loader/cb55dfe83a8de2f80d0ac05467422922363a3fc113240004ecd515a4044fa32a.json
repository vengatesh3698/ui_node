{"ast":null,"code":"import { _ as _sfc_main } from \"./VaSplit.vue_vue_type_script_lang-2e7f4a1d.mjs\";\nimport { resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, renderSlot, normalizeProps, guardReactiveProps, withModifiers, createVNode } from \"vue\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper-cc2b3d55.mjs\";\nconst VaSplit_vue_vue_type_style_index_0_lang = \"\";\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = {\n  class: \"va-split__dragger\"\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_divider = resolveComponent(\"va-divider\");\n  return openBlock(), createElementBlock(\"section\", {\n    ref: \"splitPanelsContainer\",\n    class: normalizeClass([\"va-split\", _ctx.classComputed]),\n    \"aria-label\": _ctx.tp(_ctx.$props.ariaLabel)\n  }, [createElementVNode(\"div\", {\n    class: \"va-split__panel\",\n    style: normalizeStyle(_ctx.getPanelStyle(\"start\"))\n  }, [renderSlot(_ctx.$slots, \"start\", normalizeProps(guardReactiveProps({\n    containerSize: _ctx.containerSize\n  })))], 4), createElementVNode(\"div\", _hoisted_2, [createElementVNode(\"div\", {\n    class: \"va-split__dragger__overlay\",\n    style: normalizeStyle(_ctx.draggerStyleComputed),\n    onMousedown: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.startDragging && _ctx.startDragging(...args), [\"prevent\"])),\n    onTouchstart: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.startDragging && _ctx.startDragging(...args), [\"prevent\"])),\n    onDblclick: _cache[2] || (_cache[2] = withModifiers((...args) => _ctx.maximizePanel && _ctx.maximizePanel(...args), [\"prevent\"])),\n    onContextmenu: _cache[3] || (_cache[3] = withModifiers(() => {}, [\"prevent\"])),\n    onDragstart: _cache[4] || (_cache[4] = withModifiers(() => {}, [\"prevent\"]))\n  }, [renderSlot(_ctx.$slots, \"grabber\", {}, () => [createVNode(_component_va_divider, {\n    class: \"va-split__dragger__default\",\n    vertical: !_ctx.$props.vertical\n  }, null, 8, [\"vertical\"])])], 36)]), createElementVNode(\"div\", {\n    class: \"va-split__panel\",\n    style: normalizeStyle(_ctx.getPanelStyle(\"end\"))\n  }, [renderSlot(_ctx.$slots, \"end\", normalizeProps(guardReactiveProps({\n    containerSize: _ctx.containerSize\n  })))], 4)], 10, _hoisted_1);\n}\nconst _VaSplit = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { _VaSplit as _ };","map":{"version":3,"names":["resolveComponent","openBlock","createElementBlock","ref","class","normalizeClass","_ctx","classComputed","tp","$props","ariaLabel","createElementVNode","style","normalizeStyle","getPanelStyle","renderSlot","$slots","normalizeProps","guardReactiveProps","containerSize","_hoisted_2","draggerStyleComputed","onMousedown","_cache","withModifiers","args","startDragging","onTouchstart","onDblclick","maximizePanel","onContextmenu","onDragstart","createVNode","_component_va_divider","vertical"],"sources":["../../../../../src/components/va-split/VaSplit.vue"],"sourcesContent":["<template>\n  <section\n    ref=\"splitPanelsContainer\"\n    class=\"va-split\"\n    :class=\"classComputed\"\n    :aria-label=\"tp($props.ariaLabel)\"\n  >\n    <div\n      class=\"va-split__panel\"\n      :style=\"getPanelStyle('start')\"\n    >\n      <slot name=\"start\" v-bind=\"{ containerSize }\" />\n    </div>\n    <div class=\"va-split__dragger\">\n      <div\n        class=\"va-split__dragger__overlay\"\n        :style=\"draggerStyleComputed\"\n        @mousedown.prevent=\"startDragging\"\n        @touchstart.prevent=\"startDragging\"\n        @dblclick.prevent=\"maximizePanel\"\n        @contextmenu.prevent\n        @dragstart.prevent\n      >\n        <slot name=\"grabber\">\n          <va-divider\n            class=\"va-split__dragger__default\"\n            :vertical=\"!$props.vertical\"\n          />\n        </slot>\n      </div>\n    </div>\n    <div\n      class=\"va-split__panel\"\n      :style=\"getPanelStyle('end')\"\n    >\n      <slot name=\"end\" v-bind=\"{ containerSize }\" />\n    </div>\n  </section>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, shallowRef, computed, watch, onMounted } from 'vue'\nimport isString from 'lodash/isString.js'\nimport isNumber from 'lodash/isNumber.js'\nimport clamp from 'lodash/clamp.js'\n\nimport {\n  useBem,\n  useComponentPresetProp,\n  useStateful, useStatefulEmits, useStatefulProps,\n  useResizeObserver,\n  useTranslation,\n} from '../../composables'\nimport { useSplitDragger, useSplitDraggerProps } from './useSplitDragger'\n\nimport { warn } from '../../utils/console'\n\nimport { SplitLimit, SnappingMark } from './types'\n\nimport { VaDivider } from '../va-divider'\n\nexport default defineComponent({\n  name: 'VaSplit',\n\n  components: { VaDivider },\n\n  props: {\n    ...useComponentPresetProp,\n    ...useSplitDraggerProps,\n    ...useStatefulProps,\n    modelValue: {\n      type: Number,\n      default: 50,\n      validator: (v: number) => v <= 100,\n    },\n    maximization: { type: Boolean, default: false },\n    maximizeStart: { type: Boolean, default: false },\n    limits: {\n      type: Array as any as PropType<[SplitLimit, SplitLimit]>,\n      default: () => [0, 0],\n    },\n    snapping: {\n      type: Array as any as PropType<SnappingMark[]>,\n      default: undefined,\n    },\n    snappingRange: { type: [Number, String] as PropType<number | string>, default: 4 },\n\n    ariaLabel: { type: String, default: '$t:splitPanels' },\n  },\n\n  emits: [...useStatefulEmits],\n\n  setup: (props, { emit }) => {\n    const splitPanelsContainer = shallowRef<HTMLElement>()\n\n    const { valueComputed } = useStateful(props, emit)\n\n    const containerSize = ref()\n    const bodyFontSize = ref(16)\n\n    const handleContainerResize = () => {\n      const { width, height } = splitPanelsContainer.value?.getBoundingClientRect() || { width: 0, height: 0 }\n      containerSize.value = props.vertical ? height : width\n      bodyFontSize.value = parseFloat(getComputedStyle(document.documentElement).fontSize)\n    }\n    onMounted(handleContainerResize)\n    useResizeObserver([splitPanelsContainer], handleContainerResize)\n\n    const convertToPercents = (v: string | number, type: 'min' | 'max' | 'snapping') => {\n      let numberValue = ''\n      let measureValue = ''\n\n      if (isNumber(v)) { return v }\n\n      v.split('')\n        .filter((char) => char && char !== ' ')\n        .forEach((char) => {\n          !isNaN(+char) ? numberValue += char : measureValue += char\n        })\n\n      switch (measureValue) {\n        case '%':\n          return +numberValue\n        case 'px':\n          return (+numberValue / containerSize.value) * 100\n        case 'rem':\n          return ((+numberValue * bodyFontSize.value) / containerSize.value) * 100\n        case 'any':\n          return ['min', 'snapping'].includes(type) ? 0 : 100\n        case '':\n          return 100\n        default:\n          warn('Invalid limits measure!')\n          return 0\n      }\n    }\n    const getPanelMinMax = (v: SplitLimit) => {\n      if (v === 'undefined' || !containerSize.value) { return }\n\n      let minPercents = 0\n      let maxPercents = 100\n\n      if (isString(v) || isNumber(v)) { minPercents = convertToPercents(v, 'min') }\n\n      if (Array.isArray(v)) {\n        minPercents = convertToPercents(v[0], 'min')\n        maxPercents = convertToPercents(v[1], 'max')\n      }\n\n      if (minPercents > maxPercents) {\n        warn(`Min panels size can not be larger than max one! Passed limit: ${v}.`)\n        maxPercents = minPercents\n      }\n\n      return { min: minPercents ?? 0, max: maxPercents ?? 100 }\n    }\n\n    const startPanelMinMax = computed(() => getPanelMinMax(props.limits[0]) ?? { min: 0, max: 100 })\n    const endPanelMinMax = computed(() => getPanelMinMax(props.limits[1]) ?? { min: 0, max: 100 })\n\n    const endPanelMinChecked = computed(() => {\n      const passedCheck = !(startPanelMinMax.value.min + endPanelMinMax.value.min > 100)\n      if (!passedCheck) {\n        warn('The sum of different panels min sizes should be lesser or equal to 100% of the container size!')\n      }\n      return !passedCheck ? 100 - startPanelMinMax.value.min : endPanelMinMax.value.min\n    })\n    const panelsMinMax = computed(() => {\n      if (Math.ceil(endPanelMinMax.value.max + startPanelMinMax.value.max) < 100) {\n        warn('The sum of different panels max sizes should be equal to 100% of the container size!')\n      }\n\n      return {\n        start: {\n          min: startPanelMinMax.value.min,\n          max: Math.min(startPanelMinMax.value.max, 100 - endPanelMinChecked.value),\n        },\n        end: {\n          min: endPanelMinChecked.value,\n          max: Math.min(endPanelMinMax.value.max, 100 - startPanelMinMax.value.min),\n        },\n      }\n    })\n\n    const checkSnappingLimitsCondition = (el: number) =>\n      el >= panelsMinMax.value.start.min &&\n      el >= panelsMinMax.value.end.min &&\n      el <= panelsMinMax.value.start.max &&\n      el <= panelsMinMax.value.end.max\n\n    const snappingMarksPosition = computed(() => {\n      if (!Array.isArray(props.snapping) || !containerSize.value) { return }\n\n      let result = props.snapping.map((el) => convertToPercents(el, 'snapping'))\n\n      if (!result.every(checkSnappingLimitsCondition)) {\n        const filteredMarks = result.filter(checkSnappingLimitsCondition)\n        warn(`Some of the snapping marks (${result}) are not in allowed range (${Object.values(panelsMinMax.value.start).join('-')} / ${Object.values(panelsMinMax.value.end).join('-')}) and will be removed (${filteredMarks})!`)\n        result = filteredMarks\n      }\n\n      const checkSnappingRange = () => {\n        return result.every((el, index, array) => {\n          if (!array[index + 1]) { return true }\n          return Math.abs(el - array[index + 1]) > Number(props.snappingRange)\n        })\n      }\n\n      if (!checkSnappingRange()) {\n        warn('Distance between some snapping marks is lesser than snapping range!')\n      }\n\n      return result\n    })\n\n    const snappingRangeParsed = computed(() => convertToPercents(props.snappingRange, 'snapping'))\n\n    const splitterPosition = ref(valueComputed.value)\n    const splitterPositionComputed = computed(() => {\n      if (snappingMarksPosition.value) {\n        const nearestSnappingMark = snappingMarksPosition.value.find((el) => {\n          return splitterPosition.value + snappingRangeParsed.value > el && splitterPosition.value - snappingRangeParsed.value < el\n        })\n        if (nearestSnappingMark) { return nearestSnappingMark }\n      }\n\n      return clamp(\n        splitterPosition.value,\n        Math.max(panelsMinMax.value.start.min, 100 - panelsMinMax.value.end.max),\n        Math.min(panelsMinMax.value.start.max, 100 - panelsMinMax.value.end.min),\n      )\n    })\n\n    const {\n      isDragging,\n      startDragging,\n      currentSplitterPosition,\n    } = useSplitDragger(containerSize, splitterPositionComputed, props)\n\n    const maximizePanel = () => {\n      if (!props.maximization || props.disabled) { return }\n\n      splitterPosition.value = props.maximizeStart ? panelsMinMax.value.start.max : 100 - panelsMinMax.value.end.max\n    }\n\n    watch(valueComputed, (v) => {\n      if (v < panelsMinMax.value.start.min || v > 100 - panelsMinMax.value.end.min) {\n        warn('Incorrect `modelValue`. Check current `limits` prop value.')\n      }\n\n      splitterPosition.value = v\n    }, { immediate: true })\n\n    watch(currentSplitterPosition, (v) => {\n      splitterPosition.value = v\n    })\n\n    watch(isDragging, (v) => {\n      if (!v) { valueComputed.value = splitterPositionComputed.value }\n      document.documentElement.style.cursor = v ? 'var(--va-split-dragging-cursor)' : ''\n    })\n\n    const sizePropertyComputed = computed(() => props.vertical ? 'height' : 'width')\n    const getPanelStyle = (position: 'start' | 'end') => {\n      let sizeValue = position === 'start' ? splitterPositionComputed.value : 100 - splitterPositionComputed.value\n      if (sizeValue < 0) { sizeValue = 0 }\n      if (sizeValue > 100) { sizeValue = 100 }\n\n      return { [sizePropertyComputed.value]: `${sizeValue}%` }\n    }\n\n    const draggerStyleComputed = computed(() => {\n      if (props.disabled) { return {} }\n      if (isDragging.value) { return { cursor: 'var(--va-split-dragging-cursor)' } }\n      return { cursor: props.vertical ? 'var(--va-split-vertical-dragger-cursor)' : 'var(--va-split-horizontal-dragger-cursor)' }\n    })\n\n    const classComputed = useBem('va-split', () => ({\n      horizontal: !props.vertical,\n      vertical: props.vertical,\n      dragging: isDragging.value,\n    }))\n\n    return {\n      ...useTranslation(),\n      splitPanelsContainer,\n      containerSize,\n\n      startDragging,\n      getPanelStyle,\n      maximizePanel,\n\n      classComputed,\n      draggerStyleComputed,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import 'variables';\n@import '../../styles/resources';\n\n.va-split {\n  position: relative;\n  display: flex;\n\n  &__dragger {\n    position: relative;\n\n    &__overlay {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      right: 0;\n      left: 0;\n      display: var(--va-split-dragger-display);\n      z-index: 1;\n    }\n  }\n\n  &__panel {\n    overflow: var(--va-split-panel-overflow);\n\n    @include va-scroll();\n  }\n\n  &--dragging {\n    & .va-split__panel {\n      user-select: none;\n      cursor: var(--va-split-dragging-cursor);\n    }\n  }\n\n  &__dragger__default {\n    opacity: 0.7;\n  }\n\n  &:focus,\n  &:hover {\n    .va-split__dragger__default {\n      opacity: 1;\n    }\n  }\n\n  &--vertical {\n    flex-direction: column;\n\n    & > .va-split__dragger {\n      height: 0;\n\n      .va-split__dragger__overlay {\n        top: calc((var(--va-split-dragger-overlay-size) / -2));\n        height: var(--va-split-dragger-overlay-size);\n        align-items: var(--va-split-dragger-align-items);\n      }\n\n      .va-split__dragger__default {\n        width: 100%;\n      }\n    }\n  }\n\n  &--horizontal {\n    flex-direction: row;\n\n    & > .va-split__dragger {\n      width: 0;\n\n      .va-split__dragger__overlay {\n        left: calc((var(--va-split-dragger-overlay-size) / -2));\n        width: var(--va-split-dragger-overlay-size);\n        justify-content: var(--va-split-dragger-justify-content);\n      }\n\n      .va-split__dragger__default {\n        height: 100%;\n      }\n    }\n  }\n}\n</style>\n"],"mappings":";;;;;;;;;gCACEA,gBAAA,CAoCU;SAlCHC,SAAA,CACG,GAAAC,kBAAA;IACPC,GAAA;IAAAC,KAAA,EAAAC,cAAA,cAAAC,IAAA,CAAAC,aAAA;IAED,cAKMD,IAAA,CAAAE,EAAA,CAAAF,IAAA,CAAAG,MAAA,CAAAC,SAAA;EAAA,IAAAC,kBAAA,CAHE,OAAE;IAAAP,KAAA;IAERQ,KAAA,EAAgDC,cAAA,CAAAP,IAAA,CAAAQ,aAAA;EAAA,IAElDC,UAAA,CAiBMT,IAAA,CAAAU,MAAA,WAAAC,cAAA,CAAAC,kBAAA;IAAAC,aAAA,EAAAb,IAAA,CAAAa;EAAA,KAhBJ,MAAAR,kBAAA,CACQ,OAA4BS,UAAA,GAAAT,kBAAA,CAC5B,OAAE;IACPP,KAAA;IACAQ,KAAA,EAAUC,cAAA,CAAAP,IAAA,CAAAe,oBAAA;IACVC,WAAA,EAAQC,MAAA,QAAAA,MAAA,MAAAC,aAAA,KAAAC,IAAA,KAAUnB,IAAA,CAAaoB,aAAA,IAAApB,IAAA,CAAAoB,aAAA,IAAAD,IAAA;IAC/BE,YAAA,EAAWJ,MAAA,QAAAA,MAAA,MAAAC,aAAA,KAAZC,IAAA,KAAoBnB,IAAA,CAAAoB,aAAA,IAAApB,IAAA,CAAAoB,aAAA,IAAAD,IAAA;IACnBG,UAAA,EAASL,MAAA,QAAAA,MAAA,MAAAC,aAAA,KAAVC,IAAA,KAAkBnB,IAAA,CAAAuB,aAAA,IAAAvB,IAAA,CAAAuB,aAAA,IAAAJ,IAAA;IAAAK,aAAA,EAAAP,MAAA,QAAAA,MAAA,MAAAC,aAAA;IAElBO,WAAA,EAKOR,MAAA,QAAAA,MAAA,MAAAC,aAAA;EAAA,IAAAT,UAAA,CAHGT,IAAA,CAA4BU,MAAA,wBAAAgB,WAAA,CACtBC,qBAAA,EAAe;IAAA7B,KAAA;IAAA8B,QAAA,GAAA5B,IAAA,CAAAG,MAAA,CAAAyB;8BAKnC,SAAAvB,kBAAA,CAEQ,OAAE;IAAAP,KAAA;IAERQ,KAAA,EAA8CC,cAAA,CAAAP,IAAA,CAAAQ,aAAA;EAAA,IAAAC,UAAA,CAAAT,IAAA,CAAAU,MAAA,SAAAC,cAAA,CAAAC,kBAAA;IAAAC,aAAA,EAAAb,IAAA,CAAAa;EAAA,K"},"metadata":{},"sourceType":"module","externalDependencies":[]}