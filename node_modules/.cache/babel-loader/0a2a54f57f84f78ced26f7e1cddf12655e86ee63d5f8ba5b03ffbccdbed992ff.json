{"ast":null,"code":"import { _ as _sfc_main } from \"./VaSkeletonGroup.vue_vue_type_script_lang-a0333737.mjs\";\nimport { resolveComponent, openBlock, createBlock, withCtx, createElementVNode, mergeProps, renderSlot } from \"vue\";\nimport { _ as _export_sfc } from \"../../../../plugin-vue_export-helper-cc2b3d55.mjs\";\nconst VaSkeletonGroup_vue_vue_type_style_index_0_scoped_5fabb1f3_lang = \"\";\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_VaConfig = resolveComponent(\"VaConfig\");\n  return openBlock(), createBlock(_component_VaConfig, {\n    components: {\n      VaSkeleton: _ctx.config\n    }\n  }, {\n    default: withCtx(() => [createElementVNode(\"div\", mergeProps({\n      class: [\"va-skeleton-group\", _ctx.bem]\n    }, _ctx.$attrs), [renderSlot(_ctx.$slots, \"default\", {}, void 0, true)], 16)]),\n    _: 3\n  }, 8, [\"components\"]);\n}\nconst _VaSkeletonGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__scopeId\", \"data-v-5fabb1f3\"]]);\nexport { _VaSkeletonGroup as _ };","map":{"version":3,"names":["resolveComponent","components","VaSkeleton","_ctx","config","default","withCtx","createElementVNode","mergeProps","class","bem","$attrs","renderSlot","$slots"],"sources":["../../../../../../src/components/va-skeleton/components/VaSkeletonGroup.vue"],"sourcesContent":["<template>\n  <VaConfig :components=\"{ VaSkeleton: config }\">\n    <div class=\"va-skeleton-group\" :class=\"bem\" v-bind=\"$attrs\">\n      <slot />\n    </div>\n  </VaConfig>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed, ref, onMounted, onBeforeMount } from 'vue'\nimport { useBem } from '../../../composables'\nimport { VaConfig } from '../../va-config'\n\nexport default defineComponent({\n  name: 'VaSkeletonGroup',\n\n  components: {\n    VaConfig,\n  },\n\n  props: {\n    color: { type: String, default: 'backgroundElement' },\n    delay: { type: Number, default: 100 },\n\n    animation: { type: String as PropType<'pulse' | 'wave' | 'none'>, default: 'pulse' },\n\n    lines: { type: Number, default: 1 },\n    lineGap: { type: String, default: '8px' },\n    lastLineWidth: { type: [String], default: '75%' },\n  },\n\n  setup (props) {\n    const doShow = ref(false)\n\n    let timeoutId: ReturnType<typeof setTimeout>\n\n    onMounted(() => {\n      // We can sync this way animations, wait until all blocks are rendered\n      // This can be done with provide/inject to sync all animations, but for now we don't need it\n      timeoutId = setTimeout(() => {\n        doShow.value = true\n      }, props.delay)\n    })\n\n    onBeforeMount(() => {\n      clearTimeout(timeoutId)\n    })\n\n    const bem = useBem('va-skeleton-group', () => ({\n      hidden: doShow.value === false,\n    }))\n\n    return {\n      doShow,\n      bem,\n      config: computed(() => ({ ...props, delay: 0 })),\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.va-skeleton-group {\n  position: relative;\n  cursor: progress;\n\n  &--hidden {\n    display: none;\n  }\n}\n</style>\n"],"mappings":";;;;;8BACEA,gBAAA,CAIW;;IADHC,UAAA;MAAAC,UAAA,EAAAC,IAAA,CAAAC;IAAA;EAAA;IAAAC,OAAA,EAFIC,OAAA,CAAC,OAA+CC,kBAAA,QAAAC,UAAA;MACxDC,KAAA,EAAQ,sBAAAN,IAAA,CAAAO,GAAA;IAAA,GAAAP,IAAA,CAAAQ,MAAA,IAAAC,UAAA,CAAAT,IAAA,CAAAU,MAAA,+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}