{"ast":null,"code":"import { getCurrentInstance, computed } from \"vue\";\nimport { i as isServer } from \"../../../utils/ssr-fd33979c.mjs\";\nimport { u as useColors } from \"../../../composables/useColors-f23d24ff.mjs\";\nconst getOpacity = opacity => {\n  var _a, _b, _c;\n  if (isServer()) {\n    return opacity;\n  }\n  if (opacity > 0) {\n    const userAgent = (_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent;\n    const isSafari = userAgent && /^((?!chrome|android).)*safari/i.test((_b = window == null ? void 0 : window.navigator) == null ? void 0 : _b.userAgent);\n    const isLatestSafari = userAgent && /(version.)15|16/i.test((_c = window == null ? void 0 : window.navigator) == null ? void 0 : _c.userAgent);\n    if (isSafari && !isLatestSafari) {\n      return opacity < 1 ? 1 - opacity : opacity;\n    }\n  }\n  return opacity;\n};\nconst useButtonTextColor = (textColorComputed, colorComputed, isPressed, isHovered) => {\n  const instance = getCurrentInstance();\n  if (!instance) {\n    throw new Error(\"`useButtonTextColor` hook must be used only inside of setup function!\");\n  }\n  const props = instance.props;\n  const {\n    getColor,\n    colorToRgba,\n    getStateMaskGradientBackground\n  } = useColors();\n  const plainColorStyles = computed(() => ({\n    background: \"transparent\",\n    color: textColorComputed.value,\n    \"-webkit-background-clip\": \"text\",\n    \"background-clip\": \"text\",\n    opacity: getPlainTextOpacity.value\n  }));\n  const getStateColor = (maskColor, stateOpacity, stateBehavior) => {\n    const maskStateColor = getColor(maskColor);\n    let stateStyles;\n    if (stateBehavior === \"opacity\") {\n      stateStyles = {\n        color: colorToRgba(textColorComputed.value, stateOpacity)\n      };\n    } else {\n      stateStyles = {\n        background: getStateMaskGradientBackground(colorComputed.value, maskStateColor, stateOpacity),\n        color: stateOpacity < 1 ? colorToRgba(textColorComputed.value, getOpacity(stateOpacity)) : maskStateColor\n      };\n    }\n    return {\n      ...plainColorStyles.value,\n      ...stateStyles\n    };\n  };\n  const hoverTextColorComputed = computed(() => {\n    return getStateColor(props.hoverMaskColor, props.hoverOpacity, props.hoverBehavior);\n  });\n  const pressedTextColorComputed = computed(() => {\n    return getStateColor(props.pressedMaskColor, props.pressedOpacity, props.pressedBehavior);\n  });\n  const getPlainTextOpacity = computed(() => {\n    if (props.disabled) {\n      return void 0;\n    }\n    if (props.textOpacity === 1 || isHovered.value && !isPressed.value) {\n      return 1;\n    }\n    return isPressed.value ? 0.9 : props.textOpacity;\n  });\n  return computed(() => {\n    const defaultColorStyles = {\n      color: textColorComputed.value,\n      background: \"transparent\"\n    };\n    props.plain && Object.assign(defaultColorStyles, plainColorStyles.value, {\n      background: textColorComputed.value\n    });\n    if (!props.plain) {\n      return defaultColorStyles;\n    }\n    if (isPressed.value) {\n      return pressedTextColorComputed.value;\n    }\n    if (isHovered.value) {\n      return hoverTextColorComputed.value;\n    }\n    return defaultColorStyles;\n  });\n};\nexport { useButtonTextColor as u };","map":{"version":3,"names":["getOpacity","opacity","isServer","userAgent","_a","window","navigator","isSafari","test","_b","isLatestSafari","_c","useButtonTextColor","textColorComputed","colorComputed","isPressed","isHovered","instance","getCurrentInstance","Error","props","getColor","colorToRgba","getStateMaskGradientBackground","useColors","plainColorStyles","computed","background","color","value","getPlainTextOpacity","getStateColor","maskColor","stateOpacity","stateBehavior","maskStateColor","stateStyles","hoverTextColorComputed","hoverMaskColor","hoverOpacity","hoverBehavior","pressedTextColorComputed","pressedMaskColor","pressedOpacity","pressedBehavior","disabled","textOpacity","defaultColorStyles","plain","Object","assign"],"sources":["../../../../../../src/components/va-button/hooks/useButtonTextColor.ts"],"sourcesContent":["import { computed, Ref, ComputedRef, getCurrentInstance } from 'vue'\n\nimport { useColors } from '../../../composables'\nimport { isServer } from '../../../utils/ssr'\n\nimport { ButtonPropsTypes } from '../types'\n\ntype ButtonTextColorStyles = {\n  color: string\n  background?: string\n  opacity?: number\n  'background-clip'?: 'text',\n  '-webkit-background-clip'?: 'text',\n}\n\ntype UseButtonTextColor = (\n  textColorComputed: Ref<string>,\n  colorComputed: Ref<string>,\n  isPressed: Ref<boolean>,\n  isHovered: Ref<boolean>,\n) => ComputedRef<ButtonTextColorStyles>\n\n/*\n* Inverts opacity depending on browser (webkit/chromium)\n* TODO: Check if Safari <16 version will be less then 1% and remove function\n*\n* @param {number} opacity - Opacity value\n* @returns {number} Inverted opacity value\n* */\nconst getOpacity = (opacity: number): number => {\n  if (isServer()) { return opacity }\n\n  if (opacity > 0) {\n    const userAgent = window?.navigator?.userAgent\n    const isSafari = userAgent && /^((?!chrome|android).)*safari/i.test(window?.navigator?.userAgent)\n    const isLatestSafari = userAgent && /(version.)15|16/i.test(window?.navigator?.userAgent)\n\n    if (isSafari && !isLatestSafari) {\n      return opacity < 1 ? 1 - opacity : opacity\n    }\n  }\n\n  return opacity\n}\n\nexport const useButtonTextColor: UseButtonTextColor = (\n  textColorComputed,\n  colorComputed,\n  isPressed,\n  isHovered,\n) => {\n  const instance = getCurrentInstance()\n  if (!instance) { throw new Error('`useButtonTextColor` hook must be used only inside of setup function!') }\n\n  const props = instance.props as Required<ButtonPropsTypes>\n\n  const { getColor, colorToRgba, getStateMaskGradientBackground } = useColors()\n\n  const plainColorStyles = computed(() => ({\n    background: 'transparent',\n    color: textColorComputed.value,\n    '-webkit-background-clip': 'text',\n    'background-clip': 'text',\n    opacity: getPlainTextOpacity.value,\n  }))\n\n  const getStateColor = (maskColor: string, stateOpacity: number, stateBehavior: string) => {\n    const maskStateColor = getColor(maskColor)\n    let stateStyles: Partial<ButtonTextColorStyles>\n\n    if (stateBehavior === 'opacity') {\n      stateStyles = { color: colorToRgba(textColorComputed.value, stateOpacity) }\n    } else {\n      stateStyles = {\n        background: getStateMaskGradientBackground(colorComputed.value, maskStateColor, stateOpacity),\n        color: stateOpacity < 1 ? colorToRgba(textColorComputed.value, getOpacity(stateOpacity)) : maskStateColor,\n      }\n    }\n\n    return { ...plainColorStyles.value, ...stateStyles }\n  }\n\n  const hoverTextColorComputed = computed(() => {\n    return getStateColor(props.hoverMaskColor, props.hoverOpacity, props.hoverBehavior)\n  })\n\n  const pressedTextColorComputed = computed(() => {\n    return getStateColor(props.pressedMaskColor, props.pressedOpacity, props.pressedBehavior)\n  })\n\n  const getPlainTextOpacity = computed(() => {\n    if (props.disabled) { return undefined }\n    if (props.textOpacity === 1 || (isHovered.value && !isPressed.value)) { return 1 }\n    return isPressed.value ? 0.9 : props.textOpacity\n  })\n\n  return computed(() => {\n    const defaultColorStyles = {\n      color: textColorComputed.value,\n      background: 'transparent',\n    }\n\n    props.plain && Object.assign(defaultColorStyles, plainColorStyles.value, { background: textColorComputed.value })\n\n    if (!props.plain) { return defaultColorStyles }\n    if (isPressed.value) { return pressedTextColorComputed.value }\n    if (isHovered.value) { return hoverTextColorComputed.value }\n    return defaultColorStyles\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}