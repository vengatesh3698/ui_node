{"ast":null,"code":"const getEvent = event => typeof event === \"object\" ? event.listen : event;\nconst getEmit = event => typeof event === \"object\" ? event.emit : event;\nconst useEmitProxy = events => {\n  const createEmits = () => events.map(getEmit);\n  const eventToListenerName = event => {\n    const eventName = event.charAt(0).toUpperCase() + event.slice(1);\n    return `on${eventName}`;\n  };\n  const createListeners = emit => {\n    return events.reduce((acc, key) => ({\n      ...acc,\n      [eventToListenerName(getEvent(key))]: (...args) => emit(getEmit(key), ...args)\n    }), {});\n  };\n  const createVOnListeners = emit => {\n    return events.reduce((acc, key) => ({\n      ...acc,\n      [getEvent(key)]: (...args) => emit(getEmit(key), ...args)\n    }), {});\n  };\n  return {\n    createListeners,\n    createVOnListeners,\n    createEmits\n  };\n};\nexport { useEmitProxy as u };","map":{"version":3,"names":["getEvent","event","listen","getEmit","emit","useEmitProxy","events","createEmits","map","eventToListenerName","eventName","charAt","toUpperCase","slice","createListeners","reduce","acc","key","args","createVOnListeners"],"sources":["../../../../src/composables/useEmitProxy.ts"],"sourcesContent":["type Events = string | { listen: string, emit: string }\n\nconst getEvent = (event: Events) => typeof event === 'object' ? event.listen : event\nconst getEmit = (event: Events) => typeof event === 'object' ? event.emit : event\n\nexport const useEmitProxy = (events: Events[]) => {\n  const createEmits = () => events.map(getEmit)\n\n  const eventToListenerName = (event: string) => {\n    const eventName = event.charAt(0).toUpperCase() + event.slice(1)\n    return `on${eventName}`\n  }\n\n  const createListeners = (emit: (event: string, ...args: any[]) => void) => {\n    return events.reduce((acc, key) => ({\n      ...acc,\n      [eventToListenerName(getEvent(key))]: (...args: any[]) => emit(getEmit(key), ...args),\n    }), {} as Record<string, any>)\n  }\n\n  const createVOnListeners = (emit: (event: string, ...args: any[]) => void) => {\n    return events.reduce((acc, key) => ({\n      ...acc,\n      [getEvent(key)]: (...args: any[]) => emit(getEmit(key), ...args),\n    }), {} as Record<string, any>)\n  }\n\n  return {\n    createListeners,\n    createVOnListeners,\n    createEmits,\n  }\n}\n"],"mappings":"AAEA,MAAMA,QAAA,GAAYC,KAAA,IAAkB,OAAOA,KAAA,KAAU,WAAWA,KAAA,CAAMC,MAAA,GAASD,KAAA;AAC/E,MAAME,OAAA,GAAWF,KAAA,IAAkB,OAAOA,KAAA,KAAU,WAAWA,KAAA,CAAMG,IAAA,GAAOH,KAAA;AAE/D,MAAAI,YAAA,GAAgBC,MAAA,IAAqB;EAChD,MAAMC,WAAA,GAAcA,CAAA,KAAMD,MAAA,CAAOE,GAAA,CAAIL,OAAO;EAEtC,MAAAM,mBAAA,GAAuBR,KAAA,IAAkB;IACvC,MAAAS,SAAA,GAAYT,KAAA,CAAMU,MAAA,CAAO,CAAC,EAAEC,WAAA,CAAY,IAAIX,KAAA,CAAMY,KAAA,CAAM,CAAC;IAC/D,OAAO,KAAKH,SAAA;EAAA;EAGR,MAAAI,eAAA,GAAmBV,IAAA,IAAkD;IACzE,OAAOE,MAAA,CAAOS,MAAA,CAAO,CAACC,GAAA,EAAKC,GAAA,MAAS;MAClC,GAAGD,GAAA;MACH,CAACP,mBAAA,CAAoBT,QAAA,CAASiB,GAAG,CAAC,CAAC,GAAG,IAAIC,IAAA,KAAgBd,IAAA,CAAKD,OAAA,CAAQc,GAAG,GAAG,GAAGC,IAAI;IAAA,IAClF,CAAyB;EAAA;EAGzB,MAAAC,kBAAA,GAAsBf,IAAA,IAAkD;IAC5E,OAAOE,MAAA,CAAOS,MAAA,CAAO,CAACC,GAAA,EAAKC,GAAA,MAAS;MAClC,GAAGD,GAAA;MACH,CAAChB,QAAA,CAASiB,GAAG,CAAC,GAAG,IAAIC,IAAA,KAAgBd,IAAA,CAAKD,OAAA,CAAQc,GAAG,GAAG,GAAGC,IAAI;IAAA,IAC7D,CAAyB;EAAA;EAGxB;IACLJ,eAAA;IACAK,kBAAA;IACAZ;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}