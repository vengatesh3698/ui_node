{"ast":null,"code":"import { shallowRef, ref, onMounted, onBeforeUnmount } from \"vue\";\nfunction getTargetElement(target) {\n  if (!target) {\n    throw new Error(\"No target was provided for `useScroll` hook!\");\n  }\n  return typeof target === \"string\" ? document.querySelector(target) : target;\n}\nfunction setupScroll(fixed, target) {\n  const scrollRoot = shallowRef();\n  let targetElement;\n  const isScrolledDown = ref(false);\n  const prevScrollPosition = ref(0);\n  const onScroll = e => {\n    const target2 = e.target;\n    const scrollValue = e.target instanceof Window ? target2.scrollY : target2.scrollTop;\n    isScrolledDown.value = prevScrollPosition.value < scrollValue;\n    prevScrollPosition.value = scrollValue;\n  };\n  onMounted(() => {\n    targetElement = fixed ? window : getTargetElement(target || scrollRoot.value);\n    targetElement == null ? void 0 : targetElement.addEventListener(\"scroll\", onScroll, fixed);\n  });\n  onBeforeUnmount(() => {\n    targetElement == null ? void 0 : targetElement.removeEventListener(\"scroll\", onScroll);\n  });\n  return {\n    scrollRoot,\n    isScrolledDown\n  };\n}\nexport { setupScroll as s };","map":{"version":3,"names":["getTargetElement","target","Error","document","querySelector","setupScroll","fixed","scrollRoot","shallowRef","targetElement","isScrolledDown","ref","prevScrollPosition","onScroll","e","target2","scrollValue","Window","scrollY","scrollTop","value","onMounted","window","addEventListener","onBeforeUnmount","removeEventListener"],"sources":["../../../../src/composables/useScroll.ts"],"sourcesContent":["import { onMounted, onBeforeUnmount, ref, shallowRef } from 'vue'\n\nfunction getTargetElement (target: HTMLElement | string | undefined) {\n  if (!target) { throw new Error('No target was provided for `useScroll` hook!') }\n  return typeof target === 'string' ? document.querySelector(target) as HTMLElement : target\n}\n\nexport function setupScroll (fixed?: boolean, target?: HTMLElement | string) {\n  const scrollRoot = shallowRef<HTMLElement>()\n  let targetElement: HTMLElement | Window | undefined\n\n  const isScrolledDown = ref(false)\n  const prevScrollPosition = ref(0)\n\n  const onScroll = (e: Event) => {\n    const target = e.target as HTMLElement | Window\n    // @ts-ignore\n    const scrollValue = e.target instanceof Window ? target.scrollY : target.scrollTop\n\n    isScrolledDown.value = prevScrollPosition.value < scrollValue\n    prevScrollPosition.value = scrollValue\n  }\n\n  onMounted(() => {\n    targetElement = fixed ? window : getTargetElement(target || scrollRoot.value)\n    targetElement?.addEventListener('scroll', onScroll, fixed)\n  })\n\n  onBeforeUnmount(() => {\n    targetElement?.removeEventListener('scroll', onScroll)\n  })\n\n  return { scrollRoot, isScrolledDown }\n}\n"],"mappings":";AAEA,SAASA,iBAAkBC,MAAA,EAA0C;EACnE,IAAI,CAACA,MAAA,EAAQ;IAAQ,UAAIC,KAAA,CAAM,8CAA8C;EAAE;EAC/E,OAAO,OAAOD,MAAA,KAAW,WAAWE,QAAA,CAASC,aAAA,CAAcH,MAAM,IAAmBA,MAAA;AACtF;AAEgB,SAAAI,YAAaC,KAAA,EAAiBL,MAAA,EAA+B;EAC3E,MAAMM,UAAA,GAAaC,UAAA;EACf,IAAAC,aAAA;EAEE,MAAAC,cAAA,GAAiBC,GAAA,CAAI,KAAK;EAC1B,MAAAC,kBAAA,GAAqBD,GAAA,CAAI,CAAC;EAE1B,MAAAE,QAAA,GAAYC,CAAA,IAAa;IAC7B,MAAMC,OAAA,GAASD,CAAA,CAAEb,MAAA;IAEjB,MAAMe,WAAA,GAAcF,CAAA,CAAEb,MAAA,YAAkBgB,MAAA,GAASF,OAAA,CAAOG,OAAA,GAAUH,OAAA,CAAOI,SAAA;IAE1DT,cAAA,CAAAU,KAAA,GAAQR,kBAAA,CAAmBQ,KAAA,GAAQJ,WAAA;IAClDJ,kBAAA,CAAmBQ,KAAA,GAAQJ,WAAA;EAAA;EAG7BK,SAAA,CAAU,MAAM;IACdZ,aAAA,GAAgBH,KAAA,GAAQgB,MAAA,GAAStB,gBAAA,CAAiBC,MAAA,IAAUM,UAAA,CAAWa,KAAK;IAC7DX,aAAA,oBAAAA,aAAA,CAAAc,gBAAA,CAAiB,UAAUV,QAAA,EAAUP,KAAA;EAAK,CAC1D;EAEDkB,eAAA,CAAgB,MAAM;IACLf,aAAA,oBAAAA,aAAA,CAAAgB,mBAAA,CAAoB,UAAUZ,QAAA;EAAQ,CACtD;EAEM;IAAEN,UAAA;IAAYG;EAAA;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}