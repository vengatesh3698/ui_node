{"ast":null,"code":"const HIDDEN_TEXTAREA_STYLE = `\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important';\n`;\nconst SIZING_STYLE = [\"letter-spacing\", \"line-height\", \"padding-top\", \"padding-bottom\", \"font-family\", \"font-weight\", \"font-size\", \"text-rendering\", \"text-transform\", \"width\", \"text-indent\", \"padding-left\", \"padding-right\", \"border-width\", \"box-sizing\"];\nconst getNodeHeightStyles = node => {\n  const style = window.getComputedStyle(node);\n  return {\n    boxSizing: style.getPropertyValue(\"box-sizing\") || style.getPropertyValue(\"-moz-box-sizing\") || style.getPropertyValue(\"-webkit-box-sizing\"),\n    padding: parseFloat(style.getPropertyValue(\"padding-bottom\")) + parseFloat(style.getPropertyValue(\"padding-top\")),\n    border: parseFloat(style.getPropertyValue(\"border-bottom-width\")) + parseFloat(style.getPropertyValue(\"border-top-width\")),\n    styles: SIZING_STYLE.map(name => `${name}:${style.getPropertyValue(name)}`).join(\";\") + \";\",\n    lineHeight: parseInt(style.getPropertyValue(\"line-height\"))\n  };\n};\nlet textarea = null;\nconst createHiddenTextarea = (original, styles) => {\n  if (!textarea) {\n    textarea = document.createElement(\"textarea\");\n  }\n  textarea.setAttribute(\"style\", styles + HIDDEN_TEXTAREA_STYLE);\n  textarea.value = original.value || original.placeholder || \"\";\n  const wrap = original.getAttribute(\"wrap\");\n  if (wrap !== null) {\n    textarea.setAttribute(\"wrap\", wrap);\n  } else {\n    textarea.removeAttribute(\"wrap\");\n  }\n  return textarea;\n};\nconst useTextareaRowHeight = textarea2 => {\n  const calculateRowHeight = () => {\n    if (!textarea2.value) {\n      return 0;\n    }\n    return getNodeHeightStyles(textarea2.value).lineHeight;\n  };\n  const calculateHeight = () => {\n    if (!textarea2.value) {\n      return 0;\n    }\n    const {\n      boxSizing,\n      padding,\n      border,\n      styles\n    } = getNodeHeightStyles(textarea2.value);\n    const hiddenTextarea = createHiddenTextarea(textarea2.value, styles);\n    document.body.appendChild(hiddenTextarea);\n    let height = hiddenTextarea.scrollHeight;\n    if (boxSizing === \"border-box\") {\n      height += border;\n    } else if (boxSizing === \"content-box\") {\n      height -= padding;\n    }\n    document.body.removeChild(hiddenTextarea);\n    return height;\n  };\n  return {\n    calculateRowHeight,\n    calculateHeight\n  };\n};\nexport { useTextareaRowHeight as u };","map":{"version":3,"names":["HIDDEN_TEXTAREA_STYLE","SIZING_STYLE","getNodeHeightStyles","node","style","window","getComputedStyle","boxSizing","getPropertyValue","padding","parseFloat","border","styles","map","name","join","lineHeight","parseInt","textarea","createHiddenTextarea","original","document","createElement","setAttribute","value","placeholder","wrap","getAttribute","removeAttribute","useTextareaRowHeight","textarea2","calculateRowHeight","calculateHeight","hiddenTextarea","body","appendChild","height","scrollHeight","removeChild"],"sources":["../../../../../../../src/components/va-input/components/VaTextarea/useTextareaRowHeight.ts"],"sourcesContent":["import { Ref } from 'vue'\n\nconst HIDDEN_TEXTAREA_STYLE = `\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important';\n`\n\nconst SIZING_STYLE = [\n  'letter-spacing',\n  'line-height',\n  'padding-top',\n  'padding-bottom',\n  'font-family',\n  'font-weight',\n  'font-size',\n  'text-rendering',\n  'text-transform',\n  'width',\n  'text-indent',\n  'padding-left',\n  'padding-right',\n  'border-width',\n  'box-sizing',\n]\n\nconst getNodeHeightStyles = (node: HTMLElement) => {\n  const style = window.getComputedStyle(node)\n\n  return {\n    boxSizing:\n      style.getPropertyValue('box-sizing') ||\n      style.getPropertyValue('-moz-box-sizing') ||\n      style.getPropertyValue('-webkit-box-sizing'),\n    padding:\n      parseFloat(style.getPropertyValue('padding-bottom')) +\n      parseFloat(style.getPropertyValue('padding-top')),\n    border:\n      parseFloat(style.getPropertyValue('border-bottom-width')) +\n      parseFloat(style.getPropertyValue('border-top-width')),\n    styles:\n      SIZING_STYLE.map(name => `${name}:${style.getPropertyValue(name)}`).join(';') + ';',\n    lineHeight:\n      parseInt(style.getPropertyValue('line-height')),\n  }\n}\n\nlet textarea: null | HTMLTextAreaElement = null\n\nconst createHiddenTextarea = (original: HTMLTextAreaElement, styles: string) => {\n  if (!textarea) {\n    textarea = document.createElement('textarea')\n  }\n\n  textarea.setAttribute('style', styles + HIDDEN_TEXTAREA_STYLE)\n  textarea.value = original.value || original.placeholder || ''\n  const wrap = original.getAttribute('wrap')\n\n  if (wrap !== null) {\n    textarea.setAttribute('wrap', wrap)\n  } else {\n    textarea.removeAttribute('wrap')\n  }\n\n  return textarea\n}\n\nexport const useTextareaRowHeight = (textarea: Ref<HTMLTextAreaElement | undefined>) => {\n  const calculateRowHeight = () => {\n    if (!textarea.value) { return 0 }\n\n    return getNodeHeightStyles(textarea.value).lineHeight\n  }\n\n  const calculateHeight = () => {\n    if (!textarea.value) { return 0 }\n\n    const { boxSizing, padding, border, styles } = getNodeHeightStyles(textarea.value)\n    const hiddenTextarea = createHiddenTextarea(textarea.value, styles)\n    document.body.appendChild(hiddenTextarea)\n    let height = hiddenTextarea.scrollHeight\n\n    if (boxSizing === 'border-box') {\n      height += border\n    } else if (boxSizing === 'content-box') {\n      height -= padding\n    }\n\n    document.body.removeChild(hiddenTextarea)\n\n    return height\n  }\n\n  return {\n    calculateRowHeight,\n    calculateHeight,\n  }\n}\n"],"mappings":"AAEA,MAAMA,qBAAA,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAY9B,MAAMC,YAAA,GAAe,CACnB,kBACA,eACA,eACA,kBACA,eACA,eACA,aACA,kBACA,kBACA,SACA,eACA,gBACA,iBACA,gBACA,aACF;AAEA,MAAMC,mBAAA,GAAuBC,IAAA,IAAsB;EAC3C,MAAAC,KAAA,GAAQC,MAAA,CAAOC,gBAAA,CAAiBH,IAAI;EAEnC;IACLI,SAAA,EACEH,KAAA,CAAMI,gBAAA,CAAiB,YAAY,KACnCJ,KAAA,CAAMI,gBAAA,CAAiB,iBAAiB,KACxCJ,KAAA,CAAMI,gBAAA,CAAiB,oBAAoB;IAC7CC,OAAA,EACEC,UAAA,CAAWN,KAAA,CAAMI,gBAAA,CAAiB,gBAAgB,CAAC,IACnDE,UAAA,CAAWN,KAAA,CAAMI,gBAAA,CAAiB,aAAa,CAAC;IAClDG,MAAA,EACED,UAAA,CAAWN,KAAA,CAAMI,gBAAA,CAAiB,qBAAqB,CAAC,IACxDE,UAAA,CAAWN,KAAA,CAAMI,gBAAA,CAAiB,kBAAkB,CAAC;IACvDI,MAAA,EACEX,YAAA,CAAaY,GAAA,CAAIC,IAAA,IAAQ,GAAGA,IAAA,IAAQV,KAAA,CAAMI,gBAAA,CAAiBM,IAAI,GAAG,EAAEC,IAAA,CAAK,GAAG,IAAI;IAClFC,UAAA,EACEC,QAAA,CAASb,KAAA,CAAMI,gBAAA,CAAiB,aAAa,CAAC;EAAA;AAEpD;AAEA,IAAIU,QAAA,GAAuC;AAE3C,MAAMC,oBAAA,GAAuBA,CAACC,QAAA,EAA+BR,MAAA,KAAmB;EAC9E,IAAI,CAACM,QAAA,EAAU;IACFA,QAAA,GAAAG,QAAA,CAASC,aAAA,CAAc,UAAU;EAC9C;EAESJ,QAAA,CAAAK,YAAA,CAAa,SAASX,MAAA,GAASZ,qBAAqB;EAC7DkB,QAAA,CAASM,KAAA,GAAQJ,QAAA,CAASI,KAAA,IAASJ,QAAA,CAASK,WAAA,IAAe;EACrD,MAAAC,IAAA,GAAON,QAAA,CAASO,YAAA,CAAa,MAAM;EAEzC,IAAID,IAAA,KAAS,MAAM;IACRR,QAAA,CAAAK,YAAA,CAAa,QAAQG,IAAI;EAAA,OAC7B;IACLR,QAAA,CAASU,eAAA,CAAgB,MAAM;EACjC;EAEO,OAAAV,QAAA;AACT;AAEa,MAAAW,oBAAA,GAAwBC,SAAA,IAAmD;EACtF,MAAMC,kBAAA,GAAqBA,CAAA,KAAM;IAC3B,KAACD,SAAA,CAASN,KAAA,EAAO;MAAS;IAAE;IAEzB,OAAAtB,mBAAA,CAAoB4B,SAAA,CAASN,KAAK,EAAER,UAAA;EAAA;EAG7C,MAAMgB,eAAA,GAAkBA,CAAA,KAAM;IACxB,KAACF,SAAA,CAASN,KAAA,EAAO;MAAS;IAAE;IAE1B;MAAEjB,SAAA;MAAWE,OAAA;MAASE,MAAA;MAAQC;IAAA,IAAWV,mBAAA,CAAoB4B,SAAA,CAASN,KAAK;IACjF,MAAMS,cAAA,GAAiBd,oBAAA,CAAqBW,SAAA,CAASN,KAAA,EAAOZ,MAAM;IACzDS,QAAA,CAAAa,IAAA,CAAKC,WAAA,CAAYF,cAAc;IACxC,IAAIG,MAAA,GAASH,cAAA,CAAeI,YAAA;IAE5B,IAAI9B,SAAA,KAAc,cAAc;MACpB6B,MAAA,IAAAzB,MAAA;IAAA,WACDJ,SAAA,KAAc,eAAe;MAC5B6B,MAAA,IAAA3B,OAAA;IACZ;IAESY,QAAA,CAAAa,IAAA,CAAKI,WAAA,CAAYL,cAAc;IAEjC,OAAAG,MAAA;EAAA;EAGF;IACLL,kBAAA;IACAC;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}