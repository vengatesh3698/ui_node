{"ast":null,"code":"import { computed } from \"vue\";\nconst useStringValueProps = {\n  separator: {\n    type: String,\n    default: \", \"\n  }\n};\nconst useStringValue = (props, visibleSelectedOptions, getText) => {\n  return computed(() => {\n    var _a;\n    if (!((_a = visibleSelectedOptions.value) == null ? void 0 : _a.length)) {\n      return props.clearValue;\n    }\n    return visibleSelectedOptions.value.map(getText).join(props.separator) || props.clearValue;\n  });\n};\nexport { useStringValue as a, useStringValueProps as u };","map":{"version":3,"names":["useStringValueProps","separator","type","String","default","useStringValue","props","visibleSelectedOptions","getText","computed","_a","value","length","clearValue","map","join"],"sources":["../../../../../../src/components/va-select/hooks/useStringValue.ts"],"sourcesContent":["import { computed, type Ref, type ExtractPropTypes } from 'vue'\n\nimport type { SelectOption } from '../types'\n\nexport const useStringValueProps = {\n  separator: { type: String, default: ', ' },\n}\n\ntype UseStringValueProps = ExtractPropTypes<typeof useStringValueProps> & { clearValue: string }\n\nexport const useStringValue = (\n  props: UseStringValueProps,\n  visibleSelectedOptions: Ref<SelectOption[]>,\n  getText: (option: SelectOption) => string,\n) => {\n  return computed<string>(() => {\n    if (!visibleSelectedOptions.value?.length) {\n      return props.clearValue\n    }\n\n    return visibleSelectedOptions.value.map(getText).join(props.separator) || props.clearValue\n  })\n}\n"],"mappings":";AAIO,MAAMA,mBAAA,GAAsB;EACjCC,SAAA,EAAW;IAAEC,IAAA,EAAMC,MAAA;IAAQC,OAAA,EAAS;EAAK;AAC3C;AAIO,MAAMC,cAAA,GAAiBA,CAC5BC,KAAA,EACAC,sBAAA,EACAC,OAAA,KACG;EACH,OAAOC,QAAA,CAAiB,MAAM;;IACxB,OAACC,EAAA,GAAAH,sBAAA,CAAuBI,KAAA,KAAvB,gBAAAD,EAAA,CAA8BE,MAAA,GAAQ;MACzC,OAAON,KAAA,CAAMO,UAAA;IACf;IAEO,OAAAN,sBAAA,CAAuBI,KAAA,CAAMG,GAAA,CAAIN,OAAO,EAAEO,IAAA,CAAKT,KAAA,CAAML,SAAS,KAAKK,KAAA,CAAMO,UAAA;EAAA,CACjF;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}