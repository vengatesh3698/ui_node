{"ast":null,"code":"import { _ as _sfc_main } from \"./VaTextarea.vue_vue_type_script_lang-49544991.mjs\";\nimport { openBlock, createElementBlock, mergeProps } from \"vue\";\nimport { _ as _export_sfc } from \"../../../../../plugin-vue_export-helper-cc2b3d55.mjs\";\nconst VaTextarea_vue_vue_type_style_index_0_lang = \"\";\nconst _hoisted_1 = [\"value\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"textarea\", mergeProps({\n    ref: \"textarea\",\n    class: \"textarea\",\n    style: _ctx.computedStyle\n  }, {\n    ..._ctx.computedProps,\n    ..._ctx.listeners\n  }, {\n    value: _ctx.modelValue\n  }), null, 16, _hoisted_1);\n}\nconst VaTextarea = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { VaTextarea as V };","map":{"version":3,"names":["_sfc_render","_ctx","_cache","$props","$setup","$data","$options","openBlock","createElementBlock","mergeProps","ref","class","style","computedStyle","computedProps","listeners","value","modelValue","_hoisted_1"],"sources":["../../../../../../../src/components/va-input/components/VaTextarea/VaTextarea.vue"],"sourcesContent":["<template>\n  <textarea\n    ref=\"textarea\"\n    class=\"textarea\"\n    :style=\"computedStyle\"\n    v-bind=\"{ ...computedProps, ...listeners }\"\n    :value=\"modelValue\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, onMounted, ref, watch, nextTick, CSSProperties, shallowRef } from 'vue'\nimport pick from 'lodash/pick.js'\n\nimport { useFormFieldProps, useEmitProxy } from '../../../../composables'\nimport { useTextareaRowHeight } from './useTextareaRowHeight'\n\nconst positiveNumberValidator = (val: number) => {\n  if (val > 0 && (val | 0) === val) {\n    return true\n  }\n  throw new Error(`\\`minRows|maxRows\\` must be a positive integer greater than 0, but ${val} is provided`)\n}\n\nconst { createEmits, createListeners } = useEmitProxy([\n  'input', 'change', 'click', 'update:modelValue',\n])\n\nexport default defineComponent({\n  name: 'VaTextarea',\n\n  props: {\n    ...useFormFieldProps,\n    modelValue: { type: [String, Number], default: '' },\n    placeholder: { type: String },\n    autosize: { type: Boolean, default: false },\n    minRows: {\n      type: Number,\n      default: 1,\n      validator: positiveNumberValidator,\n    },\n    maxRows: {\n      type: Number,\n      validator: positiveNumberValidator,\n    },\n  },\n\n  emits: createEmits(),\n\n  setup (props, { emit }) {\n    const textarea = shallowRef<HTMLTextAreaElement>()\n\n    const rowHeight = ref(-1)\n    const height = ref(-1)\n    const { calculateRowHeight, calculateHeight } = useTextareaRowHeight(textarea)\n\n    const isResizable = computed(() => {\n      return Boolean((props.autosize || props.maxRows || props.minRows !== 1) && textarea.value)\n    })\n\n    const updateRowHeight = () => {\n      if (isResizable.value) {\n        rowHeight.value = calculateRowHeight()\n      }\n    }\n\n    const updateHeight = () => {\n      if (isResizable.value) {\n        height.value = calculateHeight()\n      }\n    }\n\n    onMounted(() => {\n      updateRowHeight()\n      updateHeight()\n    })\n\n    watch(() => props.modelValue, () => {\n      nextTick(updateHeight)\n    })\n\n    const computedStyle = computed(() => ({\n      minHeight: rowHeight.value * props.minRows + 'px',\n      maxHeight: props.maxRows ? (rowHeight.value * props.maxRows + 'px') : undefined,\n      height: height.value + 'px',\n      resize: isResizable.value ? undefined : 'none',\n    }) as CSSProperties)\n\n    const computedProps = computed(() => ({\n      ...pick(props, ['disabled', 'readonly', 'placeholder', 'ariaLabel']),\n    }))\n\n    const focus = () => {\n      textarea.value?.focus()\n    }\n\n    const blur = () => {\n      textarea.value?.blur()\n    }\n\n    return {\n      textarea,\n      computedStyle,\n      listeners: createListeners(emit),\n      computedProps,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.textarea {\n  padding: 0;\n  border: 0;\n  font-family: var(--va-font-family);\n}\n</style>\n"],"mappings":";;;;;SAEQA,YAAUC,IAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,QAAA;SACTC,SAAA,CAAW,GAAAC,kBAAA,aAAAC,UAAA;IACfC,GAAA,EAAK;IACOC,KAAA;IAAAC,KAAA,EAAAX,IAAA,CAAAY;EAAA;IAAA,GAAAZ,IAAA,CAAAa,aAAA;IAAA,GAAAb,IAAA,CAAAc;EAAA;IAAAC,KAAA,EAAAf,IAAA,CAAAgB;EAAA,cAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}