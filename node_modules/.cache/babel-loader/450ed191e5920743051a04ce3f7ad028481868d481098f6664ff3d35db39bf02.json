{"ast":null,"code":"import { computed } from \"vue\";\nimport { u as useColors } from \"../../../composables/useColors-f23d24ff.mjs\";\nconst useToggleIconProps = {\n  dropdownIcon: {\n    type: [String, Object],\n    default: () => ({\n      open: \"va-arrow-down\",\n      close: \"va-arrow-up\"\n    }),\n    validator: value => {\n      if (typeof value === \"string\") {\n        return true;\n      }\n      return Object.entries(value).every(([prop, propValue]) => [\"open\", \"close\"].includes(prop) && typeof propValue === \"string\");\n    }\n  }\n};\nconst useToggleIcon = (props, showDropdownContent) => {\n  const toggleIcon = computed(() => {\n    if (!props.dropdownIcon) {\n      return \"\";\n    }\n    if (typeof props.dropdownIcon === \"string\") {\n      return props.dropdownIcon;\n    }\n    return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open;\n  });\n  const {\n    getHoverColor,\n    getColor\n  } = useColors();\n  const colorComputed = computed(() => getColor(props.color));\n  const toggleIconColor = computed(() => props.readonly ? getHoverColor(colorComputed.value) : colorComputed.value);\n  return {\n    toggleIcon,\n    toggleIconColor\n  };\n};\nexport { useToggleIcon as a, useToggleIconProps as u };","map":{"version":3,"names":["useToggleIconProps","dropdownIcon","type","String","Object","default","open","close","validator","value","entries","every","prop","propValue","includes","useToggleIcon","props","showDropdownContent","toggleIcon","computed","getHoverColor","getColor","useColors","colorComputed","color","toggleIconColor","readonly"],"sources":["../../../../../../src/components/va-select/hooks/useToggleIcon.ts"],"sourcesContent":["import { Ref, computed, PropType, ExtractPropTypes } from 'vue'\n\nimport { useColors } from '../../../composables'\n\nimport type { SelectDropdownIcon } from '../types'\n\nexport const useToggleIconProps = {\n  dropdownIcon: {\n    type: [String, Object] as PropType<string | SelectDropdownIcon>,\n    default: (): SelectDropdownIcon => ({\n      open: 'va-arrow-down',\n      close: 'va-arrow-up',\n    }),\n    validator: (value: string | SelectDropdownIcon) => {\n      if (typeof value === 'string') { return true }\n\n      return Object.entries(value)\n        .every(([prop, propValue]) => ['open', 'close'].includes(prop) && typeof propValue === 'string')\n    },\n  },\n}\n\nexport const useToggleIcon = (\n  props: ExtractPropTypes<typeof useToggleIconProps> & { readonly: boolean, color: string },\n  showDropdownContent: Ref<boolean>,\n) => {\n  const toggleIcon = computed(() => {\n    if (!props.dropdownIcon) { return '' }\n\n    if (typeof props.dropdownIcon === 'string') {\n      return props.dropdownIcon\n    }\n\n    return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open\n  })\n\n  const { getHoverColor, getColor } = useColors()\n  const colorComputed = computed(() => getColor(props.color))\n  const toggleIconColor = computed(() => props.readonly ? getHoverColor(colorComputed.value) : colorComputed.value)\n\n  return { toggleIcon, toggleIconColor }\n}\n"],"mappings":";;AAMO,MAAMA,kBAAA,GAAqB;EAChCC,YAAA,EAAc;IACZC,IAAA,EAAM,CAACC,MAAA,EAAQC,MAAM;IACrBC,OAAA,EAASA,CAAA,MAA2B;MAClCC,IAAA,EAAM;MACNC,KAAA,EAAO;IAAA;IAETC,SAAA,EAAYC,KAAA,IAAuC;MAC7C,WAAOA,KAAA,KAAU,UAAU;QAAS;MAAK;MAE7C,OAAOL,MAAA,CAAOM,OAAA,CAAQD,KAAK,EACxBE,KAAA,CAAM,CAAC,CAACC,IAAA,EAAMC,SAAS,MAAM,CAAC,QAAQ,OAAO,EAAEC,QAAA,CAASF,IAAI,KAAK,OAAOC,SAAA,KAAc,QAAQ;IACnG;EACF;AACF;AAEa,MAAAE,aAAA,GAAgBA,CAC3BC,KAAA,EACAC,mBAAA,KACG;EACG,MAAAC,UAAA,GAAaC,QAAA,CAAS,MAAM;IAC5B,KAACH,KAAA,CAAMf,YAAA,EAAc;MAAS;IAAG;IAEjC,WAAOe,KAAA,CAAMf,YAAA,KAAiB,UAAU;MAC1C,OAAOe,KAAA,CAAMf,YAAA;IACf;IAEA,OAAOgB,mBAAA,CAAoBR,KAAA,GAAQO,KAAA,CAAMf,YAAA,CAAaM,KAAA,GAAQS,KAAA,CAAMf,YAAA,CAAaK,IAAA;EAAA,CAClF;EAED,MAAM;IAAEc,aAAA;IAAeC;EAAS,IAAIC,SAAA,CAAU;EAC9C,MAAMC,aAAA,GAAgBJ,QAAA,CAAS,MAAME,QAAA,CAASL,KAAA,CAAMQ,KAAK,CAAC;EACpD,MAAAC,eAAA,GAAkBN,QAAA,CAAS,MAAMH,KAAA,CAAMU,QAAA,GAAWN,aAAA,CAAcG,aAAA,CAAcd,KAAK,IAAIc,aAAA,CAAcd,KAAK;EAEzG;IAAES,UAAA;IAAYO;EAAA;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}