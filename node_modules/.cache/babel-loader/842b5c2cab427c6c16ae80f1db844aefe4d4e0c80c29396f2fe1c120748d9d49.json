{"ast":null,"code":"import { u as useDomChangesObserver } from \"./useDomChangesObserver-38254419.mjs\";\nimport { g as getElementBackground } from \"./utils-fd961857.mjs\";\nimport { ref, onMounted } from \"vue\";\nimport { u as useColors } from \"../useColors-f23d24ff.mjs\";\nimport { u as useEl } from \"../useEl-3fe9f3d1.mjs\";\nimport { u as useCache } from \"../useCache-1e0993cc.mjs\";\nimport { e as applyColors } from \"../../services/color/utils-21d3493b.mjs\";\nconst isTransparent = color => color === \"rgba(0, 0, 0, 0)\";\nconst withCache = cb => {\n  return (element, cache) => {\n    if (!element) {\n      return \"#fff\";\n    }\n    if (cache.has(element)) {\n      return cache.get(element);\n    }\n    cache.set(element, cb(element, cache));\n    return cache.get(element);\n  };\n};\nconst useElementBackground = element => {\n  const el = element || useEl();\n  const {\n    getColor\n  } = useColors();\n  const background = ref(getColor(\"background-primary\"));\n  const {\n    bgTempCache: tempCache\n  } = useCache();\n  const recursiveGetBackground = withCache((element2, cache) => {\n    if (!element2) {\n      return \"#fff\";\n    }\n    if (element2.nodeType !== Node.ELEMENT_NODE) {\n      return recursiveGetBackground(element2.parentElement, cache);\n    }\n    const bg = getElementBackground(element2);\n    if (!bg) {\n      return recursiveGetBackground(element2.parentElement, cache);\n    }\n    if (isTransparent(bg)) {\n      return recursiveGetBackground(element2.parentElement, cache);\n    }\n    return applyColors(recursiveGetBackground(element2.parentElement, cache), bg);\n  });\n  const updateBackground = (cache = tempCache) => {\n    background.value = recursiveGetBackground(el.value, cache);\n  };\n  useDomChangesObserver(updateBackground, el);\n  onMounted(updateBackground);\n  return {\n    background\n  };\n};\nexport { useElementBackground as u };","map":{"version":3,"names":["isTransparent","color","withCache","cb","element","cache","has","get","set","useElementBackground","el","useEl","getColor","useColors","background","ref","bgTempCache","tempCache","useCache","recursiveGetBackground","element2","nodeType","Node","ELEMENT_NODE","parentElement","bg","getElementBackground","applyColors","updateBackground","value","useDomChangesObserver","onMounted"],"sources":["../../../../../src/composables/useElementBackground/useElementBackground.ts"],"sourcesContent":["import { useDomChangesObserver } from './useDomChangesObserver'\nimport { getElementBackground } from './utils'\nimport { ref, Ref, onMounted } from 'vue'\nimport { applyColors, useColors } from '../useColors'\nimport { useEl } from '../useEl'\nimport { useCache } from '../useCache'\n\ntype Maybe<T> = T | null | undefined\ntype Cache = Map<HTMLElement, string>\n\nconst isTransparent = (color: string) => color === 'rgba(0, 0, 0, 0)'\n\nconst withCache = (cb: (element: HTMLElement, cache: Cache) => string) => {\n  return (element: Maybe<HTMLElement>, cache: Cache) => {\n    if (!element) { return '#fff' }\n    if (cache.has(element)) { return cache.get(element)! }\n    cache.set(element, cb(element, cache))\n    return cache.get(element)!\n  }\n}\n\n/** Can be null before component is mounted */\nexport const useElementBackground = (element?: Ref<HTMLElement | undefined>) => {\n  const el = element || useEl()\n  const { getColor } = useColors()\n  const background = ref(getColor('background-primary'))\n\n  const { bgTempCache: tempCache } = useCache()\n\n  const recursiveGetBackground = withCache((element, cache): string => {\n    if (!element) { return '#fff' } // Likely doesn't have a color, so let's just return white\n    if (element.nodeType !== Node.ELEMENT_NODE) { return recursiveGetBackground(element.parentElement, cache) }\n\n    const bg = getElementBackground(element)\n\n    if (!bg) { return recursiveGetBackground(element.parentElement, cache) }\n\n    if (isTransparent(bg)) {\n      return recursiveGetBackground(element.parentElement, cache)\n    }\n\n    return applyColors(recursiveGetBackground(element.parentElement, cache), bg)\n  })\n\n  const updateBackground = (cache: Cache = tempCache) => {\n    background.value = recursiveGetBackground(el.value, cache)\n  }\n\n  useDomChangesObserver(updateBackground, el)\n\n  onMounted(updateBackground)\n\n  return {\n    background,\n  }\n}\n"],"mappings":";;;;;;;AAUA,MAAMA,aAAA,GAAiBC,KAAA,IAAkBA,KAAA,KAAU;AAEnD,MAAMC,SAAA,GAAaC,EAAA,IAAuD;EACjE,QAACC,OAAA,EAA6BC,KAAA,KAAiB;IACpD,IAAI,CAACD,OAAA,EAAS;MAAS;IAAO;IAC1B,IAAAC,KAAA,CAAMC,GAAA,CAAIF,OAAO,GAAG;MAAS,OAAAC,KAAA,CAAME,GAAA,CAAIH,OAAO;IAAG;IACrDC,KAAA,CAAMG,GAAA,CAAIJ,OAAA,EAASD,EAAA,CAAGC,OAAA,EAASC,KAAK,CAAC;IAC9B,OAAAA,KAAA,CAAME,GAAA,CAAIH,OAAO;EAAA;AAE5B;AAGa,MAAAK,oBAAA,GAAwBL,OAAA,IAA2C;EACxE,MAAAM,EAAA,GAAKN,OAAA,IAAWO,KAAA;EAChB;IAAEC;EAAA,IAAaC,SAAA;EACrB,MAAMC,UAAA,GAAaC,GAAA,CAAIH,QAAA,CAAS,oBAAoB,CAAC;EAErD,MAAM;IAAEI,WAAA,EAAaC;EAAU,IAAIC,QAAA,CAAS;EAE5C,MAAMC,sBAAA,GAAyBjB,SAAA,CAAU,CAACkB,QAAA,EAASf,KAAA,KAAkB;IACnE,IAAI,CAACe,QAAA,EAAS;MAAS;IAAO;IAC1B,IAAAA,QAAA,CAAQC,QAAA,KAAaC,IAAA,CAAKC,YAAA,EAAc;MAAS,OAAAJ,sBAAA,CAAuBC,QAAA,CAAQI,aAAA,EAAenB,KAAK;IAAE;IAEpG,MAAAoB,EAAA,GAAKC,oBAAA,CAAqBN,QAAO;IAEvC,IAAI,CAACK,EAAA,EAAI;MAAS,OAAAN,sBAAA,CAAuBC,QAAA,CAAQI,aAAA,EAAenB,KAAK;IAAE;IAEnE,IAAAL,aAAA,CAAcyB,EAAE,GAAG;MACd,OAAAN,sBAAA,CAAuBC,QAAA,CAAQI,aAAA,EAAenB,KAAK;IAC5D;IAEA,OAAOsB,WAAA,CAAYR,sBAAA,CAAuBC,QAAA,CAAQI,aAAA,EAAenB,KAAK,GAAGoB,EAAE;EAAA,CAC5E;EAEK,MAAAG,gBAAA,GAAmBA,CAACvB,KAAA,GAAeY,SAAA,KAAc;IACrDH,UAAA,CAAWe,KAAA,GAAQV,sBAAA,CAAuBT,EAAA,CAAGmB,KAAA,EAAOxB,KAAK;EAAA;EAG3DyB,qBAAA,CAAsBF,gBAAA,EAAkBlB,EAAE;EAE1CqB,SAAA,CAAUH,gBAAgB;EAEnB;IACLd;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}