{"ast":null,"code":"const isFunction = val => typeof val === \"function\";\nconst isObject = val => val !== null && typeof val === \"object\";\nconst useBindingProps = {\n  rowBind: {\n    type: null\n  },\n  cellBind: {\n    type: null\n  }\n};\nconst useBinding = props => {\n  const getRowBind = row => isFunction(props.rowBind) ? props.rowBind(row.source, row.initialIndex) : isObject(props.rowBind) ? props.rowBind : {};\n  const getCellBind = (cell, row) => isFunction(props.cellBind) ? props.cellBind(cell.source, row.source, cell.column, row.initialIndex) : isObject(props.cellBind) ? props.cellBind : {};\n  return {\n    getRowBind,\n    getCellBind\n  };\n};\nexport { useBinding as a, useBindingProps as u };","map":{"version":3,"names":["isFunction","val","isObject","useBindingProps","rowBind","type","cellBind","useBinding","props","getRowBind","row","source","initialIndex","getCellBind","cell","column"],"sources":["../../../../../../src/components/va-data-table/hooks/useBinding.ts"],"sourcesContent":["import { ExtractPropTypes, PropType } from 'vue'\n\nimport type {\n  DataTableCell,\n  DataTableRow,\n  DataTableRowBind,\n  DataTableCellBind,\n} from '../types'\n\nconst isFunction = (val: unknown): val is Function => typeof val === 'function'\nconst isObject = (val: unknown): val is Record<any, any> => val !== null && typeof val === 'object'\n\nexport const useBindingProps = {\n  rowBind: { type: null as unknown as PropType<DataTableRowBind | undefined> },\n  cellBind: { type: null as unknown as PropType<DataTableCellBind | undefined> },\n}\n\nexport const useBinding = (props: ExtractPropTypes<typeof useBindingProps>) => {\n  const getRowBind = (row: DataTableRow) => (\n    isFunction(props.rowBind)\n      ? props.rowBind(row.source, row.initialIndex)\n      : isObject(props.rowBind)\n        ? props.rowBind\n        : {}\n  ) as Record<string, string>\n\n  const getCellBind = (cell: DataTableCell, row: DataTableRow) => (\n    isFunction(props.cellBind)\n      ? props.cellBind(cell.source, row.source, cell.column, row.initialIndex)\n      : isObject(props.cellBind)\n        ? props.cellBind\n        : {}\n  ) as Record<string, string>\n\n  return {\n    getRowBind,\n    getCellBind,\n  }\n}\n"],"mappings":"AASA,MAAMA,UAAA,GAAcC,GAAA,IAAkC,OAAOA,GAAA,KAAQ;AACrE,MAAMC,QAAA,GAAYD,GAAA,IAA0CA,GAAA,KAAQ,QAAQ,OAAOA,GAAA,KAAQ;AAEpF,MAAME,eAAA,GAAkB;EAC7BC,OAAA,EAAS;IAAEC,IAAA,EAAM;EAA0D;EAC3EC,QAAA,EAAU;IAAED,IAAA,EAAM;EAA2D;AAC/E;AAEa,MAAAE,UAAA,GAAcC,KAAA,IAAoD;EACvE,MAAAC,UAAA,GAAcC,GAAA,IAClBV,UAAA,CAAWQ,KAAA,CAAMJ,OAAO,IACpBI,KAAA,CAAMJ,OAAA,CAAQM,GAAA,CAAIC,MAAA,EAAQD,GAAA,CAAIE,YAAY,IAC1CV,QAAA,CAASM,KAAA,CAAMJ,OAAO,IACpBI,KAAA,CAAMJ,OAAA,GACN;EAGF,MAAAS,WAAA,GAAcA,CAACC,IAAA,EAAqBJ,GAAA,KACxCV,UAAA,CAAWQ,KAAA,CAAMF,QAAQ,IACrBE,KAAA,CAAMF,QAAA,CAASQ,IAAA,CAAKH,MAAA,EAAQD,GAAA,CAAIC,MAAA,EAAQG,IAAA,CAAKC,MAAA,EAAQL,GAAA,CAAIE,YAAY,IACrEV,QAAA,CAASM,KAAA,CAAMF,QAAQ,IACrBE,KAAA,CAAMF,QAAA,GACN;EAGD;IACLG,UAAA;IACAI;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}