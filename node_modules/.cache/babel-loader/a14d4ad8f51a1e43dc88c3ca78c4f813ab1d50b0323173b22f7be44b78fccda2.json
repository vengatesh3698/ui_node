{"ast":null,"code":"import { a as getValueByKey } from \"../utils/value-by-key-5e6df8a4.mjs\";\nconst useSelectableListProps = {\n  options: {\n    type: Array,\n    default: () => []\n  },\n  textBy: {\n    type: [String, Function],\n    default: \"text\"\n  },\n  valueBy: {\n    type: [String, Function],\n    default: \"\"\n  },\n  trackBy: {\n    type: [String, Function],\n    default: \"\"\n  },\n  disabledBy: {\n    type: [String, Function],\n    default: \"disabled\"\n  },\n  groupBy: {\n    type: [String, Function],\n    default: \"group\"\n  }\n};\nfunction useSelectableList(props) {\n  const getOptionProperty = (option, prop) => {\n    if (typeof option !== \"object\") {\n      return option;\n    }\n    return getValueByKey(option, prop);\n  };\n  const getTrackBy = option => {\n    return props.trackBy ? getOptionProperty(option, props.trackBy) : getValue(option);\n  };\n  const getDisabled = option => {\n    if (typeof option !== \"object\") {\n      return false;\n    }\n    return getOptionProperty(option, props.disabledBy);\n  };\n  const getText = option => {\n    const optionText = getOptionProperty(option, props.textBy);\n    if ([\"number\", \"boolean\"].includes(typeof optionText)) {\n      return String(optionText);\n    }\n    return optionText;\n  };\n  const getGroupBy = option => {\n    if (!option || typeof option !== \"object\") {\n      return void 0;\n    }\n    return getOptionProperty(option, props.groupBy);\n  };\n  const getValue = option => getOptionProperty(option, props.valueBy);\n  return {\n    getValue,\n    getText,\n    getDisabled,\n    getTrackBy,\n    getGroupBy\n  };\n}\nexport { useSelectableList as a, useSelectableListProps as u };","map":{"version":3,"names":["useSelectableListProps","options","type","Array","default","textBy","String","Function","valueBy","trackBy","disabledBy","groupBy","useSelectableList","props","getOptionProperty","option","prop","getValueByKey","getTrackBy","getValue","getDisabled","getText","optionText","includes","getGroupBy"],"sources":["../../../../src/composables/useSelectableList.ts"],"sourcesContent":["import type { ExtractPropTypes, PropType } from 'vue'\n\nimport { getValueByKey } from '../utils/value-by-key'\n\nexport type SelectableOption = string | number | boolean | Record<string, any>\nexport type StringOrFunction = string | ((option: SelectableOption) => unknown)\n\nexport const useSelectableListProps = {\n  options: { type: Array as PropType<SelectableOption[]>, default: () => [] },\n  textBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'text' },\n  valueBy: { type: [String, Function] as PropType<StringOrFunction>, default: '' },\n  trackBy: { type: [String, Function] as PropType<StringOrFunction>, default: '' },\n  disabledBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'disabled' },\n  groupBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'group' },\n}\n\nexport function useSelectableList (props: ExtractPropTypes<typeof useSelectableListProps>) {\n  const getOptionProperty = (option: SelectableOption, prop: StringOrFunction) => {\n    // if option is a primitive value, we return itself\n    if (typeof option !== 'object') { return option }\n\n    return getValueByKey(option, prop)\n  }\n\n  const getTrackBy = (option: SelectableOption): string | number => {\n    return props.trackBy ? getOptionProperty(option, props.trackBy) : getValue(option)\n  }\n\n  const getDisabled = (option: SelectableOption): boolean => {\n    // any non-object options should return `false`\n    if (typeof option !== 'object') { return false }\n\n    return getOptionProperty(option, props.disabledBy)\n  }\n\n  const getText = (option: SelectableOption): string => {\n    const optionText = getOptionProperty(option, props.textBy)\n\n    // `String` should prevent wrong type errors in case of number/boolean value\n    if (['number', 'boolean'].includes(typeof optionText)) { return String(optionText) }\n\n    return optionText\n  }\n\n  // group by is used as object's key, so it can be only string or number\n  const getGroupBy = (option: SelectableOption): string | number | undefined => {\n    if (!option || typeof option !== 'object') { return undefined }\n\n    return getOptionProperty(option, props.groupBy)\n  }\n\n  // value can be any type except array\n  const getValue = (option: SelectableOption) => getOptionProperty(option, props.valueBy)\n\n  return {\n    getValue,\n    getText,\n    getDisabled,\n    getTrackBy,\n    getGroupBy,\n  }\n}\n"],"mappings":";AAOO,MAAMA,sBAAA,GAAyB;EACpCC,OAAA,EAAS;IAAEC,IAAA,EAAMC,KAAA;IAAuCC,OAAA,EAASA,CAAA,KAAM;EAAG;EAC1EC,MAAA,EAAQ;IAAEH,IAAA,EAAM,CAACI,MAAA,EAAQC,QAAQ;IAAiCH,OAAA,EAAS;EAAO;EAClFI,OAAA,EAAS;IAAEN,IAAA,EAAM,CAACI,MAAA,EAAQC,QAAQ;IAAiCH,OAAA,EAAS;EAAG;EAC/EK,OAAA,EAAS;IAAEP,IAAA,EAAM,CAACI,MAAA,EAAQC,QAAQ;IAAiCH,OAAA,EAAS;EAAG;EAC/EM,UAAA,EAAY;IAAER,IAAA,EAAM,CAACI,MAAA,EAAQC,QAAQ;IAAiCH,OAAA,EAAS;EAAW;EAC1FO,OAAA,EAAS;IAAET,IAAA,EAAM,CAACI,MAAA,EAAQC,QAAQ;IAAiCH,OAAA,EAAS;EAAQ;AACtF;AAEO,SAASQ,kBAAmBC,KAAA,EAAwD;EACnF,MAAAC,iBAAA,GAAoBA,CAACC,MAAA,EAA0BC,IAAA,KAA2B;IAE1E,WAAOD,MAAA,KAAW,UAAU;MAAS,OAAAA,MAAA;IAAO;IAEzC,OAAAE,aAAA,CAAcF,MAAA,EAAQC,IAAI;EAAA;EAG7B,MAAAE,UAAA,GAAcH,MAAA,IAA8C;IACzD,OAAAF,KAAA,CAAMJ,OAAA,GAAUK,iBAAA,CAAkBC,MAAA,EAAQF,KAAA,CAAMJ,OAAO,IAAIU,QAAA,CAASJ,MAAM;EAAA;EAG7E,MAAAK,WAAA,GAAeL,MAAA,IAAsC;IAErD,WAAOA,MAAA,KAAW,UAAU;MAAS;IAAM;IAExC,OAAAD,iBAAA,CAAkBC,MAAA,EAAQF,KAAA,CAAMH,UAAU;EAAA;EAG7C,MAAAW,OAAA,GAAWN,MAAA,IAAqC;IACpD,MAAMO,UAAA,GAAaR,iBAAA,CAAkBC,MAAA,EAAQF,KAAA,CAAMR,MAAM;IAGzD,IAAI,CAAC,UAAU,SAAS,EAAEkB,QAAA,CAAS,OAAOD,UAAU,GAAG;MAAE,OAAOhB,MAAA,CAAOgB,UAAU;IAAE;IAE5E,OAAAA,UAAA;EAAA;EAIH,MAAAE,UAAA,GAAcT,MAAA,IAA0D;IAC5E,IAAI,CAACA,MAAA,IAAU,OAAOA,MAAA,KAAW,UAAU;MAAS;IAAU;IAEvD,OAAAD,iBAAA,CAAkBC,MAAA,EAAQF,KAAA,CAAMF,OAAO;EAAA;EAIhD,MAAMQ,QAAA,GAAYJ,MAAA,IAA6BD,iBAAA,CAAkBC,MAAA,EAAQF,KAAA,CAAML,OAAO;EAE/E;IACLW,QAAA;IACAE,OAAA;IACAD,WAAA;IACAF,UAAA;IACAM;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}