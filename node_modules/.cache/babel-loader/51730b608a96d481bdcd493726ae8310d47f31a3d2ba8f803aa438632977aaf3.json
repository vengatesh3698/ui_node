{"ast":null,"code":"import { i as isServer } from \"./ssr-fd33979c.mjs\";\nconst addOrUpdateStyleElement = (id, getStyles) => {\n  if (isServer()) {\n    return;\n  }\n  let stylesElement = document.getElementById(id);\n  if (stylesElement) {\n    stylesElement.innerHTML = getStyles();\n  } else {\n    stylesElement = document.createElement(\"style\");\n    stylesElement.setAttribute(\"type\", \"text/css\");\n    stylesElement.setAttribute(\"id\", id);\n    stylesElement.innerHTML = getStyles();\n    document.head.append(stylesElement);\n  }\n};\nexport { addOrUpdateStyleElement as a };","map":{"version":3,"names":["addOrUpdateStyleElement","id","getStyles","isServer","stylesElement","document","getElementById","innerHTML","createElement","setAttribute","head","append"],"sources":["../../../../src/utils/dom.ts"],"sourcesContent":["import { isServer } from './ssr'\n\n/**\n * Create and append to head provided styles or update if exists.\n *\n * @param id - used to identify block for removal etc\n * @param getStyles - closure to get styles\n */\nexport const addOrUpdateStyleElement = (id: string, getStyles: () => string): void => {\n  if (isServer()) {\n    return\n  }\n\n  let stylesElement = document.getElementById(id)\n\n  if (stylesElement) {\n    stylesElement.innerHTML = getStyles()\n  } else {\n    stylesElement = document.createElement('style')\n    stylesElement.setAttribute('type', 'text/css')\n    stylesElement.setAttribute('id', id)\n    stylesElement.innerHTML = getStyles()\n    document.head.append(stylesElement)\n  }\n}\n"],"mappings":";AAQa,MAAAA,uBAAA,GAA0BA,CAACC,EAAA,EAAYC,SAAA,KAAkC;EACpF,IAAIC,QAAA,IAAY;IACd;EACF;EAEI,IAAAC,aAAA,GAAgBC,QAAA,CAASC,cAAA,CAAeL,EAAE;EAE9C,IAAIG,aAAA,EAAe;IACjBA,aAAA,CAAcG,SAAA,GAAYL,SAAA;EAAU,OAC/B;IACWE,aAAA,GAAAC,QAAA,CAASG,aAAA,CAAc,OAAO;IAChCJ,aAAA,CAAAK,YAAA,CAAa,QAAQ,UAAU;IAC/BL,aAAA,CAAAK,YAAA,CAAa,MAAMR,EAAE;IACnCG,aAAA,CAAcG,SAAA,GAAYL,SAAA;IACjBG,QAAA,CAAAK,IAAA,CAAKC,MAAA,CAAOP,aAAa;EACpC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}