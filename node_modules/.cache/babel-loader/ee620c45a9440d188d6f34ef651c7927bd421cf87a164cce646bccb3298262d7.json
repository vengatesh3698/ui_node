{"ast":null,"code":"import { watch, unref } from \"vue\";\nimport { u as useWindow } from \"./useWindow-549880c7.mjs\";\nconst useEvent = (event, listener, target) => {\n  const source = target && typeof target !== \"boolean\" ? target : useWindow();\n  const capture = typeof target === \"boolean\" ? target : false;\n  watch(source, (newValue, oldValue) => {\n    var _a, _b;\n    if (!Array.isArray(event)) {\n      (_a = unref(newValue)) == null ? void 0 : _a.addEventListener(event, listener, capture);\n      (_b = unref(oldValue)) == null ? void 0 : _b.removeEventListener(event, listener, capture);\n    } else {\n      event.forEach(e => {\n        var _a2, _b2;\n        (_a2 = unref(newValue)) == null ? void 0 : _a2.addEventListener(e, listener, capture);\n        (_b2 = unref(oldValue)) == null ? void 0 : _b2.removeEventListener(e, listener, capture);\n      });\n    }\n  }, {\n    immediate: true\n  });\n};\nexport { useEvent as u };","map":{"version":3,"names":["useEvent","event","listener","target","source","useWindow","capture","watch","newValue","oldValue","Array","isArray","_a","unref","addEventListener","_b","removeEventListener","forEach","e","_a2","_b2","immediate"],"sources":["../../../../src/composables/useEvent.ts"],"sourcesContent":["import { Ref, unref, watch } from 'vue'\nimport { useWindow } from './useWindow'\n\ntype MaybeRef<T> = Ref<T> | T\n\ntype UseEventEventName = keyof GlobalEventHandlersEventMap | string[]\ntype UseEventEvent<N extends UseEventEventName, D> = N extends keyof GlobalEventHandlersEventMap ? GlobalEventHandlersEventMap[N] : D\n\n/**\n * SSR safety listen to target event.\n * @param target by default window\n * @param event if string, listener will be fully typed. If array of string, you need to type event manually.\n *\n *\n * @example\n * ```ts\n * useEvent('resize': (e) => {})\n * useEvent(['mousedown', 'mouseup', 'mousemove'], (e) => {})\n * ```\n */\nexport const useEvent = <N extends UseEventEventName, E extends Event>(\n  event: N,\n  listener: (this: GlobalEventHandlers, event: UseEventEvent<N, E>) => any,\n  target?: MaybeRef<GlobalEventHandlers | undefined | null> | boolean,\n) => {\n  const source = target && typeof target !== 'boolean' ? target : useWindow()\n  const capture = typeof target === 'boolean' ? target : false\n\n  watch(source, (newValue, oldValue) => {\n    if (!Array.isArray(event)) {\n      unref(newValue)?.addEventListener(event, listener as any, capture)\n      unref(oldValue)?.removeEventListener(event, listener as any, capture)\n    } else {\n      event.forEach((e) => {\n        unref(newValue)?.addEventListener(e, listener as any, capture)\n        unref(oldValue)?.removeEventListener(e, listener as any, capture)\n      })\n    }\n  }, { immediate: true })\n}\n"],"mappings":";;AAoBO,MAAMA,QAAA,GAAWA,CACtBC,KAAA,EACAC,QAAA,EACAC,MAAA,KACG;EACH,MAAMC,MAAA,GAASD,MAAA,IAAU,OAAOA,MAAA,KAAW,YAAYA,MAAA,GAASE,SAAA;EAChE,MAAMC,OAAA,GAAU,OAAOH,MAAA,KAAW,YAAYA,MAAA,GAAS;EAEjDI,KAAA,CAAAH,MAAA,EAAQ,CAACI,QAAA,EAAUC,QAAA,KAAa;;IACpC,IAAI,CAACC,KAAA,CAAMC,OAAA,CAAQV,KAAK,GAAG;MACzB,CAAAW,EAAA,GAAAC,KAAA,CAAML,QAAQ,MAAd,gBAAAI,EAAA,CAAiBE,gBAAA,CAAiBb,KAAA,EAAOC,QAAA,EAAiBI,OAAA;MAC1D,CAAAS,EAAA,GAAAF,KAAA,CAAMJ,QAAQ,MAAd,gBAAAM,EAAA,CAAiBC,mBAAA,CAAoBf,KAAA,EAAOC,QAAA,EAAiBI,OAAA;IAAO,OAC/D;MACCL,KAAA,CAAAgB,OAAA,CAASC,CAAA,IAAM;;QACnB,CAAAC,GAAA,GAAAN,KAAA,CAAML,QAAQ,MAAd,gBAAAW,GAAA,CAAiBL,gBAAA,CAAiBI,CAAA,EAAGhB,QAAA,EAAiBI,OAAA;QACtD,CAAAc,GAAA,GAAAP,KAAA,CAAMJ,QAAQ,MAAd,gBAAAW,GAAA,CAAiBJ,mBAAA,CAAoBE,CAAA,EAAGhB,QAAA,EAAiBI,OAAA;MAAO,CACjE;IACH;EAAA,GACC;IAAEe,SAAA,EAAW;EAAA,CAAM;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}