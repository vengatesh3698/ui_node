{"ast":null,"code":"import { ref, computed } from \"vue\";\nimport { a as useItemsProp, b as useItemsTrackByProp } from \"./useCommonProps-59d5fc97.mjs\";\nimport { g as getValueByPath } from \"../../../utils/value-by-key-5e6df8a4.mjs\";\nconst getItemKey = (source, itemsTrackBy) => typeof itemsTrackBy === \"function\" ? itemsTrackBy(source) : getValueByPath(source, itemsTrackBy) || source;\nconst useRowsProps = {\n  ...useItemsProp,\n  ...useItemsTrackByProp\n};\nconst buildTableCell = (rowIndex, rowKey, rowData, column) => {\n  var _a;\n  const source = getValueByPath(rowData, column.key);\n  return {\n    rowIndex,\n    rowKey,\n    rowData,\n    column,\n    source,\n    value: ((_a = source == null ? void 0 : source.toString) == null ? void 0 : _a.call(source)) || \"\"\n  };\n};\nconst buildTableRow = (source, initialIndex, itemsTrackBy, columns) => {\n  const itemKey = getItemKey(source, itemsTrackBy);\n  return {\n    initialIndex,\n    itemKey,\n    source,\n    cells: columns.map(column => buildTableCell(initialIndex, itemKey, source, column)),\n    rowData: source\n  };\n};\nconst useRows = (columns, props) => {\n  const expandableRows = ref({});\n  const rowsComputed = computed(() => props.items.map((rawItem, index) => ({\n    ...buildTableRow(rawItem, index, props.itemsTrackBy, columns.value),\n    toggleRowDetails: show => {\n      if (typeof show === \"boolean\") {\n        expandableRows.value[index] = show;\n      } else {\n        expandableRows.value[index] = !expandableRows.value[index];\n      }\n    },\n    isExpandableRowVisible: !!expandableRows.value[index]\n  })));\n  return {\n    rowsComputed\n  };\n};\nexport { useRows as a, getItemKey as g, useRowsProps as u };","map":{"version":3,"names":["getItemKey","source","itemsTrackBy","getValueByPath","useRowsProps","useItemsProp","useItemsTrackByProp","buildTableCell","rowIndex","rowKey","rowData","column","key","value","_a","toString","call","buildTableRow","initialIndex","columns","itemKey","cells","map","useRows","props","expandableRows","ref","rowsComputed","computed","items","rawItem","index","toggleRowDetails","show","isExpandableRowVisible"],"sources":["../../../../../../src/components/va-data-table/hooks/useRows.ts"],"sourcesContent":["import { Ref, ref, computed, ExtractPropTypes } from 'vue'\n\nimport { useItemsProp, useItemsTrackByProp } from './useCommonProps'\n\nimport { getValueByPath } from '../../../utils/value-by-key'\n\nimport type {\n  DataTableColumnInternal,\n  DataTableItem,\n  DataTableCell,\n  DataTableRow,\n  DataTableItemKey,\n} from '../types'\n\nexport const getItemKey = (source: DataTableItem, itemsTrackBy: string | ((item: DataTableItem) => any)): DataTableItemKey => (\n  typeof itemsTrackBy === 'function'\n    ? itemsTrackBy(source)\n    : getValueByPath(source, itemsTrackBy) || source\n)\n\nexport const useRowsProps = {\n  ...useItemsProp,\n  ...useItemsTrackByProp,\n}\n\nconst buildTableCell = (\n  rowIndex: number,\n  rowKey: string,\n  rowData: DataTableItem,\n  column: DataTableColumnInternal,\n): DataTableCell => {\n  const source = getValueByPath(rowData, column.key)\n\n  return {\n    rowIndex,\n    rowKey,\n    rowData,\n    column,\n    source,\n    value: source?.toString?.() || '',\n  }\n}\n\nconst buildTableRow = (\n  source: DataTableItem,\n  initialIndex: number,\n  itemsTrackBy: string | ((item: DataTableItem) => any),\n  columns: DataTableColumnInternal[],\n) => {\n  const itemKey = getItemKey(source, itemsTrackBy)\n\n  return {\n    initialIndex,\n    itemKey,\n    source,\n    cells: columns.map(column => buildTableCell(initialIndex, itemKey, source, column)),\n    rowData: source,\n  }\n}\n\nexport const useRows = (\n  columns: Ref<DataTableColumnInternal[]>,\n  props: ExtractPropTypes<typeof useRowsProps>,\n) => {\n  const expandableRows = ref<Record<number, boolean>>({})\n\n  const rowsComputed = computed<DataTableRow[]>(() => props.items\n    .map((rawItem, index) => ({\n      ...buildTableRow(rawItem, index, props.itemsTrackBy, columns.value),\n      toggleRowDetails: (show?: boolean) => {\n        if (typeof show === 'boolean') {\n          expandableRows.value[index] = show\n        } else {\n          expandableRows.value[index] = !expandableRows.value[index]\n        }\n      },\n      isExpandableRowVisible: !!expandableRows.value[index],\n    })))\n\n  return {\n    rowsComputed,\n  }\n}\n"],"mappings":";;;AAcO,MAAMA,UAAA,GAAaA,CAACC,MAAA,EAAuBC,YAAA,KAChD,OAAOA,YAAA,KAAiB,aACpBA,YAAA,CAAaD,MAAM,IACnBE,cAAA,CAAeF,MAAA,EAAQC,YAAY,KAAKD,MAAA;AAGvC,MAAMG,YAAA,GAAe;EAC1B,GAAGC,YAAA;EACH,GAAGC;AACL;AAEA,MAAMC,cAAA,GAAiBA,CACrBC,QAAA,EACAC,MAAA,EACAC,OAAA,EACAC,MAAA,KACkB;;EAClB,MAAMV,MAAA,GAASE,cAAA,CAAeO,OAAA,EAASC,MAAA,CAAOC,GAAG;EAE1C;IACLJ,QAAA;IACAC,MAAA;IACAC,OAAA;IACAC,MAAA;IACAV,MAAA;IACAY,KAAA,IAAOC,EAAA,GAAAb,MAAA,oBAAAA,MAAA,CAAQc,QAAA,KAAR,gBAAAD,EAAA,CAAAE,IAAA,CAAAf,MAAA,MAAwB;EAAA;AAEnC;AAEA,MAAMgB,aAAA,GAAgBA,CACpBhB,MAAA,EACAiB,YAAA,EACAhB,YAAA,EACAiB,OAAA,KACG;EACG,MAAAC,OAAA,GAAUpB,UAAA,CAAWC,MAAA,EAAQC,YAAY;EAExC;IACLgB,YAAA;IACAE,OAAA;IACAnB,MAAA;IACAoB,KAAA,EAAOF,OAAA,CAAQG,GAAA,CAAIX,MAAA,IAAUJ,cAAA,CAAeW,YAAA,EAAcE,OAAA,EAASnB,MAAA,EAAQU,MAAM,CAAC;IAClFD,OAAA,EAAST;EAAA;AAEb;AAEa,MAAAsB,OAAA,GAAUA,CACrBJ,OAAA,EACAK,KAAA,KACG;EACG,MAAAC,cAAA,GAAiBC,GAAA,CAA6B,EAAE;EAEhD,MAAAC,YAAA,GAAeC,QAAA,CAAyB,MAAMJ,KAAA,CAAMK,KAAA,CACvDP,GAAA,CAAI,CAACQ,OAAA,EAASC,KAAA,MAAW;IACxB,GAAGd,aAAA,CAAca,OAAA,EAASC,KAAA,EAAOP,KAAA,CAAMtB,YAAA,EAAciB,OAAA,CAAQN,KAAK;IAClEmB,gBAAA,EAAmBC,IAAA,IAAmB;MAChC,WAAOA,IAAA,KAAS,WAAW;QACdR,cAAA,CAAAZ,KAAA,CAAMkB,KAAK,IAAIE,IAAA;MAAA,OACzB;QACLR,cAAA,CAAeZ,KAAA,CAAMkB,KAAK,IAAI,CAACN,cAAA,CAAeZ,KAAA,CAAMkB,KAAK;MAC3D;IACF;IACAG,sBAAA,EAAwB,CAAC,CAACT,cAAA,CAAeZ,KAAA,CAAMkB,KAAK;EAAA,EACpD,CAAC;EAEE;IACLJ;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}