{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed } from \"vue\";\nimport { a as useStatefulProps, b as useStateful } from \"./useStateful-50e4a6b9.mjs\";\nimport { u as useLoadingProps } from \"./useLoading-5a447e96.mjs\";\nimport { u as useValidationProps, a as useValidationEmits, b as useValidation } from \"./useValidation-a7c1fccc.mjs\";\nimport { u as useFocus } from \"./useFocus-4393f76a.mjs\";\nconst useSelectableProps = {\n  ...useStatefulProps,\n  ...useLoadingProps,\n  ...useValidationProps,\n  arrayValue: {\n    type: [String, Boolean, Object, Number],\n    default: void 0\n  },\n  label: {\n    type: String,\n    default: \"\"\n  },\n  leftLabel: {\n    type: Boolean,\n    default: false\n  },\n  trueValue: {\n    type: null,\n    default: true\n  },\n  falseValue: {\n    type: null,\n    default: false\n  },\n  indeterminate: {\n    type: Boolean,\n    default: false\n  },\n  indeterminateValue: {\n    type: null,\n    default: null\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  readonly: {\n    type: Boolean,\n    default: false\n  }\n};\nconst useSelectableEmits = [...useValidationEmits, \"update:modelValue\", \"focus\", \"blur\"];\nconst checkDuplicates = props => {\n  const values = [props.falseValue, props.trueValue];\n  if (props.indeterminate) {\n    values.push(props.indeterminateValue);\n  }\n  const hasDuplicates = new Set(values).size !== values.length;\n  if (hasDuplicates) {\n    throw new Error(\"falseValue, trueValue, indeterminateValue props should have strictly different values, which is not the case.\");\n  }\n};\nconst useSelectable = (props, emit, {\n  input,\n  label,\n  container\n}) => {\n  checkDuplicates(props);\n  const reset = () => withoutValidation(() => {\n    emit(\"update:modelValue\", false);\n    resetValidation();\n  });\n  const focus = () => {\n    var _a;\n    (_a = input.value) == null ? void 0 : _a.focus();\n  };\n  const {\n    valueComputed\n  } = useStateful(props, emit);\n  const {\n    computedError,\n    computedErrorMessages,\n    validate,\n    validationAriaAttributes,\n    withoutValidation,\n    resetValidation\n  } = useValidation(props, emit, {\n    reset,\n    focus,\n    value: valueComputed\n  });\n  const {\n    isFocused\n  } = useFocus();\n  const isElementRelated = element => {\n    return !!element && [label.value, container.value].includes(element);\n  };\n  const onBlur = event => {\n    if (input.value === event.target && !isElementRelated(event.relatedTarget)) {\n      isFocused.value = false;\n      validate();\n      emit(\"blur\", event);\n    }\n  };\n  const onFocus = event => {\n    isFocused.value = true;\n    emit(\"focus\", event);\n  };\n  const isIndeterminate = computed(() => props.indeterminate && valueComputed.value === props.indeterminateValue);\n  const modelIsArray = computed(() => props.arrayValue !== void 0 && props.arrayValue !== null);\n  const isChecked = computed(() => {\n    var _a;\n    if (modelIsArray.value) {\n      return (_a = props.modelValue) == null ? void 0 : _a.includes(props.arrayValue);\n    }\n    return valueComputed.value === props.trueValue;\n  });\n  const toggleSelection = () => {\n    if (props.readonly || props.disabled || props.loading) {\n      return;\n    }\n    if (modelIsArray.value) {\n      if (!props.modelValue) {\n        emit(\"update:modelValue\", [props.arrayValue]);\n      } else if (!Array.isArray(props.modelValue)) {\n        emit(\"update:modelValue\", props.modelValue === props.arrayValue ? [] : [props.modelValue, props.arrayValue]);\n      } else if (props.modelValue.includes(props.arrayValue)) {\n        emit(\"update:modelValue\", props.modelValue.filter(option => option !== props.arrayValue));\n      } else {\n        emit(\"update:modelValue\", props.modelValue.concat(props.arrayValue));\n      }\n      return;\n    }\n    if (props.indeterminate) {\n      if (isIndeterminate.value) {\n        valueComputed.value = props.trueValue;\n      } else if (isChecked.value) {\n        valueComputed.value = props.falseValue;\n      } else {\n        valueComputed.value = props.indeterminateValue;\n      }\n      return;\n    }\n    if (isChecked.value) {\n      valueComputed.value = props.falseValue;\n    } else {\n      valueComputed.value = props.trueValue;\n    }\n  };\n  return {\n    isChecked,\n    isIndeterminate,\n    onBlur,\n    onFocus,\n    toggleSelection,\n    reset,\n    focus,\n    computedError,\n    computedErrorMessages,\n    validationAriaAttributes\n  };\n};\nexport { useSelectableProps as a, useSelectable as b, useSelectableEmits as u };","map":{"version":3,"names":["useSelectableProps","useStatefulProps","useLoadingProps","useValidationProps","arrayValue","type","String","Boolean","Object","Number","default","label","leftLabel","trueValue","falseValue","indeterminate","indeterminateValue","disabled","readonly","useSelectableEmits","useValidationEmits","checkDuplicates","props","values","push","hasDuplicates","Set","size","length","Error","useSelectable","emit","input","container","reset","withoutValidation","resetValidation","focus","_a","value","valueComputed","useStateful","computedError","computedErrorMessages","validate","validationAriaAttributes","useValidation","isFocused","useFocus","isElementRelated","element","includes","onBlur","event","target","relatedTarget","onFocus","isIndeterminate","computed","modelIsArray","isChecked","modelValue","toggleSelection","loading","Array","isArray","filter","option","concat"],"sources":["../../../../src/composables/useSelectable.ts"],"sourcesContent":["import { PropType, computed, SetupContext, ShallowRef, ExtractPropTypes } from 'vue'\n\nimport { useStateful, useStatefulProps, StatefulProps } from './useStateful'\nimport { useLoadingProps, LoadingProps } from './useLoading'\nimport { useValidation, useValidationProps, ValidationProps, useValidationEmits } from './useValidation'\nimport { useFocus } from './useFocus'\n\nexport type SelectableProps<V = any> = StatefulProps & LoadingProps & ExtractPropTypes<ValidationProps<V>> & {\n  arrayValue: V | undefined,\n  label: string,\n  leftLabel: boolean,\n  trueValue: any,\n  falseValue: any,\n  indeterminate: boolean,\n  indeterminateValue: V | null,\n  disabled: boolean,\n  readonly: boolean,\n}\n\nexport type Elements = {\n  input: ShallowRef<HTMLElement | undefined>,\n  label: ShallowRef<HTMLElement | undefined>,\n  container: ShallowRef<HTMLElement | undefined>,\n}\n\nexport const useSelectableProps = {\n  ...useStatefulProps,\n  ...useLoadingProps,\n  ...useValidationProps,\n  arrayValue: { type: [String, Boolean, Object, Number], default: undefined },\n  label: { type: String, default: '' },\n  leftLabel: { type: Boolean, default: false },\n  trueValue: { type: null, default: true },\n  falseValue: { type: null, default: false },\n  indeterminate: { type: Boolean, default: false },\n  indeterminateValue: { type: null as any as PropType<unknown>, default: null },\n  disabled: { type: Boolean, default: false },\n  readonly: { type: Boolean, default: false },\n}\n\nexport const useSelectableEmits = [...useValidationEmits, 'update:modelValue', 'focus', 'blur']\n\nconst checkDuplicates = (props: SelectableProps) => {\n  // Just validating state values.\n  const values: unknown[] = [props.falseValue, props.trueValue]\n\n  if (props.indeterminate) {\n    values.push(props.indeterminateValue)\n  }\n\n  const hasDuplicates = new Set(values).size !== values.length\n\n  if (hasDuplicates) {\n    throw new Error('falseValue, trueValue, indeterminateValue props should have strictly different values, which is not the case.')\n  }\n}\n\nexport const useSelectable = (\n  props: SelectableProps,\n  emit: SetupContext['emit'],\n  { input, label, container }: Elements,\n) => {\n  checkDuplicates(props)\n\n  /** @public */\n  const reset = () => withoutValidation(() => {\n    emit('update:modelValue', false)\n    resetValidation()\n  })\n\n  const focus = () => {\n    input.value?.focus()\n  }\n\n  const { valueComputed } = useStateful(props, emit)\n\n  const {\n    computedError,\n    computedErrorMessages,\n    validate,\n    validationAriaAttributes,\n    withoutValidation,\n    resetValidation,\n  } = useValidation(props, emit, { reset, focus, value: valueComputed })\n  const { isFocused } = useFocus()\n\n  const isElementRelated = (element: HTMLElement | undefined) => {\n    return !!element && [label.value, container.value].includes(element)\n  }\n  const onBlur = (event: FocusEvent) => {\n    if ((input.value === event.target) && !isElementRelated(event.relatedTarget as HTMLElement)) {\n      isFocused.value = false\n      validate()\n      emit('blur', event)\n    }\n  }\n  const onFocus = (event: FocusEvent) => {\n    isFocused.value = true\n    emit('focus', event)\n  }\n\n  const isIndeterminate = computed(() => props.indeterminate && valueComputed.value === props.indeterminateValue)\n  const modelIsArray = computed(() => props.arrayValue !== undefined && props.arrayValue !== null)\n  const isChecked = computed(() => {\n    if (modelIsArray.value) {\n      return (props.modelValue as unknown[])?.includes(props.arrayValue)\n    }\n\n    return valueComputed.value === props.trueValue\n  })\n  const toggleSelection = () => {\n    if (props.readonly || props.disabled || props.loading) {\n      return\n    }\n\n    // For array access we pretend computedValue does not exist and use modelValue + emit input directly.\n    if (modelIsArray.value) {\n      if (!props.modelValue) {\n        emit('update:modelValue', [props.arrayValue])\n      } else if (!Array.isArray(props.modelValue)) {\n        emit('update:modelValue', props.modelValue === props.arrayValue ? [] : [props.modelValue, props.arrayValue])\n      } else if (props.modelValue.includes(props.arrayValue)) {\n        emit('update:modelValue', props.modelValue.filter((option) => option !== props.arrayValue))\n      } else {\n        emit('update:modelValue', props.modelValue.concat(props.arrayValue))\n      }\n      return\n    }\n\n    if (props.indeterminate) {\n      if (isIndeterminate.value) {\n        valueComputed.value = props.trueValue\n      } else if (isChecked.value) {\n        valueComputed.value = props.falseValue\n      } else {\n        // unchecked\n        valueComputed.value = props.indeterminateValue\n      }\n      return\n    }\n\n    if (isChecked.value) {\n      valueComputed.value = props.falseValue\n    } else {\n      valueComputed.value = props.trueValue\n    }\n  }\n\n  return {\n    isChecked,\n    isIndeterminate,\n    onBlur,\n    onFocus,\n    toggleSelection,\n    reset,\n    focus,\n    computedError,\n    computedErrorMessages,\n    validationAriaAttributes,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}