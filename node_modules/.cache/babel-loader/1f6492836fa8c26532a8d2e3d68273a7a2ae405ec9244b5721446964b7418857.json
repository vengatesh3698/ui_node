{"ast":null,"code":"const isMatchRegex = (str, regex) => {\n  return regex.test(str);\n};\nconst regexGroupsValues = (str, regex) => {\n  if (typeof regex !== \"string\" && regex.global) {\n    return [...str.matchAll(regex)].map(g => g.slice(1));\n  }\n  const match = str.match(regex) || [];\n  if (!match) {\n    return [];\n  }\n  if (match.length > 1) {\n    return match.slice(1);\n  }\n  return match;\n};\nexport { isMatchRegex as i, regexGroupsValues as r };","map":{"version":3,"names":["isMatchRegex","str","regex","test","regexGroupsValues","global","matchAll","map","g","slice","match","length"],"sources":["../../../../../../src/services/icon/utils/regex.ts"],"sourcesContent":["export const isMatchRegex = (str: string, regex: RegExp) => {\n  return regex.test(str)\n}\n\n/**\n * Return values from regex groups\n * @example\n * ```\n * \"fa-phone-o\", /fa-(.*)-(.*)/ -> [\"phone\", \"o\"]\n * \"any string\", /(.*)/ -> [\"any string\"]\n * \"global regex test\", /global (regex) (test)/g -> [['regex', 'test']]\n * ```\n */\nexport const regexGroupsValues = (str: string, regex: RegExp | string): string[] | string[][] => {\n  if (typeof regex !== 'string' && regex.global) {\n    // Global regex can return multiple matches array. So we need to map this all matches and remove non group values.\n    return [...str.matchAll(regex)].map(g => g.slice(1))\n  }\n\n  const match = str.match(regex) || []\n  if (!match) { return [] }\n  /**\n   * If there is groups in result - we need to slice first match\n   * ```\n   * \"test\".match(/(s)/)\n   * > Array [ \"s\", \"s\" ]\n   * ```\n   */\n  if (match.length > 1) { return match.slice(1) }\n\n  return match\n}\n"],"mappings":"AAAa,MAAAA,YAAA,GAAeA,CAACC,GAAA,EAAaC,KAAA,KAAkB;EACnD,OAAAA,KAAA,CAAMC,IAAA,CAAKF,GAAG;AACvB;AAWa,MAAAG,iBAAA,GAAoBA,CAACH,GAAA,EAAaC,KAAA,KAAkD;EAC/F,IAAI,OAAOA,KAAA,KAAU,YAAYA,KAAA,CAAMG,MAAA,EAAQ;IAE7C,OAAO,CAAC,GAAGJ,GAAA,CAAIK,QAAA,CAASJ,KAAK,CAAC,EAAEK,GAAA,CAASC,CAAA,IAAAA,CAAA,CAAEC,KAAA,CAAM,CAAC,CAAC;EACrD;EAEA,MAAMC,KAAA,GAAQT,GAAA,CAAIS,KAAA,CAAMR,KAAK,KAAK;EAClC,IAAI,CAACQ,KAAA,EAAO;IAAE,OAAO;EAAG;EAQpB,IAAAA,KAAA,CAAMC,MAAA,GAAS,GAAG;IAAS,OAAAD,KAAA,CAAMD,KAAA,CAAM,CAAC;EAAE;EAEvC,OAAAC,KAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}