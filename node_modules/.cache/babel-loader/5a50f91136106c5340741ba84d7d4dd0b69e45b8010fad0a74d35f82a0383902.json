{"ast":null,"code":"import { _ as _sfc_main } from \"./VaInput.vue_vue_type_script_lang-ea001f4d.mjs\";\nimport { resolveComponent, openBlock, createBlock, mergeProps, createSlots, withCtx, withModifiers, withKeys, createCommentVNode, renderSlot, normalizeProps, guardReactiveProps, createElementBlock, renderList } from \"vue\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper-cc2b3d55.mjs\";\nconst _hoisted_1 = [\"value\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_icon = resolveComponent(\"va-icon\");\n  const _component_VaTextarea = resolveComponent(\"VaTextarea\");\n  const _component_va_input_wrapper = resolveComponent(\"va-input-wrapper\");\n  return openBlock(), createBlock(_component_va_input_wrapper, mergeProps(_ctx.fieldListeners, {\n    class: [\"va-input\", _ctx.$attrs.class],\n    style: _ctx.$attrs.style,\n    color: _ctx.$props.color,\n    background: _ctx.$props.background,\n    readonly: _ctx.$props.readonly,\n    disabled: _ctx.$props.disabled,\n    success: _ctx.$props.success,\n    messages: _ctx.$props.messages,\n    loading: _ctx.$props.loading || _ctx.isLoading,\n    error: _ctx.computedError,\n    \"error-messages\": _ctx.computedErrorMessages,\n    \"error-count\": _ctx.errorCount,\n    label: _ctx.$props.label,\n    bordered: _ctx.$props.bordered,\n    outline: _ctx.$props.outline,\n    requiredMark: _ctx.$props.requiredMark,\n    focused: _ctx.isFocused,\n    \"counter-value\": _ctx.valueLengthComputed,\n    \"max-length\": _ctx.$props.maxLength,\n    onClick: _ctx.focus\n  }), createSlots({\n    icon: withCtx(slotScope => [_ctx.canBeCleared ? (openBlock(), createBlock(_component_va_icon, mergeProps({\n      key: 0,\n      role: \"button\",\n      \"aria-label\": _ctx.tp(_ctx.$props.ariaResetLabel),\n      tabindex: _ctx.tabIndexComputed\n    }, _ctx.clearIconProps, {\n      onClick: withModifiers(_ctx.reset, [\"stop\"]),\n      onKeydown: [withKeys(withModifiers(_ctx.reset, [\"stop\"]), [\"enter\"]), withKeys(withModifiers(_ctx.reset, [\"stop\"]), [\"space\"])]\n    }), null, 16, [\"aria-label\", \"tabindex\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"\", true), _ctx.$props.loading ? (openBlock(), createBlock(_component_va_icon, {\n      key: 1,\n      color: _ctx.$props.color,\n      size: \"small\",\n      name: \"va-loading\",\n      spin: \"counter-clockwise\"\n    }, null, 8, [\"color\"])) : createCommentVNode(\"\", true), renderSlot(_ctx.$slots, \"icon\", normalizeProps(guardReactiveProps(slotScope)))]),\n    default: withCtx(() => [_ctx.type === \"textarea\" && !_ctx.$slots.content ? (openBlock(), createBlock(_component_VaTextarea, mergeProps({\n      key: 0,\n      ref: \"input\"\n    }, {\n      ..._ctx.computedChildAttributes,\n      ..._ctx.textareaProps,\n      ..._ctx.inputEvents\n    }, {\n      class: \"va-input__content__input\"\n    }), null, 16)) : !_ctx.$slots.content ? (openBlock(), createElementBlock(\"input\", mergeProps({\n      key: 1,\n      ref: \"input\",\n      class: \"va-input__content__input\"\n    }, {\n      ..._ctx.computedInputAttributes,\n      ..._ctx.inputEvents\n    }, {\n      value: _ctx.computedValue\n    }), null, 16, _hoisted_1)) : createCommentVNode(\"\", true)]),\n    _: 2\n  }, [renderList(_ctx.filterSlots, name => {\n    return {\n      name,\n      fn: withCtx(slotScope => [renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotScope)))])\n    };\n  })]), 1040, [\"class\", \"style\", \"color\", \"background\", \"readonly\", \"disabled\", \"success\", \"messages\", \"loading\", \"error\", \"error-messages\", \"error-count\", \"label\", \"bordered\", \"outline\", \"requiredMark\", \"focused\", \"counter-value\", \"max-length\", \"onClick\"]);\n}\nconst _VaInput = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { _VaInput as _ };","map":{"version":3,"names":["resolveComponent","openBlock","createBlock","_component_va_input_wrapper","mergeProps","_ctx","fieldListeners","class","$attrs","style","color","$props","background","readonly","disabled","success","messages","loading","isLoading","error","computedError","computedErrorMessages","errorCount","label","bordered","outline","requiredMark","focused","isFocused","valueLengthComputed","maxLength","onClick","focus","createSlots","icon","withCtx","slotScope","canBeCleared","_component_va_icon","key","role","tp","ariaResetLabel","tabindex","tabIndexComputed","clearIconProps","withModifiers","reset","onKeydown","withKeys","createCommentVNode","size","name","spin","renderSlot","$slots","normalizeProps","guardReactiveProps","default","type","content","_component_VaTextarea","ref","computedChildAttributes","textareaProps","inputEvents","createElementBlock","filterSlots"],"sources":["../../../../../src/components/va-input/VaInput.vue"],"sourcesContent":["<template>\n  <va-input-wrapper\n    v-bind=\"fieldListeners\"\n    class=\"va-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    :color=\"$props.color\"\n    :background=\"$props.background\"\n    :readonly=\"$props.readonly\"\n    :disabled=\"$props.disabled\"\n    :success=\"$props.success\"\n    :messages=\"$props.messages\"\n    :loading=\"$props.loading || isLoading\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n    :label=\"$props.label\"\n    :bordered=\"$props.bordered\"\n    :outline=\"$props.outline\"\n    :requiredMark=\"$props.requiredMark\"\n    :focused=\"isFocused\"\n    :counter-value=\"valueLengthComputed\"\n    :max-length=\"$props.maxLength\"\n    @click=\"focus\"\n  >\n    <!-- Simply proxy slots to VaInputWrapper -->\n    <template\n      v-for=\"name in filterSlots\"\n      :key=\"name\"\n      v-slot:[name]=\"slotScope\"\n    >\n      <slot :name=\"name\" v-bind=\"slotScope\" />\n    </template>\n\n    <template #icon=\"slotScope\">\n      <va-icon\n        v-if=\"canBeCleared\"\n        role=\"button\"\n        :aria-label=\"tp($props.ariaResetLabel)\"\n        :tabindex=\"tabIndexComputed\"\n        v-bind=\"clearIconProps\"\n        @click.stop=\"reset\"\n        @keydown.enter.stop=\"reset\"\n        @keydown.space.stop=\"reset\"\n      />\n      <va-icon\n        v-if=\"$props.loading\"\n        :color=\"$props.color\"\n        size=\"small\"\n        name=\"va-loading\"\n        spin=\"counter-clockwise\"\n      />\n      <slot name=\"icon\" v-bind=\"slotScope\" />\n    </template>\n\n    <VaTextarea\n      v-if=\"type === 'textarea' && !$slots.content\"\n      ref=\"input\"\n      v-bind=\"{ ...computedChildAttributes, ...textareaProps, ...inputEvents }\"\n      class=\"va-input__content__input\"\n    />\n\n    <input\n      v-else-if=\"!$slots.content\"\n      ref=\"input\"\n      class=\"va-input__content__input\"\n      v-bind=\"{ ...computedInputAttributes, ...inputEvents }\"\n      :value=\"computedValue\"\n    >\n  </va-input-wrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, shallowRef, toRefs } from 'vue'\nimport omit from 'lodash/omit.js'\nimport pick from 'lodash/pick.js'\n\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\n\nimport {\n  useComponentPresetProp,\n  useFormFieldProps,\n  useValidation, useValidationProps, useValidationEmits, ValidationProps,\n  useEmitProxy,\n  useClearable, useClearableProps, useClearableEmits,\n  useFocusDeep,\n  useTranslation,\n  useStateful, useStatefulProps, useStatefulEmits,\n} from '../../composables'\nimport { useCleave, useCleaveProps } from './hooks/useCleave'\n\nimport type { AnyStringPropType } from '../../utils/types/prop-type'\n\nimport VaInputWrapper from './components/VaInputWrapper/VaInputWrapper.vue'\nimport VaTextarea from './components/VaTextarea/VaTextarea.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport { focusElement, blurElement } from '../../utils/focus'\nimport { unwrapEl } from '../../utils/unwrapEl'\n\nconst VaTextareaProps = extractComponentProps(VaTextarea)\n\nconst { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(\n  ['change', 'keyup', 'keypress', 'keydown', 'focus', 'blur'],\n)\n\nconst { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([\n  'click',\n  'click-prepend',\n  'click-append',\n  'click-prepend-inner',\n  'click-append-inner',\n])\n\nexport default defineComponent({\n  name: 'VaInput',\n\n  components: { VaInputWrapper, VaTextarea, VaIcon },\n\n  props: {\n    ...useFormFieldProps,\n    ...useValidationProps as ValidationProps<string>,\n    ...useClearableProps,\n    ...useCleaveProps,\n    ...VaTextareaProps,\n    ...useComponentPresetProp,\n    ...useStatefulProps,\n\n    // input\n    placeholder: { type: String, default: '' },\n    tabindex: { type: [String, Number], default: 0 },\n    modelValue: { type: [String, Number] },\n    label: { type: String, default: '' },\n    type: { type: String as AnyStringPropType<'textarea' | 'text' | 'password'>, default: 'text' },\n    loading: { type: Boolean, default: false },\n    inputClass: { type: String, default: '' },\n    pattern: { type: String },\n    inputmode: { type: String, default: 'text' },\n    ariaLabel: { type: String, default: undefined },\n    counter: { type: Boolean, default: false },\n    maxLength: { type: Number, default: undefined },\n\n    // style\n    color: { type: String, default: 'primary' },\n    background: { type: String, default: 'background-element' },\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    requiredMark: { type: Boolean, default: false },\n    ariaResetLabel: { type: String, default: '$t:reset' },\n  },\n\n  emits: [\n    'update:modelValue',\n    ...useValidationEmits,\n    ...useClearableEmits,\n    ...createInputEmits(),\n    ...createFieldEmits(),\n    ...useStatefulEmits,\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = shallowRef<HTMLInputElement | typeof VaTextarea>()\n\n    const { valueComputed } = useStateful(props, emit, 'modelValue', { defaultValue: '' })\n\n    const isFocused = useFocusDeep()\n\n    const reset = () => withoutValidation(() => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n      resetValidation()\n    })\n\n    const focus = () => {\n      focusElement(unwrapEl(input.value))\n    }\n\n    const blur = () => {\n      blurElement(unwrapEl(input.value))\n    }\n\n    const filterSlots = computed(() => {\n      const iconSlot = ['icon']\n      return Object.keys(slots).filter(slot => !iconSlot.includes(slot))\n    })\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners: validationListeners,\n      validationAriaAttributes,\n      isLoading,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus, value: valueComputed })\n\n    const { modelValue } = toRefs(props)\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, modelValue, input, computedError)\n\n    /** Use cleave only if this component is input, because it will break. */\n    const computedCleaveTarget = computed(() => props.type === 'textarea'\n      ? undefined\n      : input.value as HTMLInputElement | undefined)\n\n    const { computedValue, onInput } = useCleave(computedCleaveTarget, props, valueComputed)\n\n    const inputListeners = createInputListeners(emit)\n\n    /** Combine EmitProxy events with validation events to avoid events overriding */\n    const onFocus = (e: Event) => {\n      inputListeners.onFocus(e)\n      validationListeners.onFocus()\n    }\n\n    const onBlur = (e: Event) => {\n      inputListeners.onBlur(e)\n      validationListeners.onBlur()\n    }\n\n    const inputEvents = {\n      ...inputListeners,\n      onFocus,\n      onBlur,\n      onInput,\n    }\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex)\n\n    const computedChildAttributes = computed(() => ({\n      'aria-label': props.ariaLabel || props.label,\n      'aria-required': props.requiredMark,\n      tabindex: tabIndexComputed.value,\n      class: props.inputClass,\n      'aria-disabled': props.disabled,\n      'aria-readonly': props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit(attrs, ['class', 'style']),\n    }) as InputHTMLAttributes)\n\n    const computedInputAttributes = computed(() => ({\n      ...computedChildAttributes.value,\n      ...pick(props, ['type', 'disabled', 'readonly', 'placeholder', 'pattern', 'inputmode', 'minlength', 'maxlength']),\n    }) as InputHTMLAttributes)\n\n    const valueLengthComputed = computed(() =>\n      props.counter && typeof computedValue.value === 'string' ? computedValue.value.length : undefined,\n    )\n\n    return {\n      ...useTranslation(),\n      input,\n      inputEvents,\n      isLoading,\n\n      valueLengthComputed,\n      computedChildAttributes,\n      computedInputAttributes,\n      textareaProps: filterComponentProps(VaTextareaProps),\n      computedValue,\n      tabIndexComputed,\n\n      // Validations\n      computedError,\n      computedErrorMessages,\n      isFocused,\n\n      // Icon\n      canBeCleared,\n      clearIconProps,\n\n      fieldListeners: createFieldListeners(emit),\n      filterSlots,\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}