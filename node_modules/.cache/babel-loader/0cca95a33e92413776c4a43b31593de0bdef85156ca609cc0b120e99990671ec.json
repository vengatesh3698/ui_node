{"ast":null,"code":"import { c as cloneDeep } from \"../../../vendor-fff696df.mjs\";\nimport { ref, getCurrentInstance } from \"vue\";\nimport { g as getBreakpointDefaultConfig } from \"../breakpoint/index-a161fafe.mjs\";\nimport { g as getCurrentApp } from \"../current-app-1538613c.mjs\";\nimport { m as mergeDeep } from \"../../utils/merge-deep-d17b3b27.mjs\";\nimport { g as getColorsClassesDefaultConfig } from \"../colors-classes/config/default-8e89f3af.mjs\";\nimport { g as getColorDefaultConfig } from \"../color/config/default-600f4ff8.mjs\";\nimport { g as getIconDefaultConfig } from \"../icon/config/default-497a393a.mjs\";\nimport { g as getComponentsDefaultConfig } from \"../component-config/config/default-796edf79.mjs\";\nimport { g as getI18nConfigDefaults } from \"../i18n/config/default-aecde942.mjs\";\nconst GLOBAL_CONFIG = Symbol(\"GLOBAL_CONFIG\");\nconst getDefaultConfig = () => ({\n  colors: getColorDefaultConfig(),\n  icons: getIconDefaultConfig(),\n  components: getComponentsDefaultConfig(),\n  breakpoint: getBreakpointDefaultConfig(),\n  i18n: getI18nConfigDefaults(),\n  colorsClasses: getColorsClassesDefaultConfig(),\n  /**\n   * global config variable to pass nuxt-link component to vuestic-ui via @vuestic/nuxt\n   * TODO: give a try to integrate inertia js router components via this option\n   * TODO: if this try won't be success, may be remake to provide/inject\n   */\n  routerComponent: void 0\n});\nconst createGlobalConfig = (defaultConfig = {}) => {\n  const globalConfig = ref(mergeDeep(getDefaultConfig(), defaultConfig));\n  const getGlobalConfig = () => globalConfig.value;\n  const setGlobalConfig = updater => {\n    const config = typeof updater === \"function\" ? updater(globalConfig.value) : updater;\n    globalConfig.value = cloneDeep(config);\n  };\n  const mergeGlobalConfig = updater => {\n    const config = typeof updater === \"function\" ? updater(globalConfig.value) : updater;\n    globalConfig.value = mergeDeep(cloneDeep(globalConfig.value), config);\n  };\n  return {\n    getGlobalConfig,\n    setGlobalConfig,\n    mergeGlobalConfig,\n    globalConfig\n  };\n};\nconst provideForCurrentApp = provide => {\n  var _a, _b;\n  const provides = ((_a = getCurrentInstance()) == null ? void 0 : _a.appContext.provides) || ((_b = getCurrentApp()) == null ? void 0 : _b._context.provides);\n  if (!provides) {\n    throw new Error(\"Vue app not found for provide\");\n  }\n  provides[GLOBAL_CONFIG] = provide;\n  return provide;\n};\nexport { GLOBAL_CONFIG as G, createGlobalConfig as c, provideForCurrentApp as p };","map":{"version":3,"names":["GLOBAL_CONFIG","Symbol","getDefaultConfig","colors","getColorDefaultConfig","icons","getIconDefaultConfig","components","getComponentsDefaultConfig","breakpoint","getBreakpointDefaultConfig","i18n","getI18nConfigDefaults","colorsClasses","getColorsClassesDefaultConfig","routerComponent","createGlobalConfig","defaultConfig","globalConfig","ref","mergeDeep","getGlobalConfig","value","setGlobalConfig","updater","config","cloneDeep","mergeGlobalConfig","provideForCurrentApp","provide","provides","_a","getCurrentInstance","appContext","_b","getCurrentApp","_context","Error"],"sources":["../../../../../src/services/global-config/global-config.ts"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep.js'\nimport { ref, getCurrentInstance, Ref } from 'vue'\nimport { GlobalConfig, GlobalConfigUpdater, PartialGlobalConfig, ProvidedGlobalConfig } from './types'\nimport { getComponentsDefaultConfig } from '../component-config'\nimport { getIconDefaultConfig } from '../icon'\nimport { getColorDefaultConfig } from '../color'\nimport { getI18nConfigDefaults } from '../i18n'\nimport { getBreakpointDefaultConfig } from '../breakpoint'\nimport { getGlobalProperty } from '../vue-plugin/utils'\nimport { getCurrentApp, inject } from '../current-app'\nimport { mergeDeep } from '../../utils/merge-deep'\nimport { getColorsClassesDefaultConfig } from '../colors-classes/config/default'\n\nexport const GLOBAL_CONFIG = Symbol('GLOBAL_CONFIG')\n\nconst getDefaultConfig = () => ({\n  colors: getColorDefaultConfig(),\n  icons: getIconDefaultConfig(),\n  components: getComponentsDefaultConfig(),\n  breakpoint: getBreakpointDefaultConfig(),\n  i18n: getI18nConfigDefaults(),\n  colorsClasses: getColorsClassesDefaultConfig(),\n  /**\n   * global config variable to pass nuxt-link component to vuestic-ui via @vuestic/nuxt\n   * TODO: give a try to integrate inertia js router components via this option\n   * TODO: if this try won't be success, may be remake to provide/inject\n   */\n  routerComponent: undefined,\n})\n\nexport const createGlobalConfig = (defaultConfig: PartialGlobalConfig = {}) => {\n  const globalConfig = ref<GlobalConfig>(mergeDeep(getDefaultConfig(), defaultConfig)) as Ref<GlobalConfig>\n\n  const getGlobalConfig = (): GlobalConfig => globalConfig.value\n  const setGlobalConfig = (updater: GlobalConfig | GlobalConfigUpdater<GlobalConfig>) => {\n    const config = typeof updater === 'function' ? updater(globalConfig.value) : updater\n    globalConfig.value = cloneDeep(config)\n  }\n\n  const mergeGlobalConfig = (updater: PartialGlobalConfig | GlobalConfigUpdater<PartialGlobalConfig>) => {\n    const config = typeof updater === 'function' ? updater(globalConfig.value as PartialGlobalConfig) : updater\n    globalConfig.value = mergeDeep(cloneDeep(globalConfig.value), config)\n  }\n\n  return {\n    getGlobalConfig,\n    setGlobalConfig,\n    mergeGlobalConfig,\n    globalConfig,\n  }\n}\n\nexport const provideForCurrentApp = <T>(provide: T) => {\n  const provides = getCurrentInstance()?.appContext.provides || getCurrentApp()?._context.provides\n\n  if (!provides) { throw new Error('Vue app not found for provide') }\n\n  provides[GLOBAL_CONFIG] = provide\n\n  return provide\n}\n\nexport { useGlobalConfig } from '../../composables/useGlobalConfig'\n\nexport * from './types'\n"],"mappings":";;;;;;;;;;AAaa,MAAAA,aAAA,GAAgBC,MAAA,CAAO,eAAe;AAEnD,MAAMC,gBAAA,GAAmBA,CAAA,MAAO;EAC9BC,MAAA,EAAQC,qBAAA,CAAsB;EAC9BC,KAAA,EAAOC,oBAAA,CAAqB;EAC5BC,UAAA,EAAYC,0BAAA,CAA2B;EACvCC,UAAA,EAAYC,0BAAA,CAA2B;EACvCC,IAAA,EAAMC,qBAAA,CAAsB;EAC5BC,aAAA,EAAeC,6BAAA,CAA8B;EAAA;AAAA;AAAA;AAAA;AAAA;EAM7CC,eAAA,EAAiB;AACnB;AAEO,MAAMC,kBAAA,GAAqBA,CAACC,aAAA,GAAqC,OAAO;EAC7E,MAAMC,YAAA,GAAeC,GAAA,CAAkBC,SAAA,CAAUlB,gBAAA,CAAiB,GAAGe,aAAa,CAAC;EAE7E,MAAAI,eAAA,GAAkBA,CAAA,KAAoBH,YAAA,CAAaI,KAAA;EACnD,MAAAC,eAAA,GAAmBC,OAAA,IAA8D;IACrF,MAAMC,MAAA,GAAS,OAAOD,OAAA,KAAY,aAAaA,OAAA,CAAQN,YAAA,CAAaI,KAAK,IAAIE,OAAA;IAChEN,YAAA,CAAAI,KAAA,GAAQI,SAAA,CAAUD,MAAM;EAAA;EAGjC,MAAAE,iBAAA,GAAqBH,OAAA,IAA4E;IACrG,MAAMC,MAAA,GAAS,OAAOD,OAAA,KAAY,aAAaA,OAAA,CAAQN,YAAA,CAAaI,KAA4B,IAAIE,OAAA;IACpGN,YAAA,CAAaI,KAAA,GAAQF,SAAA,CAAUM,SAAA,CAAUR,YAAA,CAAaI,KAAK,GAAGG,MAAM;EAAA;EAG/D;IACLJ,eAAA;IACAE,eAAA;IACAI,iBAAA;IACAT;EAAA;AAEJ;AAEa,MAAAU,oBAAA,GAA2BC,OAAA,IAAe;;EACrD,MAAMC,QAAA,KAAWC,EAAA,GAAAC,kBAAA,CAAmB,MAAnB,gBAAAD,EAAA,CAAsBE,UAAA,CAAWH,QAAA,OAAYI,EAAA,GAAAC,aAAA,uBAAAD,EAAA,CAAiBE,QAAA,CAASN,QAAA;EAExF,IAAI,CAACA,QAAA,EAAU;IAAQ,UAAIO,KAAA,CAAM,+BAA+B;EAAE;EAElEP,QAAA,CAAS9B,aAAa,IAAI6B,OAAA;EAEnB,OAAAA,OAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}