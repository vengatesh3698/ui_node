{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getCurrentInstance } from \"vue\";\nimport { c as createToastInstance, a as closeById, b as closeAllNotifications } from \"../toast-d06a3cc6.mjs\";\nconst useToast = () => {\n  var _a;\n  const appContext = (_a = getCurrentInstance()) == null ? void 0 : _a.appContext;\n  const createdInThisSetupContext = [];\n  const init = options => {\n    const id = createToastInstance(options, appContext);\n    if (id) {\n      createdInThisSetupContext.push(id);\n    }\n    return id;\n  };\n  const close = id => closeById(id);\n  const closeAll = (allApps = false) => closeAllNotifications(allApps ? void 0 : appContext);\n  const closeAllCreatedInThisHook = () => {\n    createdInThisSetupContext.forEach(id => closeById(id));\n  };\n  return {\n    init,\n    close,\n    closeAll,\n    closeAllCreatedInThisHook\n  };\n};\nexport { useToast as u };","map":{"version":3,"names":["useToast","appContext","_a","getCurrentInstance","createdInThisSetupContext","init","options","id","createToastInstance","push","close","closeById","closeAll","allApps","closeAllNotifications","closeAllCreatedInThisHook","forEach"],"sources":["../../../../../../src/components/va-toast/hooks/useToast.ts"],"sourcesContent":["import { getCurrentInstance } from 'vue'\n\nimport { createToastInstance, closeById, closeAllNotifications, NotificationOptions } from '../toast'\n\n/** This hook can be used without plugin used */\nexport const useToast = () => {\n  const appContext = getCurrentInstance()?.appContext\n\n  const createdInThisSetupContext: string[] = []\n\n  /**\n   * @param options can be options object or message string\n   */\n  const init = (options: string | NotificationOptions) => {\n    const id = createToastInstance(options, appContext)\n\n    if (id) { createdInThisSetupContext.push(id) }\n\n    return id\n  }\n\n  const close = (id: string) => closeById(id)\n\n  /**\n   * Closes all VaToast instances in current App instance.\n   * @param allApps if you have multiple vue apps on page, set allApps to true to close it for all apps.\n   */\n  const closeAll = (allApps = false) => closeAllNotifications(allApps ? undefined : appContext)\n\n  /** Use this method if you need to close only toasts that created with this hook */\n  const closeAllCreatedInThisHook = () => {\n    createdInThisSetupContext.forEach((id) => closeById(id))\n  }\n\n  return {\n    init, close, closeAll, closeAllCreatedInThisHook,\n  }\n}\n"],"mappings":";;;AAKO,MAAMA,QAAA,GAAWA,CAAA,KAAM;;EACtB,MAAAC,UAAA,IAAaC,EAAA,GAAAC,kBAAA,CAAsB,MAAtB,gBAAAD,EAAA,CAAsBD,UAAA;EAEzC,MAAMG,yBAAA,GAAsC;EAKtC,MAAAC,IAAA,GAAQC,OAAA,IAA0C;IAChD,MAAAC,EAAA,GAAKC,mBAAA,CAAoBF,OAAA,EAASL,UAAU;IAElD,IAAIM,EAAA,EAAI;MAAEH,yBAAA,CAA0BK,IAAA,CAAKF,EAAE;IAAE;IAEtC,OAAAA,EAAA;EAAA;EAGT,MAAMG,KAAA,GAASH,EAAA,IAAeI,SAAA,CAAUJ,EAAE;EAM1C,MAAMK,QAAA,GAAWA,CAACC,OAAA,GAAU,UAAUC,qBAAA,CAAsBD,OAAA,GAAU,SAAYZ,UAAU;EAG5F,MAAMc,yBAAA,GAA4BA,CAAA,KAAM;IACtCX,yBAAA,CAA0BY,OAAA,CAAST,EAAA,IAAOI,SAAA,CAAUJ,EAAE,CAAC;EAAA;EAGlD;IACLF,IAAA;IAAMK,KAAA;IAAOE,QAAA;IAAUG;EAAA;AAE3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}