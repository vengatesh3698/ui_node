{"ast":null,"code":"import { i as inject } from \"../services/current-app-1538613c.mjs\";\nimport { c as createGlobalConfig, p as provideForCurrentApp, G as GLOBAL_CONFIG } from \"../services/global-config/global-config-5a68b2b2.mjs\";\nfunction useGlobalConfig() {\n  let injected = inject(GLOBAL_CONFIG);\n  if (!injected) {\n    injected = createGlobalConfig();\n    provideForCurrentApp(injected);\n  }\n  return injected;\n}\nexport { useGlobalConfig as u };","map":{"version":3,"names":["useGlobalConfig","injected","inject","GLOBAL_CONFIG","createGlobalConfig","provideForCurrentApp"],"sources":["../../../../src/composables/useGlobalConfig.ts"],"sourcesContent":["import { GLOBAL_CONFIG, ProvidedGlobalConfig, createGlobalConfig, provideForCurrentApp } from '../services/global-config'\nimport { getCurrentApp, inject } from '../services/current-app'\n\n/** Use this function if you don't want to throw error if hook used outside setup function by useGlobalConfig */\nexport function useGlobalConfig () {\n  let injected = inject<ProvidedGlobalConfig>(GLOBAL_CONFIG) as ProvidedGlobalConfig\n\n  if (!injected) {\n    injected = createGlobalConfig()\n\n    provideForCurrentApp(injected)\n  }\n\n  return injected\n}\n"],"mappings":";;AAIO,SAASA,gBAAA,EAAmB;EAC7B,IAAAC,QAAA,GAAWC,MAAA,CAA6BC,aAAa;EAEzD,IAAI,CAACF,QAAA,EAAU;IACbA,QAAA,GAAWG,kBAAA,CAAmB;IAE9BC,oBAAA,CAAqBJ,QAAQ;EAC/B;EAEO,OAAAA,QAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}