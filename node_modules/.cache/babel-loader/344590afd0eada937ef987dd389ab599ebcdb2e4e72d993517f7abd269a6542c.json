{"ast":null,"code":"import { _ as _sfc_main } from \"./VaButtonToggle.vue_vue_type_script_lang-92dcbc2d.mjs\";\nimport { resolveComponent, openBlock, createBlock, mergeProps, withCtx, createElementBlock, Fragment, renderList, createTextVNode, toDisplayString } from \"vue\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper-cc2b3d55.mjs\";\nconst VaButtonToggle_vue_vue_type_style_index_0_lang = \"\";\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_button = resolveComponent(\"va-button\");\n  const _component_va_button_group = resolveComponent(\"va-button-group\");\n  return openBlock(), createBlock(_component_va_button_group, mergeProps({\n    class: \"va-button-toggle\"\n  }, _ctx.buttonGroupPropsComputed), {\n    default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, option => {\n      return openBlock(), createBlock(_component_va_button, mergeProps({\n        key: _ctx.getTrackBy(option),\n        \"aria-pressed\": _ctx.isToggled(option)\n      }, _ctx.getButtonProps(option), {\n        onClick: $event => _ctx.changeValue(option)\n      }), {\n        default: withCtx(() => [createTextVNode(toDisplayString(_ctx.getText(option)), 1)]),\n        _: 2\n      }, 1040, [\"aria-pressed\", \"onClick\"]);\n    }), 128))]),\n    _: 1\n  }, 16);\n}\nconst _VaButtonToggle = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { _VaButtonToggle as _ };","map":{"version":3,"names":["resolveComponent","_component_va_button_group","mergeProps","class","_ctx","buttonGroupPropsComputed","default","withCtx","openBlock","createElementBlock","Fragment","renderList","options","option","createBlock","_component_va_button","key","getTrackBy","isToggled","getButtonProps","onClick","$event","changeValue"],"sources":["../../../../../src/components/va-button-toggle/VaButtonToggle.vue"],"sourcesContent":["<template>\n  <va-button-group\n    class=\"va-button-toggle\"\n    v-bind=\"buttonGroupPropsComputed\"\n  >\n    <va-button\n      v-for=\"option in options\"\n      :key=\"getTrackBy(option)\"\n      :aria-pressed=\"isToggled(option)\"\n      v-bind.prop=\"getButtonProps(option)\"\n      @click=\"changeValue(option)\"\n    >\n      {{ getText(option) }}\n    </va-button>\n  </va-button-group>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\nimport omit from 'lodash/omit.js'\n\nimport { extractComponentProps } from '../../utils/component-options'\n\nimport { useComponentPresetProp, useColors, useSelectableList, useSelectableListProps } from '../../composables'\n\nimport { VaButton } from '../va-button'\nimport { VaButtonGroup } from '../va-button-group'\n\nimport type { ButtonOption } from './types'\nimport type { StringOrFunction } from '../../composables'\n\nconst VaButtonGroupProps = extractComponentProps(VaButtonGroup)\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    ...VaButtonGroupProps,\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    modelValue: { type: [String, Number, Boolean], default: '' },\n    options: {\n      type: Array as PropType<ButtonOption[]>,\n      required: true,\n    },\n    activeButtonTextColor: { type: String },\n    toggleColor: { type: String, default: '' },\n\n    textBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'label' },\n    valueBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'value' },\n  },\n\n  setup (props, { emit }) {\n    const { getText, getTrackBy } = useSelectableList(props)\n    const { getColor, shiftHSLAColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n\n    const isToggled = (value: any) => getTrackBy(value) === props.modelValue\n\n    const activeButtonColor = computed(() => {\n      if (props.toggleColor) { return getColor(props.toggleColor) }\n      return shiftHSLAColor(colorComputed.value, { l: props.plain ? -16 : -6 })\n    })\n\n    const activeButtonBackgroundOpacityComputed = computed(() => {\n      if (!props.preset || props.preset === 'default') { return {} }\n      return { backgroundOpacity: props.pressedOpacity }\n    })\n\n    const activeButtonPropsComputed = computed(() => ({\n      color: activeButtonColor.value,\n      textColor: props.activeButtonTextColor,\n      ...activeButtonBackgroundOpacityComputed.value,\n    }))\n\n    const getButtonProps = (option: ButtonOption = {} as ButtonOption) => {\n      const iconsProps = { icon: option.icon, iconRight: option.iconRight }\n\n      if (!isToggled(option)) { return iconsProps }\n      return {\n        ...(isToggled(option) && activeButtonPropsComputed.value),\n        ...iconsProps,\n      }\n    }\n\n    const buttonGroupPropsComputed = computed(() =>\n      omit(props, ['modelValue', 'options', 'activeButtonTextColor', 'toggleColor']),\n    )\n\n    const changeValue = (value: any) => emit('update:modelValue', getTrackBy(value))\n\n    return {\n      buttonGroupPropsComputed,\n      getButtonProps,\n      changeValue,\n      isToggled,\n      getText,\n      getTrackBy,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import '../../styles/resources';\n\n.va-button-toggle {\n  .va-button {\n    @include keyboard-focus-outline($offset: -2px);\n\n    height: auto;\n  }\n}\n</style>\n"],"mappings":";;;;;;qCAcoBA,gBAAA,CAblB;kCAIEC,0BAAA,EAQYC,UAAA,CAPO;IAAAC,KAAA,EAAO;EAAX,GAAAC,IAAA,CAAAC,wBAAA;IAAAC,OAAA,EAAAC,OAAA,SAAAC,SAAA,CACP,IAAiB,GAAAC,kBAAA,CAAAC,QAAA,QAAAC,UAAA,CAAAP,IAAA,CAAAQ,OAAA,EAAAC,MAAA;MACtB,OAAAL,SAAA,IAAAM,WAAA,CAAwBC,oBAAA,EAAMb,UAAA;QAAAc,GAAA,EAClBZ,IAAA,CAAAa,UAAA,CAAeJ,MAAM;QACjC,gBAAKT,IAAA,CAAEc,SAAA,CAAYL,MAAA;MAAA,GAAAT,IAAA,CAAAe,cAAA,CAAAN,MAAA;QAECO,OAAA,EAAAC,MAAA,IAAAjB,IAAA,CAAAkB,WAAA,CAAAT,MAAA;MAAA;QAAAP,OAAA,EAAAC,OAAA,Q"},"metadata":{},"sourceType":"module","externalDependencies":[]}