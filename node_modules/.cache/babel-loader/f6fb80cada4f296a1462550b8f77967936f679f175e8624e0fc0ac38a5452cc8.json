{"ast":null,"code":"import { defineComponent, computed, h, Fragment } from \"vue\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset-0dfbd395.mjs\";\nimport { u as useLocalConfig, p as provideLocalConfig } from \"../../composables/useLocalConfig-624e8425.mjs\";\nimport { u as useGlobalConfigProvider } from \"./hooks/useGlobalConfigProvider-99d3d315.mjs\";\nimport { r as renderSlotNodes } from \"../../utils/headless-cf5c266f.mjs\";\nimport { u as useColors } from \"../../composables/useColors-f23d24ff.mjs\";\nconst CssVarsRenderer = defineComponent({\n  name: \"VaCssVarsRenderer\",\n  inheritAttrs: false,\n  setup(props, {\n    slots,\n    attrs\n  }) {\n    const {\n      colorsToCSSVariable,\n      colors\n    } = useColors();\n    const style = computed(() => {\n      return colorsToCSSVariable(colors);\n    });\n    return () => h(Fragment, attrs, renderSlotNodes(slots.default, {}, {\n      style: style.value\n    }) || void 0);\n  }\n});\nconst _sfc_main = defineComponent({\n  name: \"VaConfig\",\n  components: {\n    CssVarsRenderer\n  },\n  props: {\n    ...useComponentPresetProp,\n    components: {\n      type: Object,\n      default: () => ({})\n    },\n    colors: {\n      type: Object\n    },\n    i18n: {\n      type: Object\n    }\n  },\n  inheritAttrs: false,\n  setup(props) {\n    const prevChain = useLocalConfig();\n    const nextChain = computed(() => [...prevChain.value, props.components]);\n    provideLocalConfig(nextChain);\n    const newConfig = useGlobalConfigProvider(computed(() => {\n      const config = {};\n      if (props.colors) {\n        config.colors = props.colors;\n      }\n      if (props.i18n) {\n        config.i18n = props.i18n;\n      }\n      return config;\n    }));\n    const doRenderCssVars = computed(() => {\n      return Boolean(props.colors);\n    });\n    return {\n      newConfig,\n      doRenderCssVars\n    };\n  }\n});\nexport { _sfc_main as _ };","map":{"version":3,"names":["CssVarsRenderer","defineComponent","name","inheritAttrs","setup","props","slots","attrs","colorsToCSSVariable","colors","useColors","style","computed","h","Fragment","renderSlotNodes","default","value","_sfc_main","components","useComponentPresetProp","type","Object","i18n","prevChain","useLocalConfig","nextChain","provideLocalConfig","newConfig","useGlobalConfigProvider","config","doRenderCssVars","Boolean"],"sources":["../../../../../src/components/va-config/VaConfig.vue"],"sourcesContent":["<template>\n  <CssVarsRenderer v-if=\"doRenderCssVars\" v-bind=\"$attrs\">\n    <slot />\n  </CssVarsRenderer>\n  <slot v-else />\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, h, Fragment } from 'vue'\nimport { useComponentPresetProp } from '../../composables/useComponentPreset'\nimport { ComponentConfig } from '../../services/component-config'\n\nimport { provideLocalConfig, useLocalConfig } from '../../composables/useLocalConfig'\nimport { useGlobalConfigProvider } from './hooks/useGlobalConfigProvider'\nimport { PartialGlobalConfig } from '../../services/global-config'\nimport { renderSlotNodes } from '../../utils/headless'\nimport { useColors } from '../../composables'\n\nconst CssVarsRenderer = defineComponent({\n  name: 'VaCssVarsRenderer',\n\n  inheritAttrs: false,\n\n  setup (props, { slots, attrs }) {\n    const { colorsToCSSVariable, colors } = useColors()\n\n    const style = computed(() => {\n      return colorsToCSSVariable(colors)\n    })\n\n    return () => h(Fragment, attrs, renderSlotNodes(slots.default, {}, {\n      style: style.value,\n    }) || undefined)\n  },\n})\n\nexport default defineComponent({\n  name: 'VaConfig',\n  components: { CssVarsRenderer },\n  props: {\n    ...useComponentPresetProp,\n    components: { type: Object as PropType<ComponentConfig>, default: () => ({}) },\n    colors: { type: Object as PropType<PartialGlobalConfig['colors']> },\n    i18n: { type: Object as PropType<PartialGlobalConfig['i18n']> },\n  },\n  inheritAttrs: false,\n  setup (props) {\n    const prevChain = useLocalConfig()\n    // We want it to be an array and not a merged object for optimization purposes\n    const nextChain = computed(() => [...prevChain.value, props.components])\n\n    provideLocalConfig(nextChain)\n\n    const newConfig = useGlobalConfigProvider(computed(() => {\n      const config = {} as any\n\n      if (props.colors) {\n        config.colors = props.colors\n      }\n\n      if (props.i18n) {\n        config.i18n = props.i18n\n      }\n\n      return config\n    }))\n\n    const doRenderCssVars = computed(() => {\n      return Boolean(props.colors)\n    })\n\n    return {\n      newConfig,\n      doRenderCssVars,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;AAkBA,MAAMA,eAAA,GAAkBC,eAAA,CAAgB;EACtCC,IAAA,EAAM;EAENC,YAAA,EAAc;EAEdC,MAAOC,KAAA,EAAO;IAAEC,KAAA;IAAOC;EAAA,GAAS;IAC9B,MAAM;MAAEC,mBAAA;MAAqBC;IAAO,IAAIC,SAAA,CAAU;IAE5C,MAAAC,KAAA,GAAQC,QAAA,CAAS,MAAM;MAC3B,OAAOJ,mBAAA,CAAoBC,MAAM;IAAA,CAClC;IAEM,aAAMI,CAAA,CAAEC,QAAA,EAAUP,KAAA,EAAOQ,eAAA,CAAgBT,KAAA,CAAMU,OAAA,EAAS,IAAI;MACjEL,KAAA,EAAOA,KAAA,CAAMM;IAAA,CACd,KAAK,MAAS;EACjB;AACF,CAAC;AAED,MAAAC,SAAA,GAAejB,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EACNiB,UAAA,EAAY;IAAEnB;EAAgB;EAC9BK,KAAA,EAAO;IACL,GAAGe,sBAAA;IACHD,UAAA,EAAY;MAAEE,IAAA,EAAMC,MAAA;MAAqCN,OAAA,EAASA,CAAA,MAAO,CAAI;IAAA;IAC7EP,MAAA,EAAQ;MAAEY,IAAA,EAAMC;IAAkD;IAClEC,IAAA,EAAM;MAAEF,IAAA,EAAMC;IAAgD;EAChE;EACAnB,YAAA,EAAc;EACdC,MAAOC,KAAA,EAAO;IACZ,MAAMmB,SAAA,GAAYC,cAAA;IAEZ,MAAAC,SAAA,GAAYd,QAAA,CAAS,MAAM,CAAC,GAAGY,SAAA,CAAUP,KAAA,EAAOZ,KAAA,CAAMc,UAAU,CAAC;IAEvEQ,kBAAA,CAAmBD,SAAS;IAEtB,MAAAE,SAAA,GAAYC,uBAAA,CAAwBjB,QAAA,CAAS,MAAM;MACvD,MAAMkB,MAAA,GAAS;MAEf,IAAIzB,KAAA,CAAMI,MAAA,EAAQ;QAChBqB,MAAA,CAAOrB,MAAA,GAASJ,KAAA,CAAMI,MAAA;MACxB;MAEA,IAAIJ,KAAA,CAAMkB,IAAA,EAAM;QACdO,MAAA,CAAOP,IAAA,GAAOlB,KAAA,CAAMkB,IAAA;MACtB;MAEO,OAAAO,MAAA;IACR,EAAC;IAEI,MAAAC,eAAA,GAAkBnB,QAAA,CAAS,MAAM;MAC9B,OAAAoB,OAAA,CAAQ3B,KAAA,CAAMI,MAAM;IAAA,CAC5B;IAEM;MACLmB,SAAA;MACAG;IAAA;EAEJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}