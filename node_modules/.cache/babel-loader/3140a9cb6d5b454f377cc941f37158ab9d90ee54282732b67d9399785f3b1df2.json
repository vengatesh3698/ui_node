{"ast":null,"code":"import { defineComponent, computed } from \"vue\";\nimport { V as VaIcon } from \"../../va-icon/index-0ebbc0f2.mjs\";\nimport { V as VaCheckbox } from \"../../va-checkbox/index-18feaacf.mjs\";\nimport { u as useStylableProps, a as useStylable } from \"../hooks/useStylable-d0944e31.mjs\";\nimport { u as useTranslation } from \"../../../composables/useTranslation-acf7d88d.mjs\";\nconst _sfc_main = defineComponent({\n  name: \"VaDataTableThRow\",\n  components: {\n    VaIcon,\n    VaCheckbox\n  },\n  props: {\n    ...useStylableProps,\n    selectMode: {\n      type: String,\n      default: \"multiple\"\n    },\n    allRowsSelected: {\n      type: Boolean,\n      default: false\n    },\n    severalRowsSelected: {\n      type: Boolean,\n      default: false\n    },\n    columns: {\n      type: Array,\n      required: true\n    },\n    isFooter: {\n      type: Boolean,\n      default: false\n    },\n    sortBySync: {\n      type: String,\n      required: true\n    },\n    sortingOrderIconName: {\n      type: String,\n      required: true\n    },\n    sortingOrderSync: {\n      type: String,\n      default: null\n    },\n    ariaSelectAllRowsLabel: {\n      type: String,\n      default: \"$t:selectAllRows\"\n    },\n    ariaSortColumnByLabel: {\n      type: String,\n      default: \"$t:sortColumnBy\"\n    }\n  },\n  emits: [\"toggleBulkSelection\", \"toggleSorting\"],\n  setup(props, {\n    emit\n  }) {\n    const {\n      t,\n      tp\n    } = useTranslation();\n    const {\n      getFooterCSSVariables,\n      getHeaderCSSVariables,\n      getClass,\n      getStyle\n    } = useStylable(props);\n    const getAriaAttributes = column => {\n      const ariaSort = props.sortingOrderSync && props.sortBySync === column.name ? props.sortingOrderSync === \"asc\" ? \"ascending\" : \"descending\" : \"none\";\n      const ariaLabel = column.sortable ? tp(props.ariaSortColumnByLabel, {\n        name: column.label\n      }) : void 0;\n      return {\n        \"aria-sort\": ariaSort,\n        \"aria-label\": ariaLabel\n      };\n    };\n    const sortByColumn = column => {\n      if (props.isFooter && !props.allowFooterSorting || !column.sortable) {\n        return;\n      }\n      emit(\"toggleSorting\", column);\n    };\n    const toggleBulkSelection = () => emit(\"toggleBulkSelection\");\n    const getColumnStyles = column => {\n      return [props.isFooter ? getFooterCSSVariables(column) : getHeaderCSSVariables(column), getStyle(column.thStyle)];\n    };\n    const slotNameComputed = computed(() => props.isFooter ? \"footer\" : \"header\");\n    const multiplySelectAvailable = computed(() => props.selectMode === \"multiple\");\n    return {\n      tp,\n      getClass,\n      sortByColumn,\n      getColumnStyles,\n      slotNameComputed,\n      getAriaAttributes,\n      toggleBulkSelection,\n      multiplySelectAvailable\n    };\n  }\n});\nexport { _sfc_main as _ };\nimport '../../../../VaDataTableThRow.css';","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","VaIcon","VaCheckbox","props","useStylableProps","selectMode","type","String","default","allRowsSelected","Boolean","severalRowsSelected","columns","Array","required","isFooter","sortBySync","sortingOrderIconName","sortingOrderSync","ariaSelectAllRowsLabel","ariaSortColumnByLabel","emits","setup","emit","t","tp","useTranslation","getFooterCSSVariables","getHeaderCSSVariables","getClass","getStyle","useStylable","getAriaAttributes","column","ariaSort","ariaLabel","sortable","label","sortByColumn","allowFooterSorting","toggleBulkSelection","getColumnStyles","thStyle","slotNameComputed","computed","multiplySelectAvailable"],"sources":["../../../../../../src/components/va-data-table/components/VaDataTableThRow.vue"],"sourcesContent":["<template>\n  <tr class=\"va-data-table__table-tr\">\n    <th\n      v-if=\"$props.selectable\"\n      scope=\"col\"\n      class=\"va-data-table__table-th va-data-table__table-cell-select\"\n    >\n      <va-checkbox\n        v-if=\"multiplySelectAvailable\"\n        class=\"va-data-table__table-cell-checkbox\"\n        :model-value=\"$props.severalRowsSelected ? 'idl' : $props.allRowsSelected\"\n        :aria-label=\"tp($props.ariaSelectAllRowsLabel)\"\n        :true-value=\"true\"\n        :false-value=\"false\"\n        :color=\"$props.selectedColor\"\n        indeterminate-value=\"idl\"\n        indeterminate\n        @update:model-value=\"toggleBulkSelection\"\n      />\n    </th>\n\n    <th\n      v-for=\"column in columns\"\n      :key=\"column.name\"\n      scope=\"col\"\n      class=\"va-data-table__table-th\"\n      :title=\"column.thTitle\"\n      :class=\"getClass(column.thClass)\"\n      :style=\"getColumnStyles(column)\"\n      v-bind=\"getAriaAttributes(column)\"\n      @click.exact=\"sortByColumn(column)\"\n      @keydown.enter.stop=\"sortByColumn(column)\"\n    >\n      <div class=\"va-data-table__table-th-wrapper\">\n        <span v-if=\"`${slotNameComputed}(${column.name})` in $slots\">\n          <slot\n            :name=\"`${slotNameComputed}(${column.name})`\"\n            v-bind=\"{ label: column.label, key: column.key }\"\n          />\n        </span>\n\n        <slot\n          v-else\n          :name=\"slotNameComputed\"\n          v-bind=\"{ label: column.label, key: column.key }\"\n        >\n          <span>{{ column.label }}</span>\n        </slot>\n\n          <va-icon\n            v-if=\"column.sortable\"\n            class=\"va-data-table__table-th-sorting-icon\"\n            :class=\"{ active: sortBySync === column.name && sortingOrderSync !== null }\"\n            size=\"small\"\n            :role=\"column.sortable ? 'button' : undefined\"\n            :tabindex=\"column.sortable ? 0 : -1\"\n            :name=\"sortingOrderIconName\"\n            @selectstart.prevent=\"() => {}\"\n          />\n        </div>\n    </th>\n  </tr>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { VaIcon } from '../../va-icon'\nimport { VaCheckbox } from '../../va-checkbox'\n\nimport { useStylable, useStylableProps } from '../hooks/useStylable'\n\nimport type { TSortIcon } from '../hooks/useSortable'\n\nimport { useTranslation } from '../../../composables'\n\nimport {\n  DataTableSortingOrder,\n  DataTableSelectMode,\n  DataTableColumnInternal,\n} from '../types'\n\nexport default defineComponent({\n  name: 'VaDataTableThRow',\n\n  components: { VaIcon, VaCheckbox },\n\n  props: {\n    ...useStylableProps,\n    selectMode: { type: String as PropType<DataTableSelectMode>, default: 'multiple' },\n    allRowsSelected: { type: Boolean, default: false },\n    severalRowsSelected: { type: Boolean, default: false },\n\n    columns: { type: Array as PropType<DataTableColumnInternal[]>, required: true },\n\n    isFooter: { type: Boolean, default: false },\n\n    sortBySync: { type: String, required: true },\n    sortingOrderIconName: { type: String as PropType<TSortIcon>, required: true },\n    sortingOrderSync: { type: String as PropType<DataTableSortingOrder | null>, default: null },\n\n    ariaSelectAllRowsLabel: { type: String, default: '$t:selectAllRows' },\n    ariaSortColumnByLabel: { type: String, default: '$t:sortColumnBy' },\n  },\n\n  emits: [\n    'toggleBulkSelection',\n    'toggleSorting',\n  ],\n\n  setup (props, { emit }) {\n    const { t, tp } = useTranslation()\n\n    const {\n      getFooterCSSVariables,\n      getHeaderCSSVariables,\n      getClass,\n      getStyle,\n    } = useStylable(props)\n\n    const getAriaAttributes = (column: DataTableColumnInternal) => {\n      const ariaSort = (props.sortingOrderSync && props.sortBySync === column.name\n        ? props.sortingOrderSync === 'asc' ? 'ascending' : 'descending'\n        : 'none') as 'none' | 'ascending' | 'descending'\n\n      const ariaLabel = column.sortable ? tp(props.ariaSortColumnByLabel, { name: column.label }) : undefined\n\n      return {\n        'aria-sort': ariaSort,\n        'aria-label': ariaLabel,\n      }\n    }\n\n    const sortByColumn = (column: DataTableColumnInternal) => {\n      if ((props.isFooter && !props.allowFooterSorting) || !column.sortable) { return }\n\n      emit('toggleSorting', column)\n    }\n\n    const toggleBulkSelection = () => emit('toggleBulkSelection')\n\n    const getColumnStyles = (column: DataTableColumnInternal) => {\n      return [props.isFooter ? getFooterCSSVariables(column) : getHeaderCSSVariables(column), getStyle(column.thStyle)]\n    }\n\n    const slotNameComputed = computed(() => props.isFooter ? 'footer' : 'header')\n\n    const multiplySelectAvailable = computed(() => props.selectMode === 'multiple')\n\n    return {\n      tp,\n      getClass,\n      sortByColumn,\n      getColumnStyles,\n      slotNameComputed,\n      getAriaAttributes,\n      toggleBulkSelection,\n      multiplySelectAvailable,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../styles/resources/index.scss\";\n@import \"../variables\";\n\n.va-data-table .va-data-table__table {\n  .va-data-table__table-th {\n    padding: var(--va-data-table-cell-padding);\n    width: var(--va-data-table-width);\n    min-width: var(--va-data-table-width);\n    text-align: var(--va-data-table-align);\n    vertical-align: var(--va-data-table-vertical-align);\n    font-size: var(--va-data-table-thead-font-size);\n    line-height: var(--va-data-table-thead-line-height);\n    font-weight: var(--va-data-table-thead-font-weight);\n    text-transform: var(--va-data-table-thead-text-transform);\n    letter-spacing: var(--va-data-table-thead-letter-spacing);\n    cursor: var(--va-data-table-cursor);\n\n    .va-data-table__table-th-wrapper {\n      display: flex;\n      align-items: center;\n\n      @include keyboard-focus-outline($offset: 2px);\n    }\n\n    .va-data-table__table-th-sorting-icon {\n      opacity: 0;\n      user-select: none;\n      pointer-events: none;\n\n      &.active {\n        opacity: 1;\n        pointer-events: initial;\n      }\n\n      &:focus-visible {\n        opacity: 1;\n      }\n    }\n\n    span {\n      flex-grow: 1;\n    }\n\n    &:hover {\n      .va-data-table__table-th-sorting-icon:not(.active, :focus-visible) {\n        opacity: var(--va-data-table-hover-th-opacity);\n      }\n    }\n  }\n}\n</style>\n"],"mappings":";;;;;AAkFA,MAAAA,SAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EAENC,UAAA,EAAY;IAAEC,MAAA;IAAQC;EAAW;EAEjCC,KAAA,EAAO;IACL,GAAGC,gBAAA;IACHC,UAAA,EAAY;MAAEC,IAAA,EAAMC,MAAA;MAAyCC,OAAA,EAAS;IAAW;IACjFC,eAAA,EAAiB;MAAEH,IAAA,EAAMI,OAAA;MAASF,OAAA,EAAS;IAAM;IACjDG,mBAAA,EAAqB;MAAEL,IAAA,EAAMI,OAAA;MAASF,OAAA,EAAS;IAAM;IAErDI,OAAA,EAAS;MAAEN,IAAA,EAAMO,KAAA;MAA8CC,QAAA,EAAU;IAAK;IAE9EC,QAAA,EAAU;MAAET,IAAA,EAAMI,OAAA;MAASF,OAAA,EAAS;IAAM;IAE1CQ,UAAA,EAAY;MAAEV,IAAA,EAAMC,MAAA;MAAQO,QAAA,EAAU;IAAK;IAC3CG,oBAAA,EAAsB;MAAEX,IAAA,EAAMC,MAAA;MAA+BO,QAAA,EAAU;IAAK;IAC5EI,gBAAA,EAAkB;MAAEZ,IAAA,EAAMC,MAAA;MAAkDC,OAAA,EAAS;IAAK;IAE1FW,sBAAA,EAAwB;MAAEb,IAAA,EAAMC,MAAA;MAAQC,OAAA,EAAS;IAAmB;IACpEY,qBAAA,EAAuB;MAAEd,IAAA,EAAMC,MAAA;MAAQC,OAAA,EAAS;IAAkB;EACpE;EAEAa,KAAA,EAAO,CACL,uBACA,gBACF;EAEAC,MAAOnB,KAAA,EAAO;IAAEoB;EAAA,GAAQ;IACtB,MAAM;MAAEC,CAAA;MAAGC;IAAG,IAAIC,cAAA,CAAe;IAE3B;MACJC,qBAAA;MACAC,qBAAA;MACAC,QAAA;MACAC;IAAA,IACEC,WAAA,CAAY5B,KAAK;IAEf,MAAA6B,iBAAA,GAAqBC,MAAA,IAAoC;MACvD,MAAAC,QAAA,GAAY/B,KAAA,CAAMe,gBAAA,IAAoBf,KAAA,CAAMa,UAAA,KAAeiB,MAAA,CAAOlC,IAAA,GACpEI,KAAA,CAAMe,gBAAA,KAAqB,QAAQ,cAAc,eACjD;MAEE,MAAAiB,SAAA,GAAYF,MAAA,CAAOG,QAAA,GAAWX,EAAA,CAAGtB,KAAA,CAAMiB,qBAAA,EAAuB;QAAErB,IAAA,EAAMkC,MAAA,CAAOI;MAAA,CAAO,IAAI;MAEvF;QACL,aAAaH,QAAA;QACb,cAAcC;MAAA;IAChB;IAGI,MAAAG,YAAA,GAAgBL,MAAA,IAAoC;MACxD,IAAK9B,KAAA,CAAMY,QAAA,IAAY,CAACZ,KAAA,CAAMoC,kBAAA,IAAuB,CAACN,MAAA,CAAOG,QAAA,EAAU;QAAE;MAAO;MAEhFb,IAAA,CAAK,iBAAiBU,MAAM;IAAA;IAGxB,MAAAO,mBAAA,GAAsBA,CAAA,KAAMjB,IAAA,CAAK,qBAAqB;IAEtD,MAAAkB,eAAA,GAAmBR,MAAA,IAAoC;MAC3D,OAAO,CAAC9B,KAAA,CAAMY,QAAA,GAAWY,qBAAA,CAAsBM,MAAM,IAAIL,qBAAA,CAAsBK,MAAM,GAAGH,QAAA,CAASG,MAAA,CAAOS,OAAO,CAAC;IAAA;IAGlH,MAAMC,gBAAA,GAAmBC,QAAA,CAAS,MAAMzC,KAAA,CAAMY,QAAA,GAAW,WAAW,QAAQ;IAE5E,MAAM8B,uBAAA,GAA0BD,QAAA,CAAS,MAAMzC,KAAA,CAAME,UAAA,KAAe,UAAU;IAEvE;MACLoB,EAAA;MACAI,QAAA;MACAS,YAAA;MACAG,eAAA;MACAE,gBAAA;MACAX,iBAAA;MACAQ,mBAAA;MACAK;IAAA;EAEJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}