{"ast":null,"code":"import { shallowRef, onBeforeUpdate } from \"vue\";\nconst useObjectRefs = () => {\n  const itemRefs = shallowRef({});\n  const setItemRef = key => el => {\n    if (!el) {\n      return;\n    }\n    itemRefs.value[key] = el;\n    return String(key);\n  };\n  onBeforeUpdate(() => {\n    itemRefs.value = {};\n  });\n  return {\n    itemRefs,\n    setItemRef\n  };\n};\nexport { useObjectRefs as u };","map":{"version":3,"names":["useObjectRefs","itemRefs","shallowRef","setItemRef","key","el","value","String","onBeforeUpdate"],"sources":["../../../../src/composables/useObjectRefs.ts"],"sourcesContent":["import { shallowRef, onBeforeUpdate } from 'vue'\n\nimport type { TemplateRef } from './useArrayRefs'\n\n/**\n * @usage use setItemRef function as :ref property on v-for construction (or without v-for)\n * @link https://v3.vuejs.org/guide/migration/array-refs.html\n*/\nexport const useObjectRefs = () => {\n  const itemRefs = shallowRef<Record<string | number, TemplateRef>>({})\n\n  const setItemRef = (key: string | number) => (el: any) => {\n    if (!el) { return }\n\n    itemRefs.value[key] = el\n\n    return String(key)\n  }\n\n  onBeforeUpdate(() => { itemRefs.value = {} })\n\n  return { itemRefs, setItemRef }\n}\n"],"mappings":";AAQO,MAAMA,aAAA,GAAgBA,CAAA,KAAM;EAC3B,MAAAC,QAAA,GAAWC,UAAA,CAAiD,EAAE;EAEpE,MAAMC,UAAA,GAAcC,GAAA,IAA0BC,EAAA,IAAY;IACxD,IAAI,CAACA,EAAA,EAAI;MAAE;IAAO;IAETJ,QAAA,CAAAK,KAAA,CAAMF,GAAG,IAAIC,EAAA;IAEtB,OAAOE,MAAA,CAAOH,GAAG;EAAA;EAGnBI,cAAA,CAAe,MAAM;IAAEP,QAAA,CAASK,KAAA,GAAQ;EAAC,CAAG;EAErC;IAAEL,QAAA;IAAUE;EAAA;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}