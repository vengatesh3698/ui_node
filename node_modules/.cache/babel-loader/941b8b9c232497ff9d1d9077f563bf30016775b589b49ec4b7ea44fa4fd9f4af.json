{"ast":null,"code":"const getTopCoordinate = element => element.offsetTop;\nconst getBottomCoordinate = element => element.offsetTop + element.offsetHeight;\nconst getCenterCoordinate = element => element.offsetTop + element.offsetHeight / 2;\nconst getScrollTop = (element, scrollTarget, verticalAlignment) => {\n  const viewHeight = scrollTarget.offsetHeight;\n  const currentPosition = scrollTarget.scrollTop;\n  const top = getTopCoordinate(element) - scrollTarget.offsetTop;\n  const center = getCenterCoordinate(element) - scrollTarget.offsetTop;\n  const bottom = getBottomCoordinate(element) - scrollTarget.offsetTop;\n  if (verticalAlignment === \"start\") {\n    return top;\n  }\n  if (verticalAlignment === \"end\") {\n    return bottom - viewHeight;\n  }\n  if (verticalAlignment === \"center\") {\n    return center - viewHeight / 2;\n  }\n  if (verticalAlignment === \"any\") {\n    if (top - currentPosition < 0) {\n      return top;\n    }\n    if (bottom - currentPosition > viewHeight) {\n      return bottom - viewHeight;\n    }\n  }\n};\nconst scrollToElement = (element, options = {\n  scrollTarget: element.parentElement,\n  verticalAlignment: \"any\",\n  smooth: false\n}) => {\n  const scrollTarget = options.scrollTarget || element.parentElement;\n  const top = getScrollTop(element, scrollTarget, options.verticalAlignment);\n  if (top === void 0) {\n    return;\n  }\n  scrollTarget.scroll({\n    top,\n    behavior: options.smooth ? \"smooth\" : \"auto\"\n  });\n};\nexport { scrollToElement as s };","map":{"version":3,"names":["getTopCoordinate","element","offsetTop","getBottomCoordinate","offsetHeight","getCenterCoordinate","getScrollTop","scrollTarget","verticalAlignment","viewHeight","currentPosition","scrollTop","top","center","bottom","scrollToElement","options","parentElement","smooth","scroll","behavior"],"sources":["../../../../src/utils/scroll-to-element.ts"],"sourcesContent":["const getTopCoordinate = (element: HTMLElement) => element.offsetTop\nconst getBottomCoordinate = (element: HTMLElement) => element.offsetTop + element.offsetHeight\nconst getCenterCoordinate = (element: HTMLElement) => element.offsetTop + element.offsetHeight / 2\n\nconst getScrollTop = (element: HTMLElement, scrollTarget: HTMLElement, verticalAlignment?: 'start' | 'end' | 'center' | 'any') => {\n  const viewHeight = scrollTarget.offsetHeight\n  const currentPosition = scrollTarget.scrollTop\n  const top = getTopCoordinate(element) - scrollTarget.offsetTop\n  const center = getCenterCoordinate(element) - scrollTarget.offsetTop\n  const bottom = getBottomCoordinate(element) - scrollTarget.offsetTop\n\n  if (verticalAlignment === 'start') {\n    return top\n  }\n\n  if (verticalAlignment === 'end') {\n    return bottom - viewHeight\n  }\n\n  if (verticalAlignment === 'center') {\n    return center - viewHeight / 2\n  }\n\n  if (verticalAlignment === 'any') {\n    if (top - currentPosition < 0) {\n      return top\n    }\n\n    if (bottom - currentPosition > viewHeight) {\n      return bottom - viewHeight\n    }\n  }\n}\n\n/**\n * @param options.scrollTarget - element that will be scrolled\n */\nexport const scrollToElement = (element: HTMLElement, options: {\n  scrollTarget?: HTMLElement,\n  verticalAlignment?: 'start' | 'end' | 'center' | 'any',\n  smooth?: boolean,\n} = {\n  scrollTarget: element.parentElement!,\n  verticalAlignment: 'any',\n  smooth: false,\n}) => {\n  const scrollTarget = options.scrollTarget || element.parentElement!\n\n  const top = getScrollTop(element, scrollTarget, options.verticalAlignment)\n\n  if (top === undefined) { return }\n\n  scrollTarget.scroll({\n    top: top,\n    behavior: options.smooth ? 'smooth' : 'auto',\n  })\n}\n"],"mappings":"AAAA,MAAMA,gBAAA,GAAoBC,OAAA,IAAyBA,OAAA,CAAQC,SAAA;AAC3D,MAAMC,mBAAA,GAAuBF,OAAA,IAAyBA,OAAA,CAAQC,SAAA,GAAYD,OAAA,CAAQG,YAAA;AAClF,MAAMC,mBAAA,GAAuBJ,OAAA,IAAyBA,OAAA,CAAQC,SAAA,GAAYD,OAAA,CAAQG,YAAA,GAAe;AAEjG,MAAME,YAAA,GAAeA,CAACL,OAAA,EAAsBM,YAAA,EAA2BC,iBAAA,KAA2D;EAChI,MAAMC,UAAA,GAAaF,YAAA,CAAaH,YAAA;EAChC,MAAMM,eAAA,GAAkBH,YAAA,CAAaI,SAAA;EACrC,MAAMC,GAAA,GAAMZ,gBAAA,CAAiBC,OAAO,IAAIM,YAAA,CAAaL,SAAA;EACrD,MAAMW,MAAA,GAASR,mBAAA,CAAoBJ,OAAO,IAAIM,YAAA,CAAaL,SAAA;EAC3D,MAAMY,MAAA,GAASX,mBAAA,CAAoBF,OAAO,IAAIM,YAAA,CAAaL,SAAA;EAE3D,IAAIM,iBAAA,KAAsB,SAAS;IAC1B,OAAAI,GAAA;EACT;EAEA,IAAIJ,iBAAA,KAAsB,OAAO;IAC/B,OAAOM,MAAA,GAASL,UAAA;EAClB;EAEA,IAAID,iBAAA,KAAsB,UAAU;IAClC,OAAOK,MAAA,GAASJ,UAAA,GAAa;EAC/B;EAEA,IAAID,iBAAA,KAAsB,OAAO;IAC3B,IAAAI,GAAA,GAAMF,eAAA,GAAkB,GAAG;MACtB,OAAAE,GAAA;IACT;IAEI,IAAAE,MAAA,GAASJ,eAAA,GAAkBD,UAAA,EAAY;MACzC,OAAOK,MAAA,GAASL,UAAA;IAClB;EACF;AACF;AAKa,MAAAM,eAAA,GAAkBA,CAACd,OAAA,EAAsBe,OAAA,GAIlD;EACFT,YAAA,EAAcN,OAAA,CAAQgB,aAAA;EACtBT,iBAAA,EAAmB;EACnBU,MAAA,EAAQ;AACV,MAAM;EACE,MAAAX,YAAA,GAAeS,OAAA,CAAQT,YAAA,IAAgBN,OAAA,CAAQgB,aAAA;EAErD,MAAML,GAAA,GAAMN,YAAA,CAAaL,OAAA,EAASM,YAAA,EAAcS,OAAA,CAAQR,iBAAiB;EAEzE,IAAII,GAAA,KAAQ,QAAW;IAAE;EAAO;EAEhCL,YAAA,CAAaY,MAAA,CAAO;IAClBP,GAAA;IACAQ,QAAA,EAAUJ,OAAA,CAAQE,MAAA,GAAS,WAAW;EAAA,CACvC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}