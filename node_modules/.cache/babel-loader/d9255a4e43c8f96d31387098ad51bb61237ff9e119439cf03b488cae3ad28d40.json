{"ast":null,"code":"function normalizeProps(props) {\n  switch (true) {\n    case Array.isArray(props):\n      return props.reduce((acc, prop) => ({\n        ...acc,\n        [prop]: null\n      }), {});\n    case typeof props === \"object\" && props !== null:\n      return props;\n    default:\n      return {};\n  }\n}\nfunction mergeProps(to, from, optionsType = \"props\") {\n  const {\n    mixins,\n    extends: extendsOptions\n  } = from;\n  extendsOptions && mergeProps(to, extendsOptions, optionsType);\n  mixins && mixins.forEach(m => mergeProps(to, m, optionsType));\n  const props = normalizeProps(from[optionsType]);\n  for (const key in props) {\n    to[key] = props[key];\n  }\n}\nfunction getComponentOptions(component) {\n  if (component.options) {\n    return component.options;\n  }\n  if (component.__vccOpts || component.__b) {\n    return {\n      ...component.__vccOpts,\n      ...component.__b\n    };\n  }\n  return component;\n}\nfunction resolveProps(options, optionsType = \"props\") {\n  const mixins = options.mixins ?? [];\n  const extendsOptions = options.extends ?? [];\n  const result = {};\n  mergeProps(result, extendsOptions, optionsType);\n  for (let i = 0; i < mixins.length; i++) {\n    mergeProps(result, mixins[i], optionsType);\n  }\n  Object.assign(result, normalizeProps(options[optionsType]));\n  return result;\n}\nconst getComponentProps = component => {\n  return resolveProps(getComponentOptions(component));\n};\nexport { getComponentProps as g };","map":{"version":3,"names":["normalizeProps","props","Array","isArray","reduce","acc","prop","mergeProps","to","from","optionsType","mixins","extends","extendsOptions","forEach","m","key","getComponentOptions","component","options","__vccOpts","__b","resolveProps","result","i","length","Object","assign","getComponentProps"],"sources":["../../../../../src/utils/component-options/resolve-component-props.ts"],"sourcesContent":["import type { ComponentOptions } from 'vue'\nimport type { DefineComponentOptions, ExtractComponentProps } from './types'\n\nfunction normalizeProps (props: any) {\n  switch (true) {\n    case Array.isArray(props):\n      return props.reduce((acc: Record<string, unknown>, prop: string) => ({ ...acc, [prop]: null }), {})\n    case typeof props === 'object' && props !== null:\n      return props\n    default:\n      return {}\n  }\n}\n\nfunction mergeProps (to: Record<string, any>, from: Record<string, any>, optionsType = 'props') {\n  const { mixins, extends: extendsOptions } = from\n\n  extendsOptions && mergeProps(to, extendsOptions, optionsType)\n  mixins && mixins.forEach((m: any) => mergeProps(to, m, optionsType))\n\n  const props = normalizeProps(from[optionsType])\n\n  for (const key in props) {\n    to[key] = props[key]\n  }\n}\n\nfunction getComponentOptions (component: DefineComponentOptions): ComponentOptions {\n  if (component.options) {\n    return component.options\n  }\n\n  if (component.__vccOpts || component.__b) {\n    return { ...component.__vccOpts, ...component.__b }\n  }\n\n  return component\n}\n\nfunction resolveProps (options: any, optionsType = 'props') {\n  const mixins = options.mixins ?? []\n  const extendsOptions = options.extends ?? []\n  const result: Record<string, any> = {}\n\n  mergeProps(result, extendsOptions, optionsType)\n\n  for (let i = 0; i < mixins.length; i++) {\n    mergeProps(result, mixins[i], optionsType)\n  }\n\n  Object.assign(result, normalizeProps(options[optionsType]))\n\n  return result\n}\n\n/** Extract all component props, from mixins and VueClassComponent */\nexport const getComponentProps = <T extends DefineComponentOptions>(component: T) => {\n  return resolveProps(getComponentOptions(component)) as ExtractComponentProps<T>\n}\n"],"mappings":"AAGA,SAASA,eAAgBC,KAAA,EAAY;EACnC,QAAQ;IACN,KAAKC,KAAA,CAAMC,OAAA,CAAQF,KAAK;MACtB,OAAOA,KAAA,CAAMG,MAAA,CAAO,CAACC,GAAA,EAA8BC,IAAA,MAAkB;QAAE,GAAGD,GAAA;QAAK,CAACC,IAAI,GAAG;MAAA,IAAS,CAAE;IACpG,KAAK,OAAOL,KAAA,KAAU,YAAYA,KAAA,KAAU;MACnC,OAAAA,KAAA;IACT;MACE,OAAO;EACX;AACF;AAEA,SAASM,WAAYC,EAAA,EAAyBC,IAAA,EAA2BC,WAAA,GAAc,SAAS;EAC9F,MAAM;IAAEC,MAAA;IAAQC,OAAA,EAASC;EAAA,IAAmBJ,IAAA;EAE1BI,cAAA,IAAAN,UAAA,CAAWC,EAAA,EAAIK,cAAA,EAAgBH,WAAW;EAClDC,MAAA,IAAAA,MAAA,CAAOG,OAAA,CAASC,CAAA,IAAWR,UAAA,CAAWC,EAAA,EAAIO,CAAA,EAAGL,WAAW,CAAC;EAEnE,MAAMT,KAAA,GAAQD,cAAA,CAAeS,IAAA,CAAKC,WAAW,CAAC;EAE9C,WAAWM,GAAA,IAAOf,KAAA,EAAO;IACpBO,EAAA,CAAAQ,GAAG,IAAIf,KAAA,CAAMe,GAAG;EACrB;AACF;AAEA,SAASC,oBAAqBC,SAAA,EAAqD;EACjF,IAAIA,SAAA,CAAUC,OAAA,EAAS;IACrB,OAAOD,SAAA,CAAUC,OAAA;EACnB;EAEI,IAAAD,SAAA,CAAUE,SAAA,IAAaF,SAAA,CAAUG,GAAA,EAAK;IACxC,OAAO;MAAE,GAAGH,SAAA,CAAUE,SAAA;MAAW,GAAGF,SAAA,CAAUG;IAAI;EACpD;EAEO,OAAAH,SAAA;AACT;AAEA,SAASI,aAAcH,OAAA,EAAcT,WAAA,GAAc,SAAS;EACpD,MAAAC,MAAA,GAASQ,OAAA,CAAQR,MAAA,IAAU;EAC3B,MAAAE,cAAA,GAAiBM,OAAA,CAAQP,OAAA,IAAW;EAC1C,MAAMW,MAAA,GAA8B;EAEzBhB,UAAA,CAAAgB,MAAA,EAAQV,cAAA,EAAgBH,WAAW;EAE9C,SAASc,CAAA,GAAI,GAAGA,CAAA,GAAIb,MAAA,CAAOc,MAAA,EAAQD,CAAA,IAAK;IACtCjB,UAAA,CAAWgB,MAAA,EAAQZ,MAAA,CAAOa,CAAC,GAAGd,WAAW;EAC3C;EAEAgB,MAAA,CAAOC,MAAA,CAAOJ,MAAA,EAAQvB,cAAA,CAAemB,OAAA,CAAQT,WAAW,CAAC,CAAC;EAEnD,OAAAa,MAAA;AACT;AAGa,MAAAK,iBAAA,GAAuDV,SAAA,IAAiB;EAC5E,OAAAI,YAAA,CAAaL,mBAAA,CAAoBC,SAAS,CAAC;AACpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}