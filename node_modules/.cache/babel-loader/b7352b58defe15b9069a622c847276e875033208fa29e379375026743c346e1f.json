{"ast":null,"code":"import { _ as _sfc_main } from \"./VaSelectContent.vue_vue_type_script_lang-802efd6b.mjs\";\nimport { resolveComponent, openBlock, createElementBlock, Fragment, renderSlot, normalizeProps, mergeProps, renderList, toDisplayString, createTextVNode, createCommentVNode, withDirectives, createElementVNode, withKeys, withModifiers, vModelText, guardReactiveProps, createBlock } from \"vue\";\nimport { _ as _export_sfc } from \"../../../../../plugin-vue_export-helper-cc2b3d55.mjs\";\nconst VaSelectContent_vue_vue_type_style_index_0_lang = \"\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"va-select-content__autocomplete\"\n};\nconst _hoisted_2 = [\"placeholder\", \"disabled\", \"readonly\"];\nconst _hoisted_3 = {\n  key: 1,\n  class: \"va-select-content__placeholder\"\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_badge = resolveComponent(\"va-badge\");\n  const _component_va_icon = resolveComponent(\"va-icon\");\n  return openBlock(), createElementBlock(Fragment, null, [_ctx.$props.autocomplete ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [_ctx.$props.multiple || _ctx.$slots.content ? renderSlot(_ctx.$slots, \"content\", normalizeProps(mergeProps({\n    key: 0\n  }, {\n    value: _ctx.$props.value,\n    valueString: _ctx.$props.valueString,\n    tabindex: _ctx.$props.tabindex\n  })), () => [_ctx.value.length ? (openBlock(true), createElementBlock(Fragment, {\n    key: 0\n  }, renderList(_ctx.value, (option, index) => {\n    return openBlock(), createElementBlock(\"span\", {\n      key: _ctx.$props.getText(option)\n    }, toDisplayString(`${_ctx.$props.getText(option)}${index + 1 === _ctx.value.length ? \"\" : \", \"}`), 1);\n  }), 128)) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [createTextVNode(toDisplayString(_ctx.$props.valueString), 1)], 64))]) : createCommentVNode(\"\", true), withDirectives(createElementVNode(\"input\", {\n    ref: \"autocompleteInput\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.autocompleteInputValueComputed = $event),\n    placeholder: _ctx.$props.placeholder,\n    disabled: _ctx.$props.disabled,\n    readonly: _ctx.$props.readonly,\n    autocomplete: \"off\",\n    onKeydown: [_cache[1] || (_cache[1] = withKeys(withModifiers($event => _ctx.$emit(\"focus-prev\"), [\"stop\", \"prevent\"]), [\"up\"])), _cache[2] || (_cache[2] = withKeys(withModifiers($event => _ctx.$emit(\"focus-next\"), [\"stop\", \"prevent\"]), [\"down\"])), _cache[3] || (_cache[3] = withKeys(withModifiers($event => _ctx.$emit(\"select-option\"), [\"stop\", \"prevent\"]), [\"enter\"])), _cache[4] || (_cache[4] = (...args) => _ctx.handleBackspace && _ctx.handleBackspace(...args))]\n  }, null, 40, _hoisted_2), [[vModelText, _ctx.autocompleteInputValueComputed]])])) : _ctx.isPlaceholder ? (openBlock(), createElementBlock(\"span\", _hoisted_3, toDisplayString(_ctx.$props.placeholder), 1)) : renderSlot(_ctx.$slots, \"content\", normalizeProps(mergeProps({\n    key: 2\n  }, {\n    valueString: _ctx.$props.valueString,\n    value: _ctx.$props.value,\n    tabindex: _ctx.$props.tabindex\n  })), () => [createTextVNode(toDisplayString(_ctx.$props.valueString), 1)]), renderSlot(_ctx.$slots, \"hiddenOptionsBadge\", normalizeProps(guardReactiveProps({\n    amount: _ctx.$props.hiddenSelectedOptionsAmount,\n    isShown: _ctx.$props.isAllOptionsShown,\n    toggle: _ctx.toggleHiddenOptionsState\n  })), () => [_ctx.$props.hiddenSelectedOptionsAmount && !_ctx.$props.isAllOptionsShown ? (openBlock(), createBlock(_component_va_badge, {\n    key: 0,\n    class: \"va-select-content__state-icon\",\n    color: \"info\",\n    text: `+${_ctx.$props.hiddenSelectedOptionsAmount}`,\n    tabindex: _ctx.$props.tabindex,\n    onClick: withModifiers(_ctx.toggleHiddenOptionsState, [\"stop\"])\n  }, null, 8, [\"text\", \"tabindex\", \"onClick\"])) : createCommentVNode(\"\", true)]), renderSlot(_ctx.$slots, \"hideOptionsButton\", normalizeProps(guardReactiveProps({\n    isShown: _ctx.$props.isAllOptionsShown,\n    toggle: _ctx.toggleHiddenOptionsState\n  })), () => [_ctx.$props.isAllOptionsShown ? (openBlock(), createBlock(_component_va_icon, {\n    key: 0,\n    role: \"button\",\n    class: \"va-select-content__state-icon\",\n    size: \"small\",\n    name: \"reply\",\n    tabindex: _ctx.$props.tabindex,\n    onClick: withModifiers(_ctx.toggleHiddenOptionsState, [\"stop\"])\n  }, null, 8, [\"tabindex\", \"onClick\"])) : createCommentVNode(\"\", true)])], 64);\n}\nconst _VaSelectContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { _VaSelectContent as _ };","map":{"version":3,"names":["_hoisted_1","key","class","_hoisted_3","openBlock","createElementBlock","Fragment","_ctx","$props","autocomplete","multiple","$slots","content","renderSlot","normalizeProps","mergeProps","value","valueString","tabindex","length","renderList","option","index","getText","toDisplayString","createTextVNode","createCommentVNode","withDirectives","createElementVNode","ref","_cache","$event","autocompleteInputValueComputed","placeholder","disabled","readonly","onKeydown","$emit","withKeys","withModifiers","args","handleBackspace","isPlaceholder","guardReactiveProps","amount","hiddenSelectedOptionsAmount","isShown","isAllOptionsShown","toggle","toggleHiddenOptionsState","createBlock","_component_va_badge","color","text","onClick","_component_va_icon","role","size","name"],"sources":["../../../../../../../src/components/va-select/components/VaSelectContent/VaSelectContent.vue"],"sourcesContent":["<template>\n  <div\n    v-if=\"$props.autocomplete\"\n    class=\"va-select-content__autocomplete\"\n  >\n    <slot\n      v-if=\"$props.multiple || $slots.content\"\n      name=\"content\"\n      v-bind=\"{\n        value: $props.value,\n        valueString: $props.valueString,\n        tabindex: $props.tabindex,\n      }\"\n    >\n      <template v-if=\"value.length\">\n        <span\n          v-for=\"(option, index) in value\"\n          :key=\"$props.getText(option)\"\n        >\n          {{ `${$props.getText(option)}${index + 1 === value.length ? '' : ', '}` }}\n        </span>\n      </template>\n\n      <template v-else>\n        {{ $props.valueString }}\n      </template>\n    </slot>\n\n    <input\n      ref=\"autocompleteInput\"\n      v-model=\"autocompleteInputValueComputed\"\n      :placeholder=\"$props.placeholder\"\n      :disabled=\"$props.disabled\"\n      :readonly=\"$props.readonly\"\n      autocomplete=\"off\"\n      @keydown.up.stop.prevent=\"$emit('focus-prev')\"\n      @keydown.down.stop.prevent=\"$emit('focus-next')\"\n      @keydown.enter.stop.prevent=\"$emit('select-option')\"\n      @keydown=\"handleBackspace\"\n    />\n  </div>\n\n  <span\n    v-else-if=\"isPlaceholder\"\n    class=\"va-select-content__placeholder\"\n  >\n   {{ $props.placeholder }}\n  </span>\n\n  <slot\n    v-else\n    name=\"content\"\n    v-bind=\"{\n      valueString: $props.valueString,\n      value: $props.value,\n      tabindex: $props.tabindex,\n    }\"\n  >\n    {{ $props.valueString }}\n  </slot>\n\n  <slot\n    name=\"hiddenOptionsBadge\"\n    v-bind=\"{\n      amount: $props.hiddenSelectedOptionsAmount,\n      isShown: $props.isAllOptionsShown,\n      toggle: toggleHiddenOptionsState,\n    }\"\n  >\n    <va-badge\n      v-if=\"$props.hiddenSelectedOptionsAmount && !$props.isAllOptionsShown\"\n      class=\"va-select-content__state-icon\"\n      color=\"info\"\n      :text=\"`+${$props.hiddenSelectedOptionsAmount}`\"\n      :tabindex=\"$props.tabindex\"\n      @click.stop=\"toggleHiddenOptionsState\"\n    />\n  </slot>\n\n  <slot\n    name=\"hideOptionsButton\"\n    v-bind=\"{\n      isShown: $props.isAllOptionsShown,\n      toggle: toggleHiddenOptionsState,\n    }\"\n  >\n    <va-icon\n      v-if=\"$props.isAllOptionsShown\"\n      role=\"button\"\n      class=\"va-select-content__state-icon\"\n      size=\"small\"\n      name=\"reply\"\n      :tabindex=\"$props.tabindex\"\n      @click.stop=\"toggleHiddenOptionsState\"\n    />\n  </slot>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, toRefs, computed, watch, type PropType } from 'vue'\n\nimport { useFormFieldProps } from '../../../../composables'\n\nimport { VaBadge, VaIcon } from '../../../index'\n\nimport type { SelectOption } from '../../../index'\n\nexport default defineComponent({\n  name: 'VaSelectContent',\n\n  components: { VaBadge, VaIcon },\n\n  props: {\n    ...useFormFieldProps,\n\n    value: { type: Array as PropType<SelectOption[]>, required: true },\n    valueString: { type: String },\n    placeholder: { type: String, default: '' },\n    tabindex: { type: [String, Number], default: 0 },\n    hiddenSelectedOptionsAmount: { type: Number, default: 0 },\n    isAllOptionsShown: { type: Boolean, default: false },\n    autocomplete: { type: Boolean, default: false },\n    focused: { type: Boolean, default: false },\n    multiple: { type: Boolean, default: false },\n    getText: { type: Function as PropType<(option: SelectOption) => string>, required: true },\n    autocompleteInputValue: { type: String, default: '' },\n  },\n\n  emits: ['toggle-hidden', 'autocomplete-input', 'focus-prev', 'focus-next', 'select-option', 'delete-last-selected'],\n\n  setup (props, { emit }) {\n    const autocompleteInput = ref<HTMLInputElement>()\n\n    const isPlaceholder = computed(() => props.placeholder && !props.valueString)\n\n    const toggleHiddenOptionsState = () => emit('toggle-hidden')\n\n    const { value, focused } = toRefs(props)\n\n    const autocompleteInputValueComputed = computed({\n      get: () => props.autocompleteInputValue,\n      set: (v: string) => emit('autocomplete-input', v),\n    })\n\n    watch(focused, (newValue) => {\n      if (!props.autocomplete || !newValue) { return }\n\n      if (autocompleteInputValueComputed.value) {\n        // native select method doesn't work in mobile Safari, so we need this instead\n        autocompleteInput.value?.setSelectionRange(0, autocompleteInputValueComputed.value.length)\n      } else {\n        autocompleteInput.value?.focus()\n      }\n    })\n\n    const handleBackspace = (e: KeyboardEvent) => {\n      if (props.multiple && value.value.length && e.key === 'Backspace' && !autocompleteInputValueComputed.value) {\n        emit('delete-last-selected')\n      }\n    }\n\n    return {\n      isPlaceholder,\n      toggleHiddenOptionsState,\n      autocompleteInputValueComputed,\n      autocompleteInput,\n      handleBackspace,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import '../../variables';\n\n.va-select-content {\n  &__autocomplete {\n    display: flex;\n    flex-wrap: wrap;\n    gap: var(--va-select-content-autocomplete-gap);\n    color: var(--va-select-content-autocomplete-color);\n    font-size: var(--va-input-font-size);\n    line-height: var(--va-select-content-autocomplete-line-height);\n\n    & input {\n      flex: 1 1;\n    }\n  }\n\n  &__placeholder {\n    overflow: hidden !important;\n    flex: 1;\n    line-height: normal;\n    color: var(--va-input-placeholder-text-color);\n    text-overflow: ellipsis !important;\n    white-space: nowrap !important;\n  }\n\n  &__state-icon {\n    margin-left: var(--va-select-state-icon-margin-left);\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}