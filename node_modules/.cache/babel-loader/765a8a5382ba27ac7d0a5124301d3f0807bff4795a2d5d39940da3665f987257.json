{"ast":null,"code":"import { defineComponent, shallowRef, computed, nextTick } from \"vue\";\nimport { o as omit } from \"../../../vendor-fff696df.mjs\";\nimport { u as useTimeParser } from \"./hooks/time-text-parser-c4125ce5.mjs\";\nimport { u as useTimeFormatter } from \"./hooks/time-text-formatter-d801bbfb.mjs\";\nimport { _ as _VaTimePicker } from \"../va-time-picker/VaTimePicker-8f57da6c.mjs\";\nimport { V as VaIcon } from \"../va-icon/VaIcon-68debddc.mjs\";\nimport { V as VaDropdown } from \"../va-dropdown/index-2edb30e9.mjs\";\nimport { V as VaDropdownContent } from \"../va-dropdown/components/VaDropdownContent/index-d67c0ae9.mjs\";\nimport { V as VaInputWrapper } from \"../va-input/components/VaInputWrapper/VaInputWrapper-89658c86.mjs\";\nimport { e as extractComponentProps } from \"../../utils/component-options/extract-component-options-6b96d215.mjs\";\nimport { a as useFocusEmits, u as useFocus } from \"../../composables/useFocus-4393f76a.mjs\";\nimport { a as useValidationEmits, u as useValidationProps, b as useValidation } from \"../../composables/useValidation-a7c1fccc.mjs\";\nimport { a as useClearableEmits, u as useClearableProps, b as useClearable } from \"../../composables/useClearable-6c80b820.mjs\";\nimport { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from \"../../composables/useStateful-50e4a6b9.mjs\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset-0dfbd395.mjs\";\nimport { u as useSyncProp } from \"../../composables/useSyncProp-326abeda.mjs\";\nimport { f as filterComponentProps } from \"../../utils/component-options/filter-props-9727421a.mjs\";\nimport { u as useTranslation } from \"../../composables/useTranslation-acf7d88d.mjs\";\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper, [\"focused\", \"maxLength\", \"counterValue\"]);\nconst VaDropdownProps = extractComponentProps(VaDropdown, [\"keyboardNavigation\", \"innerAnchorSelector\", \"modelValue\"]);\nconst _sfc_main = defineComponent({\n  name: \"VaTimeInput\",\n  components: {\n    VaDropdown,\n    VaDropdownContent,\n    VaTimePicker: _VaTimePicker,\n    VaIcon,\n    VaInputWrapper\n  },\n  emits: [...useFocusEmits, ...useValidationEmits, ...useClearableEmits, ...useStatefulEmits, \"update:modelValue\", \"update:isOpen\"],\n  props: {\n    ...VaDropdownProps,\n    ...useComponentPresetProp,\n    ...useClearableProps,\n    ...VaInputWrapperProps,\n    ...extractComponentProps(_VaTimePicker),\n    ...useValidationProps,\n    ...useStatefulProps,\n    isOpen: {\n      type: Boolean,\n      default: void 0\n    },\n    closeOnContentClick: {\n      type: Boolean,\n      default: false\n    },\n    offset: {\n      ...VaDropdownProps.offset,\n      default: () => [2, 0]\n    },\n    placement: {\n      ...VaDropdownProps.placement,\n      default: \"bottom-start\"\n    },\n    modelValue: {\n      type: Date,\n      default: void 0\n    },\n    clearValue: {\n      type: Date,\n      default: void 0\n    },\n    format: {\n      type: Function\n    },\n    parse: {\n      type: Function\n    },\n    manualInput: {\n      type: Boolean,\n      default: false\n    },\n    leftIcon: {\n      type: Boolean,\n      default: false\n    },\n    icon: {\n      type: String,\n      default: \"schedule\"\n    },\n    ariaLabel: {\n      type: String,\n      default: \"$t:selectedTime\"\n    },\n    ariaResetLabel: {\n      type: String,\n      default: \"$t:resetTime\"\n    },\n    ariaToggleDropdownLabel: {\n      type: String,\n      default: \"$t:toggleDropdown\"\n    }\n  },\n  inheritAttrs: false,\n  setup(props, {\n    emit,\n    slots,\n    attrs\n  }) {\n    const input = shallowRef();\n    const timePicker = shallowRef();\n    const [isOpenSync] = useSyncProp(\"isOpen\", props, emit, false);\n    const {\n      valueComputed\n    } = useStateful(props, emit);\n    const {\n      parse,\n      isValid\n    } = useTimeParser(props);\n    const {\n      format\n    } = useTimeFormatter(props);\n    const valueText = computed(() => format(valueComputed.value || props.clearValue));\n    const doShowDropdown = computed({\n      get() {\n        if (props.disabled || props.readonly) {\n          return false;\n        }\n        return isOpenSync.value;\n      },\n      set(v) {\n        isOpenSync.value = v;\n        if (v) {\n          nextTick(() => {\n            var _a;\n            return (_a = timePicker.value) == null ? void 0 : _a.focus();\n          });\n        } else {\n          nextTick(() => {\n            var _a;\n            return (_a = input.value) == null ? void 0 : _a.focus();\n          });\n        }\n      }\n    });\n    const {\n      isFocused,\n      focus,\n      blur,\n      onFocus: focusListener,\n      onBlur: blurListener\n    } = useFocus(input);\n    const onInputTextChanged = e => {\n      var _a;\n      if (props.disabled) {\n        return;\n      }\n      const val = (_a = e.target) == null ? void 0 : _a.value;\n      if (!val) {\n        return reset();\n      }\n      const v = parse(val);\n      if (isValid.value && v) {\n        valueComputed.value = v;\n      } else {\n        valueComputed.value = void 0;\n        isValid.value = true;\n      }\n    };\n    const reset = () => withoutValidation(() => {\n      emit(\"update:modelValue\", props.clearValue);\n      emit(\"clear\");\n      resetValidation();\n    });\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners,\n      validationAriaAttributes,\n      withoutValidation,\n      resetValidation\n    } = useValidation(props, emit, {\n      reset,\n      focus,\n      value: valueComputed\n    });\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur\n    } = useClearable(props, valueText);\n    const canBeClearedComputed = computed(() => canBeCleared.value && valueText.value !== format(props.clearValue));\n    const filteredWrapperProps = filterComponentProps(VaInputWrapperProps);\n    const computedInputWrapperProps = computed(() => ({\n      ...filteredWrapperProps.value,\n      focused: isFocused.value,\n      error: computedError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput\n    }));\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        if (props.disabled) {\n          return;\n        }\n        focusListener();\n        if (props.readonly) {\n          return;\n        }\n        onFocus();\n        listeners.onFocus();\n      },\n      blur: () => {\n        if (props.disabled) {\n          return;\n        }\n        blurListener();\n        if (props.readonly) {\n          return;\n        }\n        onBlur();\n        listeners.onBlur();\n      }\n    }));\n    const filteredSlots = computed(() => {\n      const slotsWithIcons = [props.leftIcon && \"prependInner\", (!props.leftIcon || props.clearable) && \"icon\"];\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot));\n    });\n    const hideDropdown = () => {\n      doShowDropdown.value = false;\n    };\n    const showDropdown = (event, cancel, prevent) => {\n      doShowDropdown.value = true;\n    };\n    const checkProhibitedDropdownOpening = e => {\n      if (isOpenSync.value) {\n        return false;\n      }\n      if (props.disabled || props.readonly) {\n        return true;\n      }\n      return props.manualInput && (e == null ? void 0 : e.code) !== \"Space\";\n    };\n    const toggleDropdown = event => {\n      if (checkProhibitedDropdownOpening(event instanceof KeyboardEvent ? event : void 0)) {\n        return;\n      }\n      doShowDropdown.value = !doShowDropdown.value;\n    };\n    const cursorStyleComputed = computed(() => {\n      if (props.disabled) {\n        return {};\n      }\n      if (props.manualInput) {\n        return {\n          cursor: \"text\"\n        };\n      }\n      return {\n        cursor: \"pointer\"\n      };\n    });\n    const iconTabindexComputed = computed(() => props.disabled || props.readonly ? -1 : 0);\n    const iconProps = computed(() => ({\n      role: \"button\",\n      \"aria-hidden\": false,\n      size: \"small\",\n      name: props.icon,\n      color: props.color,\n      tabindex: iconTabindexComputed.value\n    }));\n    const {\n      tp\n    } = useTranslation();\n    const inputAttributesComputed = computed(() => ({\n      readonly: props.readonly || !props.manualInput,\n      disabled: props.disabled,\n      tabindex: props.disabled ? -1 : 0,\n      value: valueText.value,\n      \"aria-label\": props.label || tp(props.ariaLabel),\n      \"aria-required\": props.requiredMark,\n      \"aria-disabled\": props.disabled,\n      \"aria-readonly\": props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit(attrs, [\"class\", \"style\"])\n    }));\n    const filteredProps = filterComponentProps(VaDropdownProps);\n    const dropdownPropsComputed = computed(() => ({\n      ...filteredProps.value,\n      keyboardNavigation: true,\n      innerAnchorSelector: \".va-input-wrapper__field\"\n    }));\n    return {\n      tp,\n      input,\n      timePicker,\n      timePickerProps: filterComponentProps(extractComponentProps(_VaTimePicker)),\n      dropdownPropsComputed,\n      computedInputWrapperProps,\n      computedInputListeners,\n      isOpenSync,\n      doShowDropdown,\n      valueComputed,\n      valueText,\n      onInputTextChanged,\n      canBeClearedComputed,\n      iconProps,\n      clearIconProps,\n      filteredSlots,\n      inputAttributesComputed,\n      cursorStyleComputed,\n      hideDropdown,\n      showDropdown,\n      toggleDropdown,\n      reset,\n      focus,\n      blur\n    };\n  }\n});\nexport { _sfc_main as _ };\nimport '../../../VaTimeInput.css';","map":{"version":3,"names":["VaInputWrapperProps","extractComponentProps","VaInputWrapper","VaDropdownProps","VaDropdown","_sfc_main","defineComponent","name","components","VaDropdownContent","VaTimePicker","_VaTimePicker","VaIcon","emits","useFocusEmits","useValidationEmits","useClearableEmits","useStatefulEmits","props","useComponentPresetProp","useClearableProps","useValidationProps","useStatefulProps","isOpen","type","Boolean","default","closeOnContentClick","offset","placement","modelValue","Date","clearValue","format","Function","parse","manualInput","leftIcon","icon","String","ariaLabel","ariaResetLabel","ariaToggleDropdownLabel","inheritAttrs","setup","emit","slots","attrs","input","shallowRef","timePicker","isOpenSync","useSyncProp","valueComputed","useStateful","isValid","useTimeParser","useTimeFormatter","valueText","computed","value","doShowDropdown","get","disabled","readonly","set","v","nextTick","_a","focus","isFocused","blur","onFocus","focusListener","onBlur","blurListener","useFocus","onInputTextChanged","e","val","target","reset","withoutValidation","resetValidation","computedError","computedErrorMessages","listeners","validationAriaAttributes","useValidation","canBeCleared","clearIconProps","useClearable","canBeClearedComputed","filteredWrapperProps","filterComponentProps","computedInputWrapperProps","focused","error","errorMessages","computedInputListeners","filteredSlots","slotsWithIcons","clearable","Object","keys","filter","slot","includes","hideDropdown","showDropdown","event","cancel","prevent","checkProhibitedDropdownOpening","code","toggleDropdown","KeyboardEvent","cursorStyleComputed","cursor","iconTabindexComputed","iconProps","role","size","color","tabindex","tp","useTranslation","inputAttributesComputed","label","requiredMark","omit","filteredProps","dropdownPropsComputed","keyboardNavigation","innerAnchorSelector","timePickerProps"],"sources":["../../../../../src/components/va-time-input/VaTimeInput.vue"],"sourcesContent":["<template>\n  <va-dropdown\n    v-model=\"doShowDropdown\"\n    class=\"va-time-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    v-bind=\"dropdownPropsComputed\"\n  >\n    <template #anchor>\n      <va-input-wrapper\n        class=\"va-time-input__anchor\"\n        :style=\"cursorStyleComputed\"\n        v-bind=\"computedInputWrapperProps\"\n        @click.stop=\"toggleDropdown\"\n      >\n        <template #default>\n          <input\n            ref=\"input\"\n            class=\"va-time-input__input\"\n            v-bind=\"inputAttributesComputed\"\n            v-on=\"computedInputListeners\"\n            @change=\"onInputTextChanged\"\n          />\n        </template>\n\n        <template\n          v-for=\"name in filteredSlots\"\n          :key=\"name\"\n          v-slot:[name]=\"slotScope\"\n        >\n          <slot\n            :name=\"name\"\n            v-bind=\"{ ...slotScope, toggleDropdown, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n        </template>\n\n        <template #prependInner=\"slotScope\" v-if=\"$slots.prependInner || $props.leftIcon\">\n          <slot\n            name=\"prependInner\"\n            v-bind=\"{ ...slotScope, toggleDropdown, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n          <va-icon\n            v-if=\"$props.leftIcon\"\n            :aria-label=\"tp($props.ariaToggleDropdownLabel)\"\n            v-bind=\"iconProps\"\n            @click.stop=\"showDropdown\"\n            @keydown.enter.stop=\"showDropdown\"\n            @keydown.space.stop=\"showDropdown\"\n          />\n        </template>\n\n        <template #icon>\n          <va-icon\n            v-if=\"canBeClearedComputed\"\n            v-bind=\"{ ...iconProps, ...clearIconProps }\"\n            :aria-label=\"tp($props.ariaResetLabel)\"\n            @click.stop=\"reset\"\n            @keydown.enter.stop=\"reset\"\n            @keydown.space.stop=\"reset\"\n          />\n          <va-icon\n            v-else-if=\"!$props.leftIcon && $props.icon\"\n            :aria-label=\"tp($props.ariaToggleDropdownLabel)\"\n            @click.stop=\"showDropdown\"\n            @keydown.enter.stop=\"showDropdown\"\n            @keydown.space.stop=\"showDropdown\"\n            v-bind=\"iconProps\"\n          />\n        </template>\n      </va-input-wrapper>\n    </template>\n\n    <va-dropdown-content\n      no-padding\n      @keydown.esc.prevent=\"hideDropdown\"\n      @keypress.enter.prevent=\"hideDropdown\"\n    >\n      <va-time-picker\n        ref=\"timePicker\"\n        v-bind=\"timePickerProps\"\n        v-model=\"valueComputed\"\n      />\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, shallowRef, nextTick } from 'vue'\nimport omit from 'lodash/omit'\n\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\nimport {\n  useComponentPresetProp,\n  useSyncProp,\n  useValidation, useValidationEmits, useValidationProps, ValidationProps,\n  useClearable, useClearableEmits, useClearableProps,\n  useFocus, useFocusEmits,\n  useStateful, useStatefulEmits, useStatefulProps,\n  useTranslation,\n} from '../../composables'\nimport { useTimeParser } from './hooks/time-text-parser'\nimport { useTimeFormatter } from './hooks/time-text-formatter'\n\nimport VaTimePicker from '../va-time-picker/VaTimePicker.vue'\nimport { VaInputWrapper } from '../va-input'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\n\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper, ['focused', 'maxLength', 'counterValue'])\nconst VaDropdownProps = extractComponentProps(VaDropdown,\n  ['keyboardNavigation', 'innerAnchorSelector', 'modelValue'],\n)\n\nexport default defineComponent({\n  name: 'VaTimeInput',\n\n  components: { VaDropdown, VaDropdownContent, VaTimePicker, VaIcon, VaInputWrapper },\n\n  emits: [\n    ...useFocusEmits,\n    ...useValidationEmits,\n    ...useClearableEmits,\n    ...useStatefulEmits,\n    'update:modelValue',\n    'update:isOpen',\n  ],\n\n  props: {\n    ...VaDropdownProps,\n    ...useComponentPresetProp,\n    ...useClearableProps,\n    ...VaInputWrapperProps,\n    ...extractComponentProps(VaTimePicker),\n    ...useValidationProps as ValidationProps<Date>,\n    ...useStatefulProps,\n\n    isOpen: { type: Boolean, default: undefined },\n    closeOnContentClick: { type: Boolean, default: false },\n    offset: { ...VaDropdownProps.offset, default: () => [2, 0] },\n    placement: { ...VaDropdownProps.placement, default: 'bottom-start' },\n    modelValue: { type: Date, default: undefined },\n    clearValue: { type: Date, default: undefined },\n    format: { type: Function as PropType<(date?: Date) => string> },\n    parse: { type: Function as PropType<(input: string) => Date> },\n    manualInput: { type: Boolean, default: false },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'schedule' },\n\n    ariaLabel: { type: String, default: '$t:selectedTime' },\n    ariaResetLabel: { type: String, default: '$t:resetTime' },\n    ariaToggleDropdownLabel: { type: String, default: '$t:toggleDropdown' },\n  },\n\n  inheritAttrs: false,\n\n  setup (props, { emit, slots, attrs }) {\n    const input = shallowRef<HTMLInputElement>()\n    const timePicker = shallowRef<typeof VaTimePicker>()\n\n    const [isOpenSync] = useSyncProp('isOpen', props, emit, false as boolean)\n    const { valueComputed } = useStateful(props, emit)\n\n    const { parse, isValid } = useTimeParser(props)\n    const { format } = useTimeFormatter(props)\n\n    const valueText = computed<string>(() => format(valueComputed.value || props.clearValue))\n\n    const doShowDropdown = computed({\n      get () {\n        if (props.disabled || props.readonly) { return false }\n\n        return isOpenSync.value\n      },\n      set (v: boolean) {\n        isOpenSync.value = v\n\n        if (v) {\n          nextTick(() => timePicker.value?.focus())\n        } else {\n          nextTick(() => input.value?.focus())\n        }\n      },\n    })\n\n    const { isFocused, focus, blur, onFocus: focusListener, onBlur: blurListener } = useFocus(input)\n\n    const onInputTextChanged = (e: Event) => {\n      if (props.disabled) { return }\n\n      const val = (e.target as HTMLInputElement)?.value\n      if (!val) {\n        return reset()\n      }\n\n      const v = parse(val)\n\n      if (isValid.value && v) {\n        valueComputed.value = v\n      } else {\n        valueComputed.value = undefined\n        isValid.value = true\n      }\n    }\n\n    // --- not used yet ---\n    // const changePeriod = (isPM: boolean) => {\n    //   if (!valueComputed.value) { return }\n\n    //   const halfDayPeriod = 12\n    //   const h = valueComputed.value.getHours()\n\n    //   if (isPM && h <= halfDayPeriod) {\n    //     valueComputed.value = new Date(valueComputed.value.setHours(h + halfDayPeriod))\n    //   } else if (!isPM && h >= halfDayPeriod) {\n    //     valueComputed.value = new Date(valueComputed.value.setHours(h - halfDayPeriod))\n    //   }\n    // }\n\n    // const changePeriodToPm = () => changePeriod(true)\n    // const changePeriodToAm = () => changePeriod(false)\n\n    const reset = () => withoutValidation(() => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n      resetValidation()\n    })\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners,\n      validationAriaAttributes,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus, value: valueComputed })\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueText)\n\n    const canBeClearedComputed = computed(() => (\n      canBeCleared.value && valueText.value !== format(props.clearValue)\n    ))\n\n    const filteredWrapperProps = filterComponentProps(VaInputWrapperProps)\n    const computedInputWrapperProps = computed(() => ({\n      ...filteredWrapperProps.value,\n      focused: isFocused.value,\n      error: computedError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput,\n    }))\n\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        if (props.disabled) { return }\n\n        focusListener()\n\n        if (props.readonly) { return }\n        onFocus()\n        listeners.onFocus()\n      },\n      blur: () => {\n        if (props.disabled) { return }\n\n        blurListener()\n\n        if (props.readonly) { return }\n        onBlur()\n        listeners.onBlur()\n      },\n    }))\n\n    const filteredSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const hideDropdown = () => {\n      doShowDropdown.value = false\n    }\n\n    const showDropdown = (event?: KeyboardEvent, cancel?: boolean, prevent?: boolean) => {\n      doShowDropdown.value = true\n    }\n\n    const checkProhibitedDropdownOpening = (e?: KeyboardEvent) => {\n      if (isOpenSync.value) { return false }\n      if (props.disabled || props.readonly) { return true }\n      return props.manualInput && e?.code !== 'Space'\n    }\n\n    const toggleDropdown = (event: Event | KeyboardEvent) => {\n      if (checkProhibitedDropdownOpening(event instanceof KeyboardEvent ? event : undefined)) { return }\n\n      doShowDropdown.value = !doShowDropdown.value\n    }\n\n    const cursorStyleComputed = computed(() => {\n      if (props.disabled) { return {} }\n      if (props.manualInput) { return { cursor: 'text' } }\n      return { cursor: 'pointer' }\n    })\n\n    const iconTabindexComputed = computed(() => props.disabled || props.readonly ? -1 : 0)\n\n    const iconProps = computed(() => ({\n      role: 'button',\n      'aria-hidden': false,\n      size: 'small',\n      name: props.icon,\n      color: props.color,\n      tabindex: iconTabindexComputed.value,\n    }))\n\n    const { tp } = useTranslation()\n\n    const inputAttributesComputed = computed(() => ({\n      readonly: props.readonly || !props.manualInput,\n      disabled: props.disabled,\n      tabindex: props.disabled ? -1 : 0,\n      value: valueText.value,\n      'aria-label': props.label || tp(props.ariaLabel),\n      'aria-required': props.requiredMark,\n      'aria-disabled': props.disabled,\n      'aria-readonly': props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit(attrs, ['class', 'style']),\n    }))\n\n    const filteredProps = filterComponentProps(VaDropdownProps)\n    const dropdownPropsComputed = computed(() => ({\n      ...filteredProps.value,\n      keyboardNavigation: true,\n      innerAnchorSelector: '.va-input-wrapper__field',\n    }))\n\n    return {\n      tp,\n      input,\n      timePicker,\n\n      timePickerProps: filterComponentProps(extractComponentProps(VaTimePicker)),\n      dropdownPropsComputed,\n      computedInputWrapperProps,\n      computedInputListeners,\n      isOpenSync,\n      doShowDropdown,\n      valueComputed,\n      valueText,\n      onInputTextChanged,\n      canBeClearedComputed,\n      iconProps,\n      clearIconProps,\n      filteredSlots,\n      inputAttributesComputed,\n      cursorStyleComputed,\n\n      hideDropdown,\n      showDropdown,\n      toggleDropdown,\n\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-time-input {\n  min-width: var(--va-time-input-min-width);\n\n  &__anchor {\n    flex: 1;\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}