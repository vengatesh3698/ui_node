{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createVNode, render } from \"vue\";\nimport { a as getGlobal } from \"../../utils/ssr-fd33979c.mjs\";\nimport { V as VaToast } from \"./index-2c45224a.mjs\";\nconst GAP = 5;\nlet seed = 1;\ngetGlobal().vaToastInstances = [];\nconst getTranslateValue = (item, position) => {\n  if (item.el) {\n    const direction = position.includes(\"bottom\") ? -1 : 1;\n    return (item.el.offsetHeight + GAP) * direction;\n  }\n  return 0;\n};\nconst getNewTranslateValue = (transformY, redundantHeight, position) => {\n  const direction = position.includes(\"bottom\") ? -1 : 1;\n  return parseInt(transformY, 10) - (redundantHeight + GAP) * direction;\n};\nconst getNodeProps = vNode => {\n  var _a;\n  return ((_a = vNode.component) == null ? void 0 : _a.props) || {};\n};\nconst closeNotification = (targetInstance, destroyElementFn) => {\n  var _a;\n  if (!targetInstance) {\n    return;\n  }\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1;\n    return;\n  }\n  const targetInstanceIndex = getGlobal().vaToastInstances.findIndex(instance => instance === targetInstance);\n  if (targetInstanceIndex < 0) {\n    return;\n  }\n  const nodeProps = getNodeProps(targetInstance);\n  const {\n    offsetX: targetOffsetX,\n    offsetY: targetOffsetY,\n    position: targetPosition\n  } = nodeProps;\n  const redundantHeight = (_a = targetInstance.el) == null ? void 0 : _a.offsetHeight;\n  destroyElementFn();\n  getGlobal().vaToastInstances = getGlobal().vaToastInstances.reduce((acc, instance, index) => {\n    if (instance === targetInstance) {\n      return acc;\n    }\n    if (instance.component) {\n      const {\n        offsetX,\n        offsetY,\n        position\n      } = getNodeProps(instance);\n      const isNextInstance = index > targetInstanceIndex && targetOffsetX === offsetX && targetOffsetY === offsetY && targetPosition === position;\n      if (isNextInstance && instance.el && redundantHeight) {\n        const [_, transformY] = instance.el.style.transform.match(/[\\d-]+(?=px)/g);\n        const transformYNew = getNewTranslateValue(transformY, redundantHeight, position);\n        instance.el.style.transform = `translate(0, ${transformYNew}px)`;\n      }\n    }\n    return [...acc, instance];\n  }, []);\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1;\n  }\n};\nconst destroy = (el, node) => {\n  if (el) {\n    render(null, el);\n    el.remove();\n  }\n  el = null;\n};\nconst mount = (component, {\n  props,\n  children,\n  element,\n  appContext\n} = {}) => {\n  let el = element;\n  let vNode;\n  const onClose = () => {\n    closeNotification(vNode, () => destroy(el));\n    if (props == null ? void 0 : props.onClose) {\n      props.onClose();\n    }\n  };\n  vNode = createVNode(component, {\n    ...props,\n    onClose\n  }, children);\n  if (appContext) {\n    vNode.appContext = appContext;\n  }\n  if (el) {\n    render(vNode, el);\n  } else if (typeof document !== \"undefined\") {\n    render(vNode, el = document.createElement(\"div\"));\n  }\n  return {\n    vNode,\n    el\n  };\n};\nconst closeAllNotifications = appContext => {\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1;\n    return;\n  }\n  getGlobal().vaToastInstances.forEach(instance => {\n    if (appContext && instance.appContext !== appContext) {\n      return;\n    }\n    getNodeProps(instance).onClose();\n  });\n};\nconst closeById = id => {\n  const targetInstance = getGlobal().vaToastInstances.find(instance => {\n    var _a;\n    return ((_a = instance.el) == null ? void 0 : _a.id) === id;\n  });\n  if (targetInstance) {\n    const nodeProps = getNodeProps(targetInstance);\n    nodeProps.onClose();\n  }\n};\nconst getToastOptions = options => {\n  if (typeof options === \"string\") {\n    return {\n      message: options\n    };\n  }\n  return options;\n};\nconst createToastInstance = (customProps, appContext) => {\n  const {\n    vNode,\n    el\n  } = mount(VaToast, {\n    appContext,\n    props: getToastOptions(customProps)\n  });\n  const nodeProps = getNodeProps(vNode);\n  if (el && vNode.el && nodeProps) {\n    document.body.appendChild(el.childNodes[0]);\n    const {\n      offsetX,\n      offsetY,\n      position\n    } = nodeProps;\n    vNode.el.style.display = \"flex\";\n    vNode.el.id = \"notification_\" + seed;\n    let transformY = 0;\n    getGlobal().vaToastInstances.filter(item => {\n      const {\n        offsetX: itemOffsetX,\n        offsetY: itemOffsetY,\n        position: itemPosition\n      } = getNodeProps(item);\n      return itemOffsetX === offsetX && itemOffsetY === offsetY && position === itemPosition;\n    }).forEach(item => {\n      transformY += getTranslateValue(item, position);\n    });\n    vNode.el.style.transform = `translate(0, ${transformY}px)`;\n    seed += 1;\n    getGlobal().vaToastInstances.push(vNode);\n    return vNode.el.id;\n  }\n  return null;\n};\nexport { closeById as a, closeAllNotifications as b, createToastInstance as c };","map":{"version":3,"names":["GAP","seed","getGlobal","vaToastInstances","getTranslateValue","item","position","el","direction","includes","offsetHeight","getNewTranslateValue","transformY","redundantHeight","parseInt","getNodeProps","vNode","_a","component","props","closeNotification","targetInstance","destroyElementFn","length","targetInstanceIndex","findIndex","instance","nodeProps","offsetX","targetOffsetX","offsetY","targetOffsetY","targetPosition","reduce","acc","index","isNextInstance","_","style","transform","match","transformYNew","destroy","node","render","remove","mount","children","element","appContext","onClose","createVNode","document","createElement","closeAllNotifications","forEach","closeById","id","find","getToastOptions","options","message","createToastInstance","customProps","VaToast","body","appendChild","childNodes","display","filter","itemOffsetX","itemOffsetY","itemPosition","push"],"sources":["../../../../../src/components/va-toast/toast.ts"],"sourcesContent":["import { VNode, createVNode, render, AppContext } from 'vue'\n\nimport { getGlobal } from '../../utils/ssr'\nimport type { ToastOptions } from './types'\n\nimport { VaToast } from './index'\n\nconst GAP = 5\nlet seed = 1\n\ndeclare global {\n  interface Window {\n    vaToastInstances: VNode[]\n  }\n}\n\ngetGlobal().vaToastInstances = []\n\ntype OptionKeys = keyof ToastOptions;\n\nexport type VaToastId = string\n\nconst getTranslateValue = (item: VNode, position: string) => {\n  if (item.el) {\n    const direction = position.includes('bottom') ? -1 : 1\n    return (item.el.offsetHeight + GAP) * direction\n  }\n  return 0\n}\n\nconst getNewTranslateValue = (transformY: string, redundantHeight: number, position: string) => {\n  const direction = position.includes('bottom') ? -1 : 1\n  return parseInt(transformY, 10) - (redundantHeight + GAP) * direction\n}\n\nconst getNodeProps = (vNode: VNode): Record<OptionKeys, any> => {\n  return (vNode.component?.props as Record<OptionKeys, any>) || {}\n}\n\nconst closeNotification = (targetInstance: VNode | null, destroyElementFn: () => void) => {\n  if (!targetInstance) { return }\n\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1\n    return\n  }\n\n  const targetInstanceIndex = getGlobal().vaToastInstances.findIndex((instance) => instance === targetInstance)\n\n  if (targetInstanceIndex < 0) { return }\n\n  const nodeProps = getNodeProps(targetInstance)\n\n  const {\n    offsetX: targetOffsetX,\n    offsetY: targetOffsetY,\n    position: targetPosition,\n  } = nodeProps\n  const redundantHeight: number | null = targetInstance.el?.offsetHeight\n\n  destroyElementFn()\n\n  getGlobal().vaToastInstances = getGlobal().vaToastInstances.reduce((acc: any[], instance, index) => {\n    if (instance === targetInstance) {\n      return acc\n    }\n    if (instance.component) {\n      const { offsetX, offsetY, position } = getNodeProps(instance)\n      const isNextInstance = index > targetInstanceIndex && targetOffsetX === offsetX && targetOffsetY === offsetY && targetPosition === position\n      if (isNextInstance && instance.el && redundantHeight) {\n        const [_, transformY] = instance.el.style.transform.match(/[\\d-]+(?=px)/g)\n        const transformYNew = getNewTranslateValue(transformY, redundantHeight, position)\n        instance.el.style.transform = `translate(0, ${transformYNew}px)`\n      }\n    }\n    return [...acc, instance]\n  }, [])\n\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1\n  }\n}\n\nconst destroy = (el: HTMLElement | null | undefined, node: VNode | null) => {\n  if (el) {\n    render(null, el)\n    el.remove()\n  }\n  el = null\n  node = null\n}\n\nconst mount = (component: any, {\n  props,\n  children,\n  element,\n  appContext,\n}: { props?: { [key: string]: any }; children?: any; element?: HTMLElement; appContext?: AppContext } = {}): { vNode: VNode; el?: HTMLElement } => {\n  let el: HTMLElement | null | undefined = element\n\n  // eslint-disable-next-line prefer-const\n  let vNode: VNode | null\n\n  const onClose = () => {\n    closeNotification(vNode, () => destroy(el, vNode))\n\n    if (props?.onClose) {\n      props.onClose()\n    }\n  }\n\n  vNode = createVNode(component, { ...props, onClose }, children)\n\n  if (appContext) {\n    vNode.appContext = appContext\n  }\n\n  if (el) {\n    render(vNode, el)\n  } else if (typeof document !== 'undefined') {\n    render(vNode, el = document.createElement('div'))\n  }\n\n  return { vNode, el }\n}\n\nexport const closeAllNotifications = (appContext?: AppContext) => {\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1\n    return\n  }\n  getGlobal().vaToastInstances.forEach(instance => {\n    if (appContext && instance.appContext !== appContext) { return }\n    getNodeProps(instance).onClose()\n  })\n}\n\nexport const closeById = (id: string) => {\n  const targetInstance = getGlobal().vaToastInstances.find(instance => instance.el?.id === id)\n\n  if (targetInstance) {\n    const nodeProps = getNodeProps(targetInstance)\n    nodeProps.onClose()\n  }\n}\n\nconst getToastOptions = (options: string | ToastOptions): any => {\n  if (typeof options === 'string') {\n    return {\n      message: options,\n    }\n  }\n  return options\n}\n\nexport const createToastInstance = (customProps: ToastOptions | string, appContext?: AppContext): VaToastId | null => {\n  const { vNode, el } = mount(VaToast, { appContext, props: getToastOptions(customProps) })\n\n  const nodeProps = getNodeProps(vNode)\n\n  if (el && vNode.el && nodeProps) {\n    document.body.appendChild(el.childNodes[0])\n    const { offsetX, offsetY, position } = nodeProps\n\n    vNode.el.style.display = 'flex'\n    vNode.el.id = 'notification_' + seed\n\n    let transformY = 0\n    getGlobal().vaToastInstances.filter(item => {\n      const {\n        offsetX: itemOffsetX,\n        offsetY: itemOffsetY,\n        position: itemPosition,\n      } = getNodeProps(item)\n\n      return itemOffsetX === offsetX && itemOffsetY === offsetY && position === itemPosition\n    }).forEach((item) => {\n      transformY += getTranslateValue(item, position)\n    })\n    vNode.el.style.transform = `translate(0, ${transformY}px)`\n\n    seed += 1\n\n    getGlobal().vaToastInstances.push(vNode)\n\n    return vNode.el.id as VaToastId\n  }\n\n  return null\n}\n\nexport type { ToastOptions as NotificationOptions } from './types'\n"],"mappings":";;;;AAOA,MAAMA,GAAA,GAAM;AACZ,IAAIC,IAAA,GAAO;AAQXC,SAAA,CAAU,EAAEC,gBAAA,GAAmB;AAM/B,MAAMC,iBAAA,GAAoBA,CAACC,IAAA,EAAaC,QAAA,KAAqB;EAC3D,IAAID,IAAA,CAAKE,EAAA,EAAI;IACX,MAAMC,SAAA,GAAYF,QAAA,CAASG,QAAA,CAAS,QAAQ,IAAI,KAAK;IAC7C,QAAAJ,IAAA,CAAKE,EAAA,CAAGG,YAAA,GAAeV,GAAA,IAAOQ,SAAA;EACxC;EACO;AACT;AAEA,MAAMG,oBAAA,GAAuBA,CAACC,UAAA,EAAoBC,eAAA,EAAyBP,QAAA,KAAqB;EAC9F,MAAME,SAAA,GAAYF,QAAA,CAASG,QAAA,CAAS,QAAQ,IAAI,KAAK;EACrD,OAAOK,QAAA,CAASF,UAAA,EAAY,EAAE,KAAKC,eAAA,GAAkBb,GAAA,IAAOQ,SAAA;AAC9D;AAEA,MAAMO,YAAA,GAAgBC,KAAA,IAA0C;;EACtD,SAAAC,EAAA,GAAAD,KAAA,CAAME,SAAA,KAAN,gBAAAD,EAAA,CAAiBE,KAAA,KAAqC;AAChE;AAEA,MAAMC,iBAAA,GAAoBA,CAACC,cAAA,EAA8BC,gBAAA,KAAiC;;EACxF,IAAI,CAACD,cAAA,EAAgB;IAAE;EAAO;EAE9B,IAAI,CAACnB,SAAA,GAAYC,gBAAA,CAAiBoB,MAAA,EAAQ;IACjCtB,IAAA;IACP;EACF;EAEM,MAAAuB,mBAAA,GAAsBtB,SAAA,GAAYC,gBAAA,CAAiBsB,SAAA,CAAWC,QAAA,IAAaA,QAAA,KAAaL,cAAc;EAE5G,IAAIG,mBAAA,GAAsB,GAAG;IAAE;EAAO;EAEhC,MAAAG,SAAA,GAAYZ,YAAA,CAAaM,cAAc;EAEvC;IACJO,OAAA,EAASC,aAAA;IACTC,OAAA,EAASC,aAAA;IACTzB,QAAA,EAAU0B;EACR,IAAAL,SAAA;EACE,MAAAd,eAAA,IAAiCI,EAAA,GAAAI,cAAA,CAAed,EAAA,KAAf,gBAAAU,EAAA,CAAmBP,YAAA;EAEzCY,gBAAA;EAEPpB,SAAA,GAAEC,gBAAA,GAAmBD,SAAA,GAAYC,gBAAA,CAAiB8B,MAAA,CAAO,CAACC,GAAA,EAAYR,QAAA,EAAUS,KAAA,KAAU;IAClG,IAAIT,QAAA,KAAaL,cAAA,EAAgB;MACxB,OAAAa,GAAA;IACT;IACA,IAAIR,QAAA,CAASR,SAAA,EAAW;MACtB,MAAM;QAAEU,OAAA;QAASE,OAAA;QAASxB;MAAS,IAAIS,YAAA,CAAaW,QAAQ;MAC5D,MAAMU,cAAA,GAAiBD,KAAA,GAAQX,mBAAA,IAAuBK,aAAA,KAAkBD,OAAA,IAAWG,aAAA,KAAkBD,OAAA,IAAWE,cAAA,KAAmB1B,QAAA;MAC/H,IAAA8B,cAAA,IAAkBV,QAAA,CAASnB,EAAA,IAAMM,eAAA,EAAiB;QAC9C,OAACwB,CAAA,EAAGzB,UAAU,IAAIc,QAAA,CAASnB,EAAA,CAAG+B,KAAA,CAAMC,SAAA,CAAUC,KAAA,CAAM,eAAe;QACzE,MAAMC,aAAA,GAAgB9B,oBAAA,CAAqBC,UAAA,EAAYC,eAAA,EAAiBP,QAAQ;QACvEoB,QAAA,CAAAnB,EAAA,CAAG+B,KAAA,CAAMC,SAAA,GAAY,gBAAgBE,aAAA;MAChD;IACF;IACO,QAAC,GAAGP,GAAA,EAAKR,QAAQ;EAC1B,GAAG,EAAE;EAEL,IAAI,CAACxB,SAAA,GAAYC,gBAAA,CAAiBoB,MAAA,EAAQ;IACjCtB,IAAA;EACT;AACF;AAEA,MAAMyC,OAAA,GAAUA,CAACnC,EAAA,EAAoCoC,IAAA,KAAuB;EAC1E,IAAIpC,EAAA,EAAI;IACNqC,MAAA,CAAO,MAAMrC,EAAE;IACfA,EAAA,CAAGsC,MAAA,CAAO;EACZ;EACKtC,EAAA;AAEP;AAEA,MAAMuC,KAAA,GAAQA,CAAC5B,SAAA,EAAgB;EAC7BC,KAAA;EACA4B,QAAA;EACAC,OAAA;EACAC;AACF,IAAwG,OAA2C;EACjJ,IAAI1C,EAAA,GAAqCyC,OAAA;EAGrC,IAAAhC,KAAA;EAEJ,MAAMkC,OAAA,GAAUA,CAAA,KAAM;IACpB9B,iBAAA,CAAkBJ,KAAA,EAAO,MAAM0B,OAAA,CAAQnC,EAAS,CAAC;IAEjD,IAAIY,KAAA,oBAAAA,KAAA,CAAO+B,OAAA,EAAS;MAClB/B,KAAA,CAAM+B,OAAA,CAAQ;IAChB;EAAA;EAGFlC,KAAA,GAAQmC,WAAA,CAAYjC,SAAA,EAAW;IAAE,GAAGC,KAAA;IAAO+B;EAAA,GAAWH,QAAQ;EAE9D,IAAIE,UAAA,EAAY;IACdjC,KAAA,CAAMiC,UAAA,GAAaA,UAAA;EACrB;EAEA,IAAI1C,EAAA,EAAI;IACNqC,MAAA,CAAO5B,KAAA,EAAOT,EAAE;EAAA,WACP,OAAO6C,QAAA,KAAa,aAAa;IAC1CR,MAAA,CAAO5B,KAAA,EAAOT,EAAA,GAAK6C,QAAA,CAASC,aAAA,CAAc,KAAK,CAAC;EAClD;EAEO;IAAErC,KAAA;IAAOT;EAAA;AAClB;AAEa,MAAA+C,qBAAA,GAAyBL,UAAA,IAA4B;EAChE,IAAI,CAAC/C,SAAA,GAAYC,gBAAA,CAAiBoB,MAAA,EAAQ;IACjCtB,IAAA;IACP;EACF;EACUC,SAAA,GAAEC,gBAAA,CAAiBoD,OAAA,CAAoB7B,QAAA;IAC3C,IAAAuB,UAAA,IAAcvB,QAAA,CAASuB,UAAA,KAAeA,UAAA,EAAY;MAAE;IAAO;IAClDlC,YAAA,CAAAW,QAAQ,EAAEwB,OAAA;EAAQ,CAChC;AACH;AAEa,MAAAM,SAAA,GAAaC,EAAA,IAAe;EACjC,MAAApC,cAAA,GAAiBnB,SAAA,GAAYC,gBAAA,CAAiBuD,IAAA,CAAiBhC,QAAA;;IAAA,SAAAT,EAAA,GAAAS,QAAA,CAASnB,EAAA,KAAT,gBAAAU,EAAA,CAAawC,EAAA,MAAOA,EAAA;EAAA,CAAE;EAE3F,IAAIpC,cAAA,EAAgB;IACZ,MAAAM,SAAA,GAAYZ,YAAA,CAAaM,cAAc;IAC7CM,SAAA,CAAUuB,OAAA,CAAQ;EACpB;AACF;AAEA,MAAMS,eAAA,GAAmBC,OAAA,IAAwC;EAC3D,WAAOA,OAAA,KAAY,UAAU;IACxB;MACLC,OAAA,EAASD;IAAA;EAEb;EACO,OAAAA,OAAA;AACT;AAEa,MAAAE,mBAAA,GAAsBA,CAACC,WAAA,EAAoCd,UAAA,KAA8C;EACpH,MAAM;IAAEjC,KAAA;IAAOT;EAAG,IAAIuC,KAAA,CAAMkB,OAAA,EAAS;IAAEf,UAAA;IAAY9B,KAAA,EAAOwC,eAAA,CAAgBI,WAAW;EAAG;EAElF,MAAApC,SAAA,GAAYZ,YAAA,CAAaC,KAAK;EAEhC,IAAAT,EAAA,IAAMS,KAAA,CAAMT,EAAA,IAAMoB,SAAA,EAAW;IAC/ByB,QAAA,CAASa,IAAA,CAAKC,WAAA,CAAY3D,EAAA,CAAG4D,UAAA,CAAW,CAAC,CAAC;IAC1C,MAAM;MAAEvC,OAAA;MAASE,OAAA;MAASxB;IAAA,IAAaqB,SAAA;IAEjCX,KAAA,CAAAT,EAAA,CAAG+B,KAAA,CAAM8B,OAAA,GAAU;IACnBpD,KAAA,CAAAT,EAAA,CAAGkD,EAAA,GAAK,kBAAkBxD,IAAA;IAEhC,IAAIW,UAAA,GAAa;IACPV,SAAA,GAAEC,gBAAA,CAAiBkE,MAAA,CAAehE,IAAA;MACpC;QACJuB,OAAA,EAAS0C,WAAA;QACTxC,OAAA,EAASyC,WAAA;QACTjE,QAAA,EAAUkE;MAAA,IACRzD,YAAA,CAAaV,IAAI;MAErB,OAAOiE,WAAA,KAAgB1C,OAAA,IAAW2C,WAAA,KAAgBzC,OAAA,IAAWxB,QAAA,KAAakE,YAAA;IAAA,CAC3E,EAAEjB,OAAA,CAASlD,IAAA,IAAS;MACLO,UAAA,IAAAR,iBAAA,CAAkBC,IAAA,EAAMC,QAAQ;IAAA,CAC/C;IACKU,KAAA,CAAAT,EAAA,CAAG+B,KAAA,CAAMC,SAAA,GAAY,gBAAgB3B,UAAA;IAEnCX,IAAA;IAEEC,SAAA,GAAEC,gBAAA,CAAiBsE,IAAA,CAAKzD,KAAK;IAEvC,OAAOA,KAAA,CAAMT,EAAA,CAAGkD,EAAA;EAClB;EAEO;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}