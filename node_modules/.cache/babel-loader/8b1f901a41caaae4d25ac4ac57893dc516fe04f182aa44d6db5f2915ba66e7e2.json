{"ast":null,"code":"import { defineComponent, ref, onMounted, onBeforeUnmount, computed } from \"vue\";\nimport { u as useColors } from \"../../composables/useColors-f23d24ff.mjs\";\nimport { u as useBem } from \"../../composables/useBem-10a5bc6e.mjs\";\nimport { u as useTranslation } from \"../../composables/useTranslation-acf7d88d.mjs\";\nconst _sfc_main = defineComponent({\n  name: \"VaSkeleton\",\n  props: {\n    color: {\n      type: String,\n      default: \"backgroundElement\"\n    },\n    delay: {\n      type: Number,\n      default: 100\n    },\n    tag: {\n      type: String,\n      default: \"div\"\n    },\n    animation: {\n      type: String,\n      default: \"pulse\"\n    },\n    lines: {\n      type: Number,\n      default: 1\n    },\n    height: {\n      type: [String],\n      default: \"5em\"\n    },\n    width: {\n      type: [String],\n      default: \"100%\"\n    },\n    lineGap: {\n      type: String,\n      default: \"8px\"\n    },\n    lastLineWidth: {\n      type: [String],\n      default: \"75%\"\n    },\n    variant: {\n      type: String,\n      default: \"squared\"\n    },\n    ariaLabel: {\n      type: String,\n      default: \"$t:loading\"\n    }\n  },\n  setup(props, {\n    attrs\n  }) {\n    const doShow = ref(false);\n    let timeoutId;\n    onMounted(() => {\n      clearTimeout(timeoutId);\n      setTimeout(() => {\n        doShow.value = true;\n      }, props.delay);\n    });\n    onBeforeUnmount(() => {\n      clearTimeout(timeoutId);\n    });\n    const heightComputed = computed(() => {\n      if (props.variant === \"text\") {\n        return `${props.lines}em`;\n      }\n      return props.height;\n    });\n    const widthComputed = computed(() => {\n      if (props.variant === \"circle\") {\n        return heightComputed.value;\n      }\n      return props.width;\n    });\n    const {\n      getColor\n    } = useColors();\n    const colorComputed = computed(() => getColor(props.color));\n    const negativeLineGap = computed(() => `-${props.lineGap}`);\n    const bem = useBem(\"va-skeleton\", () => ({\n      lines: props.lines > 1,\n      text: props.variant === \"text\",\n      circle: props.variant === \"circle\",\n      hidden: !doShow.value,\n      pulse: props.animation === \"pulse\",\n      wave: props.animation === \"wave\"\n    }));\n    const borderRadius = computed(() => {\n      if (props.variant === \"circle\") {\n        return \"50%\";\n      }\n      if (props.variant === \"rounded\") {\n        return `var(--va-skeleton-border-radius, calc(${heightComputed.value} / 5))`;\n      }\n      return \"0px\";\n    });\n    return {\n      ...useTranslation(),\n      classes: computed(() => [...Object.keys(bem), attrs.class]),\n      colorComputed,\n      negativeLineGap,\n      doShow,\n      heightComputed,\n      widthComputed,\n      borderRadius\n    };\n  }\n});\nexport { _sfc_main as _ };\nimport '../../../VaSkeleton.css';","map":{"version":3,"names":["_sfc_main","defineComponent","name","props","color","type","String","default","delay","Number","tag","animation","lines","height","width","lineGap","lastLineWidth","variant","ariaLabel","setup","attrs","doShow","ref","timeoutId","onMounted","clearTimeout","setTimeout","value","onBeforeUnmount","heightComputed","computed","widthComputed","getColor","useColors","colorComputed","negativeLineGap","bem","useBem","text","circle","hidden","pulse","wave","borderRadius","useTranslation","classes","Object","keys","class"],"sources":["../../../../../src/components/va-skeleton/VaSkeleton.vue"],"sourcesContent":["<template>\n  <component\n    class=\"va-skeleton\"\n    role=\"status\"\n    aria-live=\"polite\"\n    :aria-label=\"tp($props.ariaLabel)\"\n    aria-atomic=\"true\"\n    :class=\"classes\"\n    :is=\"tag\"\n   :style=\"`--va-0-color-computed: ${String(colorComputed)};--va-1-height-computed: ${String(heightComputed)};--va-2-width-computed: ${String(widthComputed)};--va-3-border-radius: ${String(borderRadius)};--va-4-line-gap: ${String(lineGap)};--va-5-last-line-width: ${String(lastLineWidth)}`\">\n    <slot />\n    <div class=\"va-skeleton__wave\" v-if=\"animation === 'wave'\" />\n  </component>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, onMounted, ref, computed, PropType, onBeforeUnmount } from 'vue'\nimport { useBem, useColors, useTranslation } from '../../composables'\n\nexport default defineComponent({\n  name: 'VaSkeleton',\n\n  props: {\n    color: { type: String, default: 'backgroundElement' },\n    delay: { type: Number, default: 100 },\n\n    tag: { type: String, default: 'div' },\n\n    animation: { type: String as PropType<'pulse' | 'wave' | 'none'>, default: 'pulse' },\n\n    lines: { type: Number, default: 1 },\n    height: { type: [String], default: '5em' },\n    width: { type: [String], default: '100%' },\n    lineGap: { type: String, default: '8px' },\n    lastLineWidth: { type: [String], default: '75%' },\n\n    variant: { type: String as PropType<'text' | 'circle' | 'rounded' | 'squared'>, default: 'squared' },\n    ariaLabel: { type: String, default: '$t:loading' },\n  },\n\n  setup (props, { attrs }) {\n    const doShow = ref(false)\n\n    let timeoutId: ReturnType<typeof setTimeout>\n    onMounted(() => {\n      clearTimeout(timeoutId)\n      setTimeout(() => {\n        doShow.value = true\n      }, props.delay)\n    })\n    onBeforeUnmount(() => {\n      clearTimeout(timeoutId)\n    })\n\n    const heightComputed = computed(() => {\n      if (props.variant === 'text') {\n        return `${props.lines}em`\n      }\n\n      return props.height\n    })\n    const widthComputed = computed(() => {\n      if (props.variant === 'circle') {\n        return heightComputed.value\n      }\n\n      return props.width\n    })\n\n    const { getColor } = useColors()\n\n    const colorComputed = computed(() => getColor(props.color))\n    const negativeLineGap = computed(() => `-${props.lineGap}`)\n\n    const bem = useBem('va-skeleton', () => ({\n      lines: props.lines > 1,\n      text: props.variant === 'text',\n      circle: props.variant === 'circle',\n      hidden: !doShow.value,\n      pulse: props.animation === 'pulse',\n      wave: props.animation === 'wave',\n    }))\n\n    const borderRadius = computed(() => {\n      if (props.variant === 'circle') { return '50%' }\n      if (props.variant === 'rounded') { return `var(--va-skeleton-border-radius, calc(${heightComputed.value} / 5))` }\n\n      return '0px'\n    })\n\n    return {\n      ...useTranslation(),\n      classes: computed(() => [\n        ...Object.keys(bem),\n        (attrs as { class: string }).class,\n      ]),\n\n      colorComputed,\n      negativeLineGap,\n      doShow,\n      heightComputed,\n      widthComputed,\n      borderRadius,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import 'variables.scss';\n\n@keyframes pulse {\n  0% {\n    filter: brightness(1);\n  }\n\n  50% {\n    filter: brightness(1);\n  }\n\n  75% {\n    filter: brightness(0.9);\n  }\n\n  100% {\n    filter: brightness(1);\n  }\n}\n\n@keyframes wave {\n  0% {\n    left: -100%;\n  }\n\n  100% {\n    left: 100%;\n  }\n}\n\n.va-skeleton {\n  $line-height: 1em;\n\n  background: var(--va-0-color-computed);\n  height: var(--va-1-height-computed);\n  width: var(--va-2-width-computed);\n  border-radius: var(--va-3-border-radius);\n  cursor: wait;\n\n  &--pulse {\n    animation: var(--va-skeleton-animation-duration) ease-in-out 0s infinite normal none running pulse;\n  }\n\n  &--wave {\n    mask-image: -webkit-radial-gradient(white, black);\n\n    .va-skeleton__wave {\n      position: absolute;\n      overflow: hidden;\n      left: 0;\n      height: 100%;\n      width: 100%;\n\n      &::after {\n        display: block;\n        position: relative;\n        content: '';\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        opacity: var(--va-skeleton-wave-opacity, 0.5);\n        background: linear-gradient(90deg, transparent, var(--va-skeleton-wave-color), transparent);\n        animation: var(--va-skeleton-animation-duration) linear 0s infinite normal none running wave;\n      }\n    }\n  }\n\n  &--hidden {\n    // Hide visually and from screen readers\n    position: absolute;\n    overflow: hidden;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    width: 1px;\n    margin: -1px;\n    padding: 0;\n    border: 0;\n  }\n\n  &--lines {\n    background:\n      repeating-linear-gradient(\n        180deg,\n        var(--va-0-color-computed),\n        var(--va-0-color-computed) calc($line-height - var(--va-4-line-gap) / 2),\n        transparent calc($line-height - var(--va-4-line-gap) / 2),\n        transparent $line-height,\n      );\n\n    .va-skeleton__wave::after {\n      mask-image:\n        repeating-linear-gradient(\n          180deg,\n          black,\n          black calc($line-height - var(--va-4-line-gap) / 2),\n          transparent calc($line-height - var(--va-4-line-gap) / 2),\n          transparent $line-height,\n        );\n    }\n  }\n\n  &--text {\n    width: 100%;\n    clip-path:\n      polygon(\n        0% 0%,\n        0% 100%,\n        var(--va-5-last-line-width) 100%,\n        var(--va-5-last-line-width) calc(100% - $line-height),\n        100% calc(100% - $line-height),\n        100% 100%,\n        $line-height 100%,\n        var(--va-5-last-line-width) 100%,\n        100% 100%,\n        100% 0%\n      );\n  }\n\n  &--circle {\n    min-width: var(--va-2-width-computed);\n    min-height: var(--va-1-height-computed);\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}