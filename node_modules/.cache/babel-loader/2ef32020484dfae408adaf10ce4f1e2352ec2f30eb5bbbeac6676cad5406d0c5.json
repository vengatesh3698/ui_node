{"ast":null,"code":"import { unref } from \"vue\";\nconst useParsableMeasure = () => {\n  const isParsableMeasure = value => {\n    if (typeof value === \"string\") {\n      return !isNaN(+value) || value.endsWith(\"px\") || value.endsWith(\"rem\");\n    }\n    return false;\n  };\n  const isParsablePositiveMeasure = value => {\n    if (typeof value === \"number\") {\n      return value >= 0;\n    }\n    return isParsableMeasure(value) && parseInt(value) >= 0;\n  };\n  const parseSizeValue = (value, pageFontSize = 16) => {\n    const valueUnref = unref(value);\n    if (typeof valueUnref === \"string\") {\n      const parsedValue = parseInt(valueUnref);\n      if (isNaN(parsedValue)) {\n        return 0;\n      }\n      return valueUnref.endsWith(\"rem\") ? parsedValue * unref(pageFontSize) : parsedValue;\n    }\n    return valueUnref;\n  };\n  return {\n    isParsableMeasure,\n    isParsablePositiveMeasure,\n    parseSizeValue\n  };\n};\nexport { useParsableMeasure as u };","map":{"version":3,"names":["useParsableMeasure","isParsableMeasure","value","isNaN","endsWith","isParsablePositiveMeasure","parseInt","parseSizeValue","pageFontSize","valueUnref","unref","parsedValue"],"sources":["../../../../src/composables/useParsableMeasure.ts"],"sourcesContent":["import { unref, Ref } from 'vue'\n\ntype MaybeRef<T> = Ref<T> | T\n\nexport const useParsableMeasure = () => {\n  const isParsableMeasure = (value: unknown): value is string => {\n    if (typeof value === 'string') {\n      return (!isNaN(+value) ||\n        value.endsWith('px') ||\n        value.endsWith('rem'))\n    }\n    return false\n  }\n\n  const isParsablePositiveMeasure = (value: unknown) => {\n    if (typeof value === 'number') {\n      return value >= 0\n    }\n    return isParsableMeasure(value) && parseInt(value) >= 0\n  }\n\n  const parseSizeValue = (value: MaybeRef<number | string>, pageFontSize: MaybeRef<number> = 16) => {\n    const valueUnref = unref(value)\n    if (typeof valueUnref === 'string') {\n      const parsedValue = parseInt(valueUnref)\n\n      if (isNaN(parsedValue)) { return 0 }\n\n      return valueUnref.endsWith('rem') ? parsedValue * unref(pageFontSize) : parsedValue\n    }\n    return valueUnref\n  }\n\n  return { isParsableMeasure, isParsablePositiveMeasure, parseSizeValue }\n}\n"],"mappings":";AAIO,MAAMA,kBAAA,GAAqBA,CAAA,KAAM;EAChC,MAAAC,iBAAA,GAAqBC,KAAA,IAAoC;IACzD,WAAOA,KAAA,KAAU,UAAU;MACrB,QAACC,KAAA,CAAM,CAACD,KAAK,KACnBA,KAAA,CAAME,QAAA,CAAS,IAAI,KACnBF,KAAA,CAAME,QAAA,CAAS,KAAK;IACxB;IACO;EAAA;EAGH,MAAAC,yBAAA,GAA6BH,KAAA,IAAmB;IAChD,WAAOA,KAAA,KAAU,UAAU;MAC7B,OAAOA,KAAA,IAAS;IAClB;IACA,OAAOD,iBAAA,CAAkBC,KAAK,KAAKI,QAAA,CAASJ,KAAK,KAAK;EAAA;EAGxD,MAAMK,cAAA,GAAiBA,CAACL,KAAA,EAAkCM,YAAA,GAAiC,OAAO;IAC1F,MAAAC,UAAA,GAAaC,KAAA,CAAMR,KAAK;IAC1B,WAAOO,UAAA,KAAe,UAAU;MAC5B,MAAAE,WAAA,GAAcL,QAAA,CAASG,UAAU;MAEnC,IAAAN,KAAA,CAAMQ,WAAW,GAAG;QAAS;MAAE;MAEnC,OAAOF,UAAA,CAAWL,QAAA,CAAS,KAAK,IAAIO,WAAA,GAAcD,KAAA,CAAMF,YAAY,IAAIG,WAAA;IAC1E;IACO,OAAAF,UAAA;EAAA;EAGF;IAAER,iBAAA;IAAmBI,yBAAA;IAA2BE;EAAA;AACzD"},"metadata":{},"sourceType":"module","externalDependencies":[]}