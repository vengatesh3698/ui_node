{"ast":null,"code":"import { defineComponent, shallowRef, computed } from \"vue\";\nimport { g as generateUniqueId } from \"../../utils/uuid-7d2e5892.mjs\";\nimport { V as VaIcon } from \"../va-icon/index-0ebbc0f2.mjs\";\nimport { V as VaMessageListWrapper } from \"../va-input/components/VaMessageListWrapper-ba148e2c.mjs\";\nimport { u as useSelectableEmits, a as useSelectableProps, b as useSelectable } from \"../../composables/useSelectable-7683bba3.mjs\";\nimport { u as useKeyboardOnlyFocus } from \"../../composables/useKeyboardOnlyFocus-2734fefc.mjs\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset-0dfbd395.mjs\";\nimport { u as useColors } from \"../../composables/useColors-f23d24ff.mjs\";\nimport { u as useTextColor } from \"../../composables/useTextColor-f36510ca.mjs\";\nconst VaCheckboxValueType = [Boolean, Array, String, Object];\nconst _sfc_main = defineComponent({\n  name: \"VaCheckbox\",\n  components: {\n    VaMessageListWrapper,\n    VaIcon\n  },\n  emits: useSelectableEmits,\n  props: {\n    ...useSelectableProps,\n    ...useComponentPresetProp,\n    modelValue: {\n      type: VaCheckboxValueType,\n      default: false\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    },\n    checkedIcon: {\n      type: String,\n      default: \"va-check\"\n    },\n    indeterminate: {\n      type: Boolean,\n      default: false\n    },\n    indeterminateValue: {\n      type: VaCheckboxValueType,\n      default: null\n    },\n    indeterminateIcon: {\n      type: String,\n      default: \"remove\"\n    },\n    id: {\n      type: String,\n      default: \"\"\n    },\n    name: {\n      type: String,\n      default: \"\"\n    },\n    ariaLabel: {\n      type: String,\n      default: void 0\n    }\n  },\n  setup(props, {\n    emit\n  }) {\n    const elements = {\n      container: shallowRef(),\n      input: shallowRef(),\n      label: shallowRef()\n    };\n    const {\n      isChecked,\n      computedError,\n      isIndeterminate,\n      computedErrorMessages,\n      validationAriaAttributes,\n      toggleSelection,\n      onBlur,\n      onFocus\n    } = useSelectable(props, emit, elements);\n    const {\n      getColor\n    } = useColors();\n    const {\n      hasKeyboardFocus,\n      keyboardFocusListeners\n    } = useKeyboardOnlyFocus();\n    const {\n      textColorComputed\n    } = useTextColor();\n    const isActive = computed(() => isChecked.value || isIndeterminate.value);\n    const computedClass = computed(() => ({\n      \"va-checkbox--selected\": isChecked.value,\n      \"va-checkbox--readonly\": props.readonly,\n      \"va-checkbox--disabled\": props.disabled,\n      \"va-checkbox--indeterminate\": props.indeterminate,\n      \"va-checkbox--error\": computedError.value,\n      \"va-checkbox--left-label\": props.leftLabel,\n      \"va-checkbox--on-keyboard-focus\": hasKeyboardFocus.value\n    }));\n    const labelStyle = computed(() => {\n      return {\n        color: computedError.value ? getColor(\"danger\") : \"\",\n        padding: !props.label ? \"\" : props.leftLabel ? \"0 0.5rem 0 0\" : \"0 0 0 0.5rem\"\n      };\n    });\n    const inputStyle = computed(() => {\n      const style = {\n        background: isActive.value ? getColor(props.color) : \"\",\n        borderColor: isActive.value ? getColor(props.color) : \"\"\n      };\n      if (computedError.value) {\n        style.borderColor = getColor(\"danger\");\n      }\n      return style;\n    });\n    const computedIconName = computed(() => props.indeterminate && isIndeterminate.value ? props.indeterminateIcon : props.checkedIcon);\n    const uniqueId = computed(generateUniqueId);\n    const computedId = computed(() => props.id || uniqueId.value);\n    const computedName = computed(() => props.name || uniqueId.value);\n    const inputAttributesComputed = computed(() => ({\n      name: computedName.value,\n      disabled: props.disabled,\n      readonly: props.readonly,\n      tabindex: props.disabled ? -1 : 0,\n      \"aria-label\": props.ariaLabel,\n      \"aria-disabled\": props.disabled,\n      \"aria-readOnly\": props.readonly,\n      \"aria-checked\": isActive.value,\n      ...validationAriaAttributes.value\n    }));\n    return {\n      isActive,\n      computedClass,\n      labelStyle,\n      inputStyle,\n      computedIconName,\n      textColorComputed,\n      computedError,\n      computedErrorMessages,\n      keyboardFocusListeners,\n      toggleSelection,\n      onBlur,\n      onFocus,\n      inputAttributesComputed,\n      computedId,\n      computedName\n    };\n  }\n});\nexport { _sfc_main as _ };\nimport '../../../VaCheckbox.css';","map":{"version":3,"names":["VaCheckboxValueType","Boolean","Array","String","Object","_sfc_main","defineComponent","name","components","VaMessageListWrapper","VaIcon","emits","useSelectableEmits","props","useSelectableProps","useComponentPresetProp","modelValue","type","default","color","checkedIcon","indeterminate","indeterminateValue","indeterminateIcon","id","ariaLabel","setup","emit","elements","container","shallowRef","input","label","isChecked","computedError","isIndeterminate","computedErrorMessages","validationAriaAttributes","toggleSelection","onBlur","onFocus","useSelectable","getColor","useColors","hasKeyboardFocus","keyboardFocusListeners","useKeyboardOnlyFocus","textColorComputed","useTextColor","isActive","computed","value","computedClass","readonly","disabled","leftLabel","labelStyle","padding","inputStyle","style","background","borderColor","computedIconName","uniqueId","generateUniqueId","computedId","computedName","inputAttributesComputed","tabindex"],"sources":["../../../../../src/components/va-checkbox/VaCheckbox.vue"],"sourcesContent":["<template>\n  <VaMessageListWrapper\n    class=\"va-checkbox\"\n    :class=\"computedClass\"\n    :disabled=\"disabled\"\n    :success=\"success\"\n    :messages=\"messages\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n  >\n    <div\n      ref=\"container\"\n      class=\"va-checkbox__input-container\"\n      @click=\"toggleSelection\"\n      @blur=\"onBlur\"\n    >\n      <div\n        class=\"va-checkbox__square\"\n        :style=\"inputStyle\"\n        @selectstart.prevent\n      >\n        <input\n          ref=\"input\"\n          type=\"checkbox\"\n          class=\"va-checkbox__input\"\n          :id=\"computedId\"\n          :indeterminate=\"indeterminate\"\n          :value=\"label\"\n          :checked=\"isActive\"\n          v-bind=\"inputAttributesComputed\"\n          v-on=\"keyboardFocusListeners\"\n          @focus=\"onFocus\"\n          @blur=\"onBlur\"\n          @click.stop.prevent\n          @keypress.prevent=\"toggleSelection\"\n        >\n        <va-icon\n          v-show=\"isActive\"\n          class=\"va-checkbox__icon\"\n          size=\"20px\"\n          :name=\"computedIconName\"\n          :color=\"textColorComputed\"\n        />\n      </div>\n      <label\n        v-if=\"label || $slots.label\"\n        ref=\"label\"\n        class=\"va-checkbox__label\"\n        :for=\"computedId\"\n        :style=\"labelStyle\"\n        @blur=\"onBlur\"\n      >\n        <slot name=\"label\">{{ label }}</slot>\n      </label>\n    </div>\n  </VaMessageListWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType, shallowRef } from 'vue'\n\nimport { generateUniqueId } from '../../utils/uuid'\nimport {\n  useComponentPresetProp,\n  useKeyboardOnlyFocus,\n  useColors, useTextColor,\n  useSelectable, useSelectableProps, useSelectableEmits, Elements,\n} from '../../composables'\n\nimport { VaMessageListWrapper } from '../va-input'\nimport { VaIcon } from '../va-icon/'\n\nconst VaCheckboxValueType = [Boolean, Array, String, Object] as PropType<boolean | null | string | number | Record<any, unknown> | unknown[]>\n\nexport default defineComponent({\n  name: 'VaCheckbox',\n  components: { VaMessageListWrapper, VaIcon },\n  emits: useSelectableEmits,\n  props: {\n    ...useSelectableProps,\n    ...useComponentPresetProp,\n    modelValue: { type: VaCheckboxValueType, default: false },\n    color: { type: String, default: 'primary' },\n    checkedIcon: { type: String, default: 'va-check' },\n    indeterminate: { type: Boolean, default: false },\n    indeterminateValue: { type: VaCheckboxValueType, default: null },\n    indeterminateIcon: { type: String, default: 'remove' },\n    id: { type: String, default: '' },\n    name: { type: String, default: '' },\n    ariaLabel: { type: String, default: undefined },\n  },\n  setup (props, { emit }) {\n    const elements: Elements = {\n      container: shallowRef<HTMLElement>(),\n      input: shallowRef<HTMLElement>(),\n      label: shallowRef<HTMLElement>(),\n    }\n\n    const {\n      isChecked,\n      computedError,\n      isIndeterminate,\n      computedErrorMessages,\n      validationAriaAttributes,\n      toggleSelection,\n      onBlur,\n      onFocus,\n    } = useSelectable(props, emit, elements)\n    const { getColor } = useColors()\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\n    const { textColorComputed } = useTextColor()\n\n    const isActive = computed(() => isChecked.value || isIndeterminate.value)\n\n    const computedClass = computed(() => ({\n      'va-checkbox--selected': isChecked.value,\n      'va-checkbox--readonly': props.readonly,\n      'va-checkbox--disabled': props.disabled,\n      'va-checkbox--indeterminate': props.indeterminate,\n      'va-checkbox--error': computedError.value,\n      'va-checkbox--left-label': props.leftLabel,\n      'va-checkbox--on-keyboard-focus': hasKeyboardFocus.value,\n    }))\n\n    const labelStyle = computed(() => {\n      return {\n        color: computedError.value ? getColor('danger') : '',\n        padding: !props.label\n          ? ''\n          : props.leftLabel\n            ? '0 0.5rem 0 0'\n            : '0 0 0 0.5rem',\n      }\n    })\n\n    const inputStyle = computed(() => {\n      const style = {\n        background: isActive.value ? getColor(props.color) : '',\n        borderColor: isActive.value ? getColor(props.color) : '',\n      }\n\n      if (computedError.value) {\n        style.borderColor = getColor('danger')\n      }\n\n      return style\n    })\n\n    const computedIconName = computed(() => props.indeterminate && isIndeterminate.value\n      ? props.indeterminateIcon\n      : props.checkedIcon,\n    )\n\n    const uniqueId = computed(generateUniqueId)\n    const computedId = computed(() => props.id || uniqueId.value)\n    const computedName = computed(() => props.name || uniqueId.value)\n    const inputAttributesComputed = computed(() => ({\n      name: computedName.value,\n      disabled: props.disabled,\n      readonly: props.readonly,\n      tabindex: props.disabled ? -1 : 0,\n      'aria-label': props.ariaLabel,\n      'aria-disabled': props.disabled,\n      'aria-readOnly': props.readonly,\n      'aria-checked': isActive.value,\n      ...validationAriaAttributes.value,\n    }))\n\n    return {\n      isActive,\n      computedClass,\n      labelStyle,\n      inputStyle,\n      computedIconName,\n      textColorComputed,\n      computedError,\n      computedErrorMessages,\n      keyboardFocusListeners,\n      toggleSelection,\n      onBlur,\n      onFocus,\n      inputAttributesComputed,\n      computedId,\n      computedName,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-checkbox {\n  display: var(--va-checkbox-display);\n  max-width: fit-content;\n  font-family: var(--va-font-family);\n\n  &__input-container {\n    align-items: center;\n    display: flex;\n    padding: var(--va-checkbox-input-padding);\n    cursor: var(--va-checkbox-input-cursor);\n    font-size: var(--va-checkbox-font-size);\n    line-height: var(--va-checkbox-line-height);\n\n    @at-root {\n      .va-checkbox--disabled & {\n        @include va-disabled();\n\n        cursor: var(--va-checkbox-disabled-cursor);\n      }\n\n      .va-checkbox--readonly & {\n        cursor: var(--va-checkbox-readonly-cursor);\n      }\n\n      .va-checkbox--left-label & {\n        flex-direction: row-reverse;\n      }\n    }\n  }\n\n  #{&}__square {\n    @include flex-center();\n\n    width: var(--va-checkbox-square-width);\n    min-width: var(--va-checkbox-square-min-width);\n    height: var(--va-checkbox-square-height);\n    position: relative;\n    background-color: var(--va-checkbox-square-background-color);\n    border: var(--va-checkbox-square-border, var(--va-control-border));\n    border-radius: var(--va-checkbox-square-border-radius);\n\n    @at-root {\n      .va-checkbox--on-keyboard-focus#{&} {\n        transition: all, 0.6s, ease-in;\n        outline: 2px solid var(--va-focus);\n      }\n    }\n  }\n\n  &__input {\n    @include visually-hidden;\n  }\n\n  &__label {\n    display: var(--va-checkbox-label-display);\n    position: relative;\n  }\n\n  &__icon {\n    pointer-events: none;\n    position: absolute;\n  }\n\n  &--selected {\n    .va-checkbox {\n      &__icon {\n        color: var(--va-checkbox-selected-icon-color);\n      }\n    }\n  }\n\n  &--indeterminate {\n    .va-checkbox {\n      &__icon {\n        color: var(--va-checkbox-indeterminate-icon-color);\n      }\n    }\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}