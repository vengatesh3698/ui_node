{"ast":null,"code":"import { defineComponent, computed } from \"vue\";\nimport { o as omit } from \"../../../vendor-fff696df.mjs\";\nimport { V as VaButton } from \"../va-button/index-b0a9ef70.mjs\";\nimport { V as VaButtonGroup } from \"../va-button-group/index-7f4343c5.mjs\";\nimport { u as useSelectableListProps, a as useSelectableList } from \"../../composables/useSelectableList-a02a95a9.mjs\";\nimport { e as extractComponentProps } from \"../../utils/component-options/extract-component-options-6b96d215.mjs\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset-0dfbd395.mjs\";\nimport { u as useColors } from \"../../composables/useColors-f23d24ff.mjs\";\nconst VaButtonGroupProps = extractComponentProps(VaButtonGroup);\nconst _sfc_main = defineComponent({\n  name: \"VaButtonToggle\",\n  components: {\n    VaButtonGroup,\n    VaButton\n  },\n  emits: [\"update:modelValue\"],\n  props: {\n    ...VaButtonGroupProps,\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    modelValue: {\n      type: [String, Number, Boolean],\n      default: \"\"\n    },\n    options: {\n      type: Array,\n      required: true\n    },\n    activeButtonTextColor: {\n      type: String\n    },\n    toggleColor: {\n      type: String,\n      default: \"\"\n    },\n    textBy: {\n      type: [String, Function],\n      default: \"label\"\n    },\n    valueBy: {\n      type: [String, Function],\n      default: \"value\"\n    }\n  },\n  setup(props, {\n    emit\n  }) {\n    const {\n      getText,\n      getTrackBy\n    } = useSelectableList(props);\n    const {\n      getColor,\n      shiftHSLAColor\n    } = useColors();\n    const colorComputed = computed(() => getColor(props.color));\n    const isToggled = value => getTrackBy(value) === props.modelValue;\n    const activeButtonColor = computed(() => {\n      if (props.toggleColor) {\n        return getColor(props.toggleColor);\n      }\n      return shiftHSLAColor(colorComputed.value, {\n        l: props.plain ? -16 : -6\n      });\n    });\n    const activeButtonBackgroundOpacityComputed = computed(() => {\n      if (!props.preset || props.preset === \"default\") {\n        return {};\n      }\n      return {\n        backgroundOpacity: props.pressedOpacity\n      };\n    });\n    const activeButtonPropsComputed = computed(() => ({\n      color: activeButtonColor.value,\n      textColor: props.activeButtonTextColor,\n      ...activeButtonBackgroundOpacityComputed.value\n    }));\n    const getButtonProps = (option = {}) => {\n      const iconsProps = {\n        icon: option.icon,\n        iconRight: option.iconRight\n      };\n      if (!isToggled(option)) {\n        return iconsProps;\n      }\n      return {\n        ...(isToggled(option) && activeButtonPropsComputed.value),\n        ...iconsProps\n      };\n    };\n    const buttonGroupPropsComputed = computed(() => omit(props, [\"modelValue\", \"options\", \"activeButtonTextColor\", \"toggleColor\"]));\n    const changeValue = value => emit(\"update:modelValue\", getTrackBy(value));\n    return {\n      buttonGroupPropsComputed,\n      getButtonProps,\n      changeValue,\n      isToggled,\n      getText,\n      getTrackBy\n    };\n  }\n});\nexport { _sfc_main as _ };\nimport '../../../VaButtonToggle.css';","map":{"version":3,"names":["VaButtonGroupProps","extractComponentProps","VaButtonGroup","_sfc_main","defineComponent","name","components","VaButton","emits","props","useComponentPresetProp","useSelectableListProps","modelValue","type","String","Number","Boolean","default","options","Array","required","activeButtonTextColor","toggleColor","textBy","Function","valueBy","setup","emit","getText","getTrackBy","useSelectableList","getColor","shiftHSLAColor","useColors","colorComputed","computed","color","isToggled","value","activeButtonColor","l","plain","activeButtonBackgroundOpacityComputed","preset","backgroundOpacity","pressedOpacity","activeButtonPropsComputed","textColor","getButtonProps","option","iconsProps","icon","iconRight","buttonGroupPropsComputed","omit","changeValue"],"sources":["../../../../../src/components/va-button-toggle/VaButtonToggle.vue"],"sourcesContent":["<template>\n  <va-button-group\n    class=\"va-button-toggle\"\n    v-bind=\"buttonGroupPropsComputed\"\n  >\n    <va-button\n      v-for=\"option in options\"\n      :key=\"getTrackBy(option)\"\n      :aria-pressed=\"isToggled(option)\"\n      v-bind.prop=\"getButtonProps(option)\"\n      @click=\"changeValue(option)\"\n    >\n      {{ getText(option) }}\n    </va-button>\n  </va-button-group>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\nimport omit from 'lodash/omit.js'\n\nimport { extractComponentProps } from '../../utils/component-options'\n\nimport { useComponentPresetProp, useColors, useSelectableList, useSelectableListProps } from '../../composables'\n\nimport { VaButton } from '../va-button'\nimport { VaButtonGroup } from '../va-button-group'\n\nimport type { ButtonOption } from './types'\nimport type { StringOrFunction } from '../../composables'\n\nconst VaButtonGroupProps = extractComponentProps(VaButtonGroup)\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    ...VaButtonGroupProps,\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    modelValue: { type: [String, Number, Boolean], default: '' },\n    options: {\n      type: Array as PropType<ButtonOption[]>,\n      required: true,\n    },\n    activeButtonTextColor: { type: String },\n    toggleColor: { type: String, default: '' },\n\n    textBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'label' },\n    valueBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'value' },\n  },\n\n  setup (props, { emit }) {\n    const { getText, getTrackBy } = useSelectableList(props)\n    const { getColor, shiftHSLAColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n\n    const isToggled = (value: any) => getTrackBy(value) === props.modelValue\n\n    const activeButtonColor = computed(() => {\n      if (props.toggleColor) { return getColor(props.toggleColor) }\n      return shiftHSLAColor(colorComputed.value, { l: props.plain ? -16 : -6 })\n    })\n\n    const activeButtonBackgroundOpacityComputed = computed(() => {\n      if (!props.preset || props.preset === 'default') { return {} }\n      return { backgroundOpacity: props.pressedOpacity }\n    })\n\n    const activeButtonPropsComputed = computed(() => ({\n      color: activeButtonColor.value,\n      textColor: props.activeButtonTextColor,\n      ...activeButtonBackgroundOpacityComputed.value,\n    }))\n\n    const getButtonProps = (option: ButtonOption = {} as ButtonOption) => {\n      const iconsProps = { icon: option.icon, iconRight: option.iconRight }\n\n      if (!isToggled(option)) { return iconsProps }\n      return {\n        ...(isToggled(option) && activeButtonPropsComputed.value),\n        ...iconsProps,\n      }\n    }\n\n    const buttonGroupPropsComputed = computed(() =>\n      omit(props, ['modelValue', 'options', 'activeButtonTextColor', 'toggleColor']),\n    )\n\n    const changeValue = (value: any) => emit('update:modelValue', getTrackBy(value))\n\n    return {\n      buttonGroupPropsComputed,\n      getButtonProps,\n      changeValue,\n      isToggled,\n      getText,\n      getTrackBy,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import '../../styles/resources';\n\n.va-button-toggle {\n  .va-button {\n    @include keyboard-focus-outline($offset: -2px);\n\n    height: auto;\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}