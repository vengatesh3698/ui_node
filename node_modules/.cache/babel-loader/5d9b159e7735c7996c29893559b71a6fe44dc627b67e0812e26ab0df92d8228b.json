{"ast":null,"code":"import { computed } from \"vue\";\nimport { m as merge, s as startCase } from \"../../../../vendor-fff696df.mjs\";\nimport { a as useItemsProp } from \"./useCommonProps-59d5fc97.mjs\";\nimport { w as warn } from \"../../../utils/console-42c8e8cc.mjs\";\nconst sortingOptionsValidator = options => {\n  const isAllowedOptionsLength = options.length === 2 || options.length === 3;\n  const isAvailableOptions = options.every(option => [\"asc\", \"desc\", null].includes(option));\n  const isUniqueOptions = options.length === new Set(options).size;\n  return isAllowedOptionsLength && isAvailableOptions && isUniqueOptions;\n};\nconst useColumnsProps = {\n  ...useItemsProp,\n  columns: {\n    type: Array,\n    default: () => []\n  },\n  sortingOptions: {\n    type: Array,\n    default: () => [\"asc\", \"desc\", null],\n    validator: sortingOptionsValidator\n  }\n};\nconst buildTableColumn = (source, initialIndex, props) => {\n  const input = typeof source === \"string\" ? {\n    key: source\n  } : source;\n  const isValidOptions = input.sortingOptions ? sortingOptionsValidator(input.sortingOptions) : true;\n  if (!isValidOptions) {\n    warn(`The \"sortingOptions\" array in the column with \"${input.key}\" key is invalid. For this column, the \"sortingOptions\" value is taken as for the table: ${JSON.stringify(props.sortingOptions)}.`);\n  }\n  return {\n    source,\n    initialIndex,\n    key: input.key,\n    name: input.name || input.key,\n    label: input.label || startCase(input.key),\n    thTitle: input.thTitle || input.headerTitle || input.label || startCase(input.key),\n    sortable: input.sortable || false,\n    sortingFn: input.sortingFn,\n    sortingOptions: isValidOptions && input.sortingOptions || props.sortingOptions,\n    thAlign: input.thAlign || input.alignHead || \"left\",\n    thVerticalAlign: input.thVerticalAlign || input.verticalAlignHead || \"middle\",\n    tdAlign: input.tdAlign || input.align || \"left\",\n    tdVerticalAlign: input.tdVerticalAlign || input.verticalAlign || \"middle\",\n    width: input.width,\n    tdClass: input.tdClass || input.classes,\n    thClass: input.thClass || input.headerClasses,\n    tdStyle: input.tdStyle || input.style,\n    thStyle: input.thStyle || input.headerStyle\n  };\n};\nconst buildColumnsFromItems = props => {\n  return Object.keys(merge({}, ...props.items)).map((item, index) => buildTableColumn(item, index, props));\n};\nconst buildNormalizedColumns = props => {\n  return props.columns.map((item, index) => buildTableColumn(item, index, props));\n};\nconst useColumns = props => {\n  const columnsComputed = computed(() => {\n    if (props.columns.length === 0) {\n      return buildColumnsFromItems(props);\n    } else {\n      return buildNormalizedColumns(props);\n    }\n  });\n  return {\n    columnsComputed\n  };\n};\nexport { useColumns as a, useColumnsProps as u };","map":{"version":3,"names":["sortingOptionsValidator","options","isAllowedOptionsLength","length","isAvailableOptions","every","option","includes","isUniqueOptions","Set","size","useColumnsProps","useItemsProp","columns","type","Array","default","sortingOptions","validator","buildTableColumn","source","initialIndex","props","input","key","isValidOptions","warn","JSON","stringify","name","label","startCase","thTitle","headerTitle","sortable","sortingFn","thAlign","alignHead","thVerticalAlign","verticalAlignHead","tdAlign","align","tdVerticalAlign","verticalAlign","width","tdClass","classes","thClass","headerClasses","tdStyle","style","thStyle","headerStyle","buildColumnsFromItems","Object","keys","merge","items","map","item","index","buildNormalizedColumns","useColumns","columnsComputed","computed"],"sources":["../../../../../../src/components/va-data-table/hooks/useColumns.ts"],"sourcesContent":["import { computed, ExtractPropTypes, PropType } from 'vue'\nimport startCase from 'lodash/startCase.js'\nimport merge from 'lodash/merge.js'\n\nimport { useItemsProp } from './useCommonProps'\n\nimport { warn } from '../../../utils/console'\n\nimport type {\n  DataTableColumnSource,\n  DataTableColumnInternal,\n  DataTableSortingOptions,\n} from '../types'\n\nexport const sortingOptionsValidator = (options: DataTableSortingOptions) => {\n  const isAllowedOptionsLength = options.length === 2 || options.length === 3\n  const isAvailableOptions = options.every((option) => ['asc', 'desc', null].includes(option))\n  const isUniqueOptions = (options.length === new Set(options).size)\n\n  return isAllowedOptionsLength && isAvailableOptions && isUniqueOptions\n}\n\nexport const useColumnsProps = {\n  ...useItemsProp,\n  columns: { type: Array as PropType<DataTableColumnSource[]>, default: () => [] as DataTableColumnSource[] },\n  sortingOptions: {\n    type: Array as PropType<DataTableSortingOptions>,\n    default: () => ['asc', 'desc', null],\n    validator: sortingOptionsValidator,\n  },\n}\n\ntype useColumnsPropsType = ExtractPropTypes<typeof useColumnsProps>\n\nexport const buildTableColumn = (\n  source: DataTableColumnSource,\n  initialIndex: number,\n  props: useColumnsPropsType,\n): DataTableColumnInternal => {\n  const input = typeof source === 'string' ? { key: source } : source\n\n  const isValidOptions = input.sortingOptions\n    ? sortingOptionsValidator(input.sortingOptions)\n    : true\n\n  if (!isValidOptions) {\n    warn(`The \"sortingOptions\" array in the column with \"${input.key}\" key is invalid. For this column, the \"sortingOptions\" value is taken as for the table: ${JSON.stringify(props.sortingOptions)}.`)\n  }\n\n  return {\n    source,\n    initialIndex,\n    key: input.key,\n    name: input.name || input.key,\n    label: input.label || startCase(input.key),\n    thTitle: input.thTitle || input.headerTitle || input.label || startCase(input.key),\n    sortable: input.sortable || false,\n    sortingFn: input.sortingFn,\n    sortingOptions: (isValidOptions && input.sortingOptions) || props.sortingOptions,\n    thAlign: input.thAlign || input.alignHead || 'left',\n    thVerticalAlign: input.thVerticalAlign || input.verticalAlignHead || 'middle',\n    tdAlign: input.tdAlign || input.align || 'left',\n    tdVerticalAlign: input.tdVerticalAlign || input.verticalAlign || 'middle',\n    width: input.width,\n    tdClass: input.tdClass || input.classes,\n    thClass: input.thClass || input.headerClasses,\n    tdStyle: input.tdStyle || input.style,\n    thStyle: input.thStyle || input.headerStyle,\n  }\n}\n\nconst buildColumnsFromItems = (props: useColumnsPropsType) => {\n  return Object.keys(merge({}, ...props.items)).map((item, index) => buildTableColumn(item, index, props))\n}\n\nconst buildNormalizedColumns = (props: useColumnsPropsType) => {\n  return props.columns.map((item, index) => buildTableColumn(item, index, props))\n}\n\nexport const useColumns = (props: useColumnsPropsType) => {\n  const columnsComputed = computed(() => {\n    if (props.columns.length === 0) {\n      // if no column definitions provided then build them based on provided rawItems\n      // e.g. if provided items look like `[{a: 1}, {b: 2}]` then there should be 2 columns: A and B\n      return buildColumnsFromItems(props)\n    } else {\n      return buildNormalizedColumns(props)\n    }\n  })\n\n  return {\n    columnsComputed,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}