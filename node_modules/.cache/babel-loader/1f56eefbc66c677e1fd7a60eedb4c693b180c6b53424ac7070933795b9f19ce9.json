{"ast":null,"code":"import \"core-js/modules/web.url-search-params.size.js\";\nexport var exportToFile = function (export_data, rowKeys, file_name, flag) {\n  if (!export_data || !rowKeys) return;\n  var obj = {\n    \"CSV\": \"CSV\"\n  };\n  var result,\n    ctr,\n    keys,\n    columnDelimiter,\n    lineDelimiter,\n    data,\n    fileData,\n    count = 0;\n  columnDelimiter = export_data.columnDelimiter || ',';\n  lineDelimiter = export_data.lineDelimiter || '\\n';\n  result = '';\n  if (Array.isArray(export_data)) {\n    execute(export_data, false);\n  } else {\n    for (var a in export_data) {\n      execute(export_data[a], true);\n    }\n  }\n  function execute(params, arr_flag) {\n    data = params;\n    if (arr_flag) {\n      keys = Object.keys(data[0]);\n      var mapper = keys.map(function (item) {\n        return rowKeys[item] || item;\n      });\n      result += mapper.join(columnDelimiter);\n      if (count == 0) {\n        result += lineDelimiter;\n        count++;\n      } else {\n        result += columnDelimiter;\n      }\n    } else {\n      keys = Object.keys(rowKeys);\n      result += Object.values(rowKeys).join(columnDelimiter);\n      result += lineDelimiter;\n    }\n    if (data.length > 0) {\n      data.map(function (item) {\n        ctr = 0;\n        keys.map(function (key) {\n          if (ctr > 0) result += columnDelimiter;\n          if (item[key] != undefined) {\n            if (flag == obj.CSV) {\n              result += item[key];\n            } else {\n              result += typeof item[key] == 'string' && item[key].includes('\\t') ? item[key] : '\"' + item[key] + '\"';\n            }\n          }\n          ctr++;\n        });\n        result += lineDelimiter;\n        fileData = result;\n      });\n    } else {\n      fileData = result;\n    }\n  }\n  var link = document.createElement(\"a\");\n  if (flag == obj.CSV) {\n    var filename = file_name + '.csv';\n    var blob = new Blob([fileData], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    var url = URL.createObjectURL(blob);\n  } else {\n    var filename = file_name + '.xlsx';\n    var blob = new Blob(['\\ufeff', fileData], {\n      type: 'application/vnd.ms-excel'\n    });\n    var url = URL.createObjectURL(blob);\n  }\n  link.href = url;\n  link.download = filename;\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};","map":{"version":3,"names":["exportToFile","export_data","rowKeys","file_name","flag","obj","result","ctr","keys","columnDelimiter","lineDelimiter","data","fileData","count","Array","isArray","execute","a","params","arr_flag","Object","mapper","map","item","join","values","length","key","undefined","CSV","includes","link","document","createElement","filename","blob","Blob","type","url","URL","createObjectURL","href","download","style","visibility","body","appendChild","click","removeChild"],"sources":["/etc/ec/code/gn_ui/src/module/exportFile.js"],"sourcesContent":["export var exportToFile = function (export_data, rowKeys, file_name, flag) {\n    if (!export_data || !rowKeys)\n      return;\n    var obj = {\n      \"CSV\": \"CSV\"\n    }\n    var result, ctr, keys, columnDelimiter, lineDelimiter, data, fileData, count = 0;\n    columnDelimiter = export_data.columnDelimiter || ',';\n    lineDelimiter = export_data.lineDelimiter || '\\n';\n    result = '';\n  \n    if (Array.isArray(export_data)) {\n      execute(export_data, false)\n    } else {\n      for (var a in export_data) {\n        execute(export_data[a], true);\n      }\n    }\n  \n    function execute(params, arr_flag) {\n      data = params;\n      if (arr_flag) {\n        keys = Object.keys(data[0]);\n        var mapper = keys.map(function (item) {\n          return rowKeys[item] || item;\n        })\n        result += mapper.join(columnDelimiter);\n        if (count == 0) {\n          result += lineDelimiter;\n          count++;\n        }\n        else {\n          result += columnDelimiter\n        }\n      } else {\n        keys = Object.keys(rowKeys);\n        result += Object.values(rowKeys).join(columnDelimiter);\n        result += lineDelimiter;\n      }\n      if (data.length > 0) {\n        data.map(function (item) {\n          ctr = 0;\n          keys.map(function (key) {\n            if (ctr > 0) result += columnDelimiter;\n            if (item[key] != undefined) {\n              if (flag == obj.CSV) {\n                result += item[key];\n              } else {\n                result += ((typeof (item[key]) == 'string') && (item[key].includes('\\t'))) ? item[key] : '\"' + item[key] + '\"';\n              }\n            }\n            ctr++;\n          });\n          result += lineDelimiter;\n          fileData = result;\n        });\n      } else {\n        fileData = result;\n      }\n    }\n    var link = document.createElement(\"a\");\n  \n    if (flag == obj.CSV) {\n      var filename = file_name + '.csv';\n      var blob = new Blob([fileData], { type: 'text/csv;charset=utf-8;' });\n      var url = URL.createObjectURL(blob);\n    } else {\n      var filename = file_name + '.xlsx';\n      var blob = new Blob(['\\ufeff', fileData], { type: 'application/vnd.ms-excel' });\n      var url = URL.createObjectURL(blob);\n    }\n    link.href = url;\n    link.download = filename;\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}