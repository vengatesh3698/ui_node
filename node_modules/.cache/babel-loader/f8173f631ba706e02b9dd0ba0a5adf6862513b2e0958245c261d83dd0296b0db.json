{"ast":null,"code":"import { provide, computed, unref, ref } from \"vue\";\nimport { F as FormServiceKey } from \"./consts-bc55152e.mjs\";\nimport { u as useFormChild } from \"./useFormChild-62e9064d.mjs\";\nconst createFormContext = options => {\n  const fields = ref( /* @__PURE__ */new Map());\n  return {\n    // Vue unwrap ref automatically, but types are not for some reason\n    fields: computed(() => [...fields.value.values()]),\n    doShowError: computed(() => !options.hideErrors),\n    doShowErrorMessages: computed(() => !options.hideErrorMessages),\n    doShowLoading: computed(() => !options.hideLoading),\n    registerField: (uid, field) => {\n      fields.value.set(uid, field);\n    },\n    unregisterField: uid => {\n      fields.value.delete(uid);\n    }\n  };\n};\nconst useFormParent = options => {\n  const formContext = createFormContext(options);\n  provide(FormServiceKey, formContext);\n  const {\n    fields\n  } = formContext;\n  const fieldNames = computed(() => fields.value.map(field => unref(field.name)).filter(Boolean));\n  const formData = computed(() => fields.value.reduce((acc, field) => {\n    if (unref(field.name)) {\n      acc[unref(field.name)] = field.value;\n    }\n    return acc;\n  }, {}));\n  const isValid = computed(() => fields.value.every(field => unref(field.isValid)));\n  const isLoading = computed(() => fields.value.some(field => unref(field.isLoading)));\n  const errorMessages = computed(() => fields.value.map(field => unref(field.errorMessages)).flat());\n  const errorMessagesNamed = computed(() => fields.value.reduce((acc, field) => {\n    if (unref(field.name)) {\n      acc[unref(field.name)] = unref(field.errorMessages);\n    }\n    return acc;\n  }, {}));\n  const validate = () => {\n    return fields.value.reduce((acc, field) => {\n      return field.validate() && acc;\n    }, true);\n  };\n  const validateAsync = () => {\n    return Promise.all(fields.value.map(field => field.validateAsync())).then(results => {\n      return results.every(Boolean);\n    });\n  };\n  const reset = () => {\n    fields.value.forEach(field => field.reset());\n  };\n  const resetValidation = () => {\n    fields.value.forEach(field => field.resetValidation());\n  };\n  const focus = () => {\n    var _a;\n    (_a = fields.value[0]) == null ? void 0 : _a.focus();\n  };\n  const focusInvalidField = () => {\n    const invalidField = fields.value.find(field => !field.isValid);\n    invalidField == null ? void 0 : invalidField.focus();\n  };\n  useFormChild({\n    name: ref(void 0),\n    isValid,\n    isLoading,\n    validate,\n    validateAsync,\n    reset,\n    resetValidation,\n    focus,\n    errorMessages\n  });\n  return {\n    formData,\n    fields,\n    fieldNames,\n    isValid,\n    isLoading,\n    errorMessages,\n    errorMessagesNamed,\n    validate,\n    reset,\n    resetValidation,\n    focus,\n    focusInvalidField\n  };\n};\nexport { useFormParent as u };","map":{"version":3,"names":["createFormContext","options","fields","ref","Map","computed","value","values","doShowError","hideErrors","doShowErrorMessages","hideErrorMessages","doShowLoading","hideLoading","registerField","uid","field","set","unregisterField","delete","useFormParent","formContext","provide","FormServiceKey","fieldNames","map","unref","name","filter","Boolean","formData","reduce","acc","isValid","every","isLoading","some","errorMessages","flat","errorMessagesNamed","validate","validateAsync","Promise","all","then","results","reset","forEach","resetValidation","focus","_a","focusInvalidField","invalidField","find","useFormChild"],"sources":["../../../../../src/composables/useForm/useFormParent.ts"],"sourcesContent":["import { computed, provide, ref, shallowRef, type Ref, unref } from 'vue'\nimport { FormServiceKey } from './consts'\nimport { Form, FormFiled } from './types'\nimport { useFormChild } from './useFormChild'\n\ntype FormParentOptions = {\n  hideLoading: boolean\n  hideErrors: boolean\n  hideErrorMessages: boolean\n}\n\nexport const createFormContext = <Names extends string>(options: FormParentOptions) => {\n  const fields = ref(new Map<number, FormFiled<Names>>())\n\n  return {\n    // Vue unwrap ref automatically, but types are not for some reason\n    fields: computed(() => [...fields.value.values()]),\n    doShowError: computed(() => !options.hideErrors),\n    doShowErrorMessages: computed(() => !options.hideErrorMessages),\n    doShowLoading: computed(() => !options.hideLoading),\n    registerField: (uid: number, field: FormFiled) => {\n      fields.value.set(uid, field as FormFiled<Names>)\n    },\n    unregisterField: (uid: number) => {\n      fields.value.delete(uid)\n    },\n  }\n}\n\nexport const useFormParent = <Names extends string = string>(options: FormParentOptions): Form<Names> => {\n  const formContext = createFormContext<Names>(options)\n\n  provide(FormServiceKey, formContext)\n\n  const { fields } = formContext\n\n  const fieldNames = computed(() => fields.value.map((field) => unref(field.name)).filter(Boolean) as Names[])\n  const formData = computed(() => fields.value.reduce((acc, field) => {\n    if (unref(field.name)) { acc[unref(field.name) as Names] = field.value }\n    return acc\n  }, {} as Record<Names, FormFiled['value']>))\n  const isValid = computed(() => fields.value.every((field) => unref(field.isValid)))\n  const isLoading = computed(() => fields.value.some((field) => unref(field.isLoading)))\n  const errorMessages = computed(() => fields.value.map((field) => unref(field.errorMessages)).flat())\n  const errorMessagesNamed = computed(() => fields.value.reduce((acc, field) => {\n    if (unref(field.name)) { acc[unref(field.name) as Names] = unref(field.errorMessages) }\n    return acc\n  }, {} as Record<Names, any>))\n\n  const validate = () => {\n    // Validate each filed to get the error messages\n    return fields.value.reduce((acc, field) => {\n      return field.validate() && acc\n    }, true)\n  }\n\n  const validateAsync = () => {\n    return Promise.all(fields.value.map((field) => field.validateAsync())).then((results) => {\n      return results.every(Boolean)\n    })\n  }\n\n  const reset = () => {\n    fields.value.forEach((field) => field.reset())\n  }\n\n  const resetValidation = () => {\n    fields.value.forEach((field) => field.resetValidation())\n  }\n\n  const focus = () => {\n    fields.value[0]?.focus()\n  }\n\n  const focusInvalidField = () => {\n    const invalidField = fields.value.find((field) => !field.isValid)\n\n    invalidField?.focus()\n  }\n\n  useFormChild({\n    name: ref(undefined),\n    isValid: isValid,\n    isLoading: isLoading,\n    validate,\n    validateAsync,\n    reset,\n    resetValidation,\n    focus,\n    errorMessages: errorMessages,\n  })\n\n  return {\n    formData,\n    fields,\n    fieldNames,\n    isValid,\n    isLoading,\n    errorMessages,\n    errorMessagesNamed,\n    validate,\n    reset,\n    resetValidation,\n    focus,\n    focusInvalidField,\n  }\n}\n"],"mappings":";;;AAWa,MAAAA,iBAAA,GAA2CC,OAAA,IAA+B;EACrF,MAAMC,MAAA,GAASC,GAAA,EAAQ,mBAAAC,GAAA,CAA+B;EAE/C;IAAA;IAELF,MAAA,EAAQG,QAAA,CAAS,MAAM,CAAC,GAAGH,MAAA,CAAOI,KAAA,CAAMC,MAAA,CAAO,CAAC,CAAC;IACjDC,WAAA,EAAaH,QAAA,CAAS,MAAM,CAACJ,OAAA,CAAQQ,UAAU;IAC/CC,mBAAA,EAAqBL,QAAA,CAAS,MAAM,CAACJ,OAAA,CAAQU,iBAAiB;IAC9DC,aAAA,EAAeP,QAAA,CAAS,MAAM,CAACJ,OAAA,CAAQY,WAAW;IAClDC,aAAA,EAAeA,CAACC,GAAA,EAAaC,KAAA,KAAqB;MACzCd,MAAA,CAAAI,KAAA,CAAMW,GAAA,CAAIF,GAAA,EAAKC,KAAyB;IACjD;IACAE,eAAA,EAAkBH,GAAA,IAAgB;MACzBb,MAAA,CAAAI,KAAA,CAAMa,MAAA,CAAOJ,GAAG;IACzB;EAAA;AAEJ;AAEa,MAAAK,aAAA,GAAgDnB,OAAA,IAA4C;EACjG,MAAAoB,WAAA,GAAcrB,iBAAA,CAAyBC,OAAO;EAEpDqB,OAAA,CAAQC,cAAA,EAAgBF,WAAW;EAE7B;IAAEnB;EAAW,IAAAmB,WAAA;EAEnB,MAAMG,UAAA,GAAanB,QAAA,CAAS,MAAMH,MAAA,CAAOI,KAAA,CAAMmB,GAAA,CAAKT,KAAA,IAAUU,KAAA,CAAMV,KAAA,CAAMW,IAAI,CAAC,EAAEC,MAAA,CAAOC,OAAO,CAAY;EACrG,MAAAC,QAAA,GAAWzB,QAAA,CAAS,MAAMH,MAAA,CAAOI,KAAA,CAAMyB,MAAA,CAAO,CAACC,GAAA,EAAKhB,KAAA,KAAU;IAC9D,IAAAU,KAAA,CAAMV,KAAA,CAAMW,IAAI,GAAG;MAAEK,GAAA,CAAIN,KAAA,CAAMV,KAAA,CAAMW,IAAI,CAAU,IAAIX,KAAA,CAAMV,KAAA;IAAM;IAChE,OAAA0B,GAAA;EAAA,GACN,EAAuC,CAAC;EAC3C,MAAMC,OAAA,GAAU5B,QAAA,CAAS,MAAMH,MAAA,CAAOI,KAAA,CAAM4B,KAAA,CAAOlB,KAAA,IAAUU,KAAA,CAAMV,KAAA,CAAMiB,OAAO,CAAC,CAAC;EAClF,MAAME,SAAA,GAAY9B,QAAA,CAAS,MAAMH,MAAA,CAAOI,KAAA,CAAM8B,IAAA,CAAMpB,KAAA,IAAUU,KAAA,CAAMV,KAAA,CAAMmB,SAAS,CAAC,CAAC;EACrF,MAAME,aAAA,GAAgBhC,QAAA,CAAS,MAAMH,MAAA,CAAOI,KAAA,CAAMmB,GAAA,CAAKT,KAAA,IAAUU,KAAA,CAAMV,KAAA,CAAMqB,aAAa,CAAC,EAAEC,IAAA,CAAM;EAC7F,MAAAC,kBAAA,GAAqBlC,QAAA,CAAS,MAAMH,MAAA,CAAOI,KAAA,CAAMyB,MAAA,CAAO,CAACC,GAAA,EAAKhB,KAAA,KAAU;IACxE,IAAAU,KAAA,CAAMV,KAAA,CAAMW,IAAI,GAAG;MAAEK,GAAA,CAAIN,KAAA,CAAMV,KAAA,CAAMW,IAAI,CAAU,IAAID,KAAA,CAAMV,KAAA,CAAMqB,aAAa;IAAE;IAC/E,OAAAL,GAAA;EAAA,GACN,EAAwB,CAAC;EAE5B,MAAMQ,QAAA,GAAWA,CAAA,KAAM;IAErB,OAAOtC,MAAA,CAAOI,KAAA,CAAMyB,MAAA,CAAO,CAACC,GAAA,EAAKhB,KAAA,KAAU;MAClC,OAAAA,KAAA,CAAMwB,QAAA,CAAc,KAAAR,GAAA;IAAA,GAC1B,IAAI;EAAA;EAGT,MAAMS,aAAA,GAAgBA,CAAA,KAAM;IAC1B,OAAOC,OAAA,CAAQC,GAAA,CAAIzC,MAAA,CAAOI,KAAA,CAAMmB,GAAA,CAAKT,KAAA,IAAUA,KAAA,CAAMyB,aAAA,CAAe,EAAC,EAAEG,IAAA,CAAMC,OAAA,IAAY;MAChF,OAAAA,OAAA,CAAQX,KAAA,CAAML,OAAO;IAAA,CAC7B;EAAA;EAGH,MAAMiB,KAAA,GAAQA,CAAA,KAAM;IAClB5C,MAAA,CAAOI,KAAA,CAAMyC,OAAA,CAAS/B,KAAA,IAAUA,KAAA,CAAM8B,KAAA,EAAO;EAAA;EAG/C,MAAME,eAAA,GAAkBA,CAAA,KAAM;IAC5B9C,MAAA,CAAOI,KAAA,CAAMyC,OAAA,CAAS/B,KAAA,IAAUA,KAAA,CAAMgC,eAAA,EAAiB;EAAA;EAGzD,MAAMC,KAAA,GAAQA,CAAA,KAAM;;IACX,CAAAC,EAAA,GAAAhD,MAAA,CAAAI,KAAA,CAAM,CAAC,MAAP,gBAAA4C,EAAA,CAAUD,KAAA;EAAM;EAGzB,MAAME,iBAAA,GAAoBA,CAAA,KAAM;IACxB,MAAAC,YAAA,GAAelD,MAAA,CAAOI,KAAA,CAAM+C,IAAA,CAAMrC,KAAA,IAAU,CAACA,KAAA,CAAMiB,OAAO;IAEhEmB,YAAA,oBAAAA,YAAA,CAAcH,KAAA;EAAM;EAGTK,YAAA;IACX3B,IAAA,EAAMxB,GAAA,CAAI,MAAS;IACnB8B,OAAA;IACAE,SAAA;IACAK,QAAA;IACAC,aAAA;IACAK,KAAA;IACAE,eAAA;IACAC,KAAA;IACAZ;EAAA,CACD;EAEM;IACLP,QAAA;IACA5B,MAAA;IACAsB,UAAA;IACAS,OAAA;IACAE,SAAA;IACAE,aAAA;IACAE,kBAAA;IACAC,QAAA;IACAM,KAAA;IACAE,eAAA;IACAC,KAAA;IACAE;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}