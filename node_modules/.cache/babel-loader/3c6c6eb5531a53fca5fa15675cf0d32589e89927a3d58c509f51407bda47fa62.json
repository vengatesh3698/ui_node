{"ast":null,"code":"import { a as getValueByKey } from \"../../../utils/value-by-key-5e6df8a4.mjs\";\nconst useTreeViewProps = {\n  nodes: {\n    type: Array,\n    default: []\n  },\n  stateful: {\n    type: Boolean,\n    default: true\n  },\n  selectable: {\n    type: Boolean,\n    default: false\n  },\n  selectionType: {\n    type: String,\n    default: \"leaf\",\n    validator: v => [\"leaf\", \"independent\"].includes(v)\n  },\n  valueBy: {\n    type: [String, Function],\n    default: \"id\"\n  },\n  textBy: {\n    type: [String, Function],\n    default: \"label\"\n  },\n  trackBy: {\n    type: [String, Function],\n    default: \"id\"\n  },\n  iconBy: {\n    type: [String, Function],\n    default: \"icon\"\n  },\n  disabledBy: {\n    type: [String, Function],\n    default: \"disabled\"\n  },\n  expandedBy: {\n    type: [String, Function],\n    default: \"expanded\"\n  },\n  checkedBy: {\n    type: [String, Function],\n    default: \"checked\"\n  },\n  childrenBy: {\n    type: [String, Function],\n    default: \"children\"\n  },\n  expandAll: {\n    type: Boolean,\n    default: false\n  },\n  expanded: {\n    type: Array,\n    default: []\n  },\n  expandNodeBy: {\n    type: String,\n    default: \"leaf\"\n  },\n  filter: {\n    type: String,\n    default: \"\"\n  },\n  filterMethod: {\n    type: Function,\n    default: void 0\n  },\n  checked: {\n    type: Array,\n    default: []\n  },\n  color: {\n    type: String,\n    default: \"primary\"\n  }\n};\nconst useTreeViewEmits = [\"update:modelValue\", \"update:checked\", \"update:expanded\", \"update:selected\"];\nconst useTreeHelpers = props => {\n  const isStringOrNumber = node => {\n    const typeOfNode = typeof node;\n    return typeOfNode === \"string\" || typeOfNode === \"number\";\n  };\n  const getNodeProperty = (node, key) => !key || isStringOrNumber(node) ? node : getValueByKey(node, key);\n  const getValue = node => getNodeProperty(node, props.valueBy);\n  const getNodeByValue = value => {\n    if (!props.valueBy) {\n      return value;\n    }\n    return props.nodes.find(node => value === getValue(node)) || value;\n  };\n  const getText = node => getNodeProperty(node, props.textBy);\n  const getChecked = node => getNodeProperty(node, props.checkedBy);\n  const getDisabled = node => getNodeProperty(node, props.disabledBy);\n  const getExpanded = node => getNodeProperty(node, props.expandedBy);\n  const getTrackBy = node => getNodeProperty(node, props.trackBy);\n  const getChildren = node => getNodeProperty(node, props.childrenBy) ?? [];\n  const iterateNodes = (nodes, cb) => {\n    nodes.forEach(node => {\n      const children = node.children || [];\n      if (children.length) {\n        iterateNodes(children, cb);\n      }\n      cb(node);\n    });\n  };\n  return {\n    getText,\n    getValue,\n    getChecked,\n    getTrackBy,\n    getChildren,\n    getDisabled,\n    getExpanded,\n    iterateNodes,\n    getNodeByValue,\n    getNodeProperty\n  };\n};\nexport { useTreeViewEmits as a, useTreeHelpers as b, useTreeViewProps as u };","map":{"version":3,"names":["useTreeViewProps","nodes","type","Array","default","stateful","Boolean","selectable","selectionType","String","validator","v","includes","valueBy","Function","textBy","trackBy","iconBy","disabledBy","expandedBy","checkedBy","childrenBy","expandAll","expanded","expandNodeBy","filter","filterMethod","checked","color","useTreeViewEmits","useTreeHelpers","props","isStringOrNumber","node","typeOfNode","getNodeProperty","key","getValueByKey","getValue","getNodeByValue","value","find","getText","getChecked","getDisabled","getExpanded","getTrackBy","getChildren","iterateNodes","cb","forEach","children","length"],"sources":["../../../../../../src/components/va-tree-view/hooks/useTreeHelpers.ts"],"sourcesContent":["import { PropType, ExtractPropTypes } from 'vue'\n\nimport type { TreeNode, TreeViewFilterMethod, TreeViewPropKey } from '../types'\n\nimport { getValueByKey } from '../../../utils/value-by-key'\n\nexport const useTreeViewProps = {\n  nodes: {\n    type: Array as PropType<TreeNode[]>,\n    default: [],\n  },\n  stateful: {\n    type: Boolean,\n    default: true,\n  },\n  selectable: {\n    type: Boolean,\n    default: false,\n  },\n  selectionType: {\n    type: String,\n    default: 'leaf',\n    validator: (v: string) => ['leaf', 'independent'].includes(v),\n  },\n  valueBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'id',\n  },\n  textBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'label',\n  },\n  trackBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'id',\n  },\n  iconBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'icon',\n  },\n  disabledBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'disabled',\n  },\n  expandedBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'expanded',\n  },\n  checkedBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'checked',\n  },\n  childrenBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'children',\n  },\n  expandAll: {\n    type: Boolean,\n    default: false,\n  },\n  expanded: {\n    type: Array as PropType<(string | number | TreeNode)[]>,\n    default: [],\n  },\n  expandNodeBy: {\n    type: String as PropType<'leaf' | 'node'>,\n    default: 'leaf',\n  },\n  filter: {\n    type: String,\n    default: '',\n  },\n  filterMethod: {\n    type: Function as PropType<TreeViewFilterMethod | undefined>,\n    default: undefined,\n  },\n  checked: {\n    type: Array as PropType<(string | number | TreeNode)[]>,\n    default: [],\n  },\n  color: {\n    type: String,\n    default: 'primary',\n  },\n}\n\nexport const useTreeViewEmits = ['update:modelValue', 'update:checked', 'update:expanded', 'update:selected']\n\nexport const useTreeHelpers = (props: ExtractPropTypes<typeof useTreeViewProps>) => {\n  const isStringOrNumber = (node: TreeNode): node is any => {\n    const typeOfNode = typeof node\n\n    return typeOfNode === 'string' || typeOfNode === 'number'\n  }\n\n  const getNodeProperty = (node: TreeNode, key: TreeViewPropKey) =>\n    !key || isStringOrNumber(node) ? node : getValueByKey(node, key)\n\n  const getValue = (node: TreeNode) => getNodeProperty(node, props.valueBy)\n\n  const getNodeByValue = (value: TreeNode) => {\n    if (!props.valueBy) { return value }\n\n    return props.nodes.find((node: TreeNode) => value === getValue(node)) || value\n  }\n\n  const getText = (node: TreeNode) => getNodeProperty(node, props.textBy)\n  const getChecked = (node: TreeNode) => getNodeProperty(node, props.checkedBy)\n  const getDisabled = (node: TreeNode) => getNodeProperty(node, props.disabledBy)\n  const getExpanded = (node: TreeNode) => getNodeProperty(node, props.expandedBy)\n  const getTrackBy = (node: TreeNode) => getNodeProperty(node, props.trackBy)\n  const getChildren = (node: TreeNode) => getNodeProperty(node, props.childrenBy) ?? []\n\n  const iterateNodes = (nodes: TreeNode[], cb: (node: TreeNode) => unknown) => {\n    nodes.forEach((node: TreeNode) => {\n      const children = node.children || []\n\n      if (children.length) { iterateNodes(children, cb) }\n\n      cb(node)\n    })\n  }\n\n  return {\n    getText,\n    getValue,\n    getChecked,\n    getTrackBy,\n    getChildren,\n    getDisabled,\n    getExpanded,\n    iterateNodes,\n    getNodeByValue,\n    getNodeProperty,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}