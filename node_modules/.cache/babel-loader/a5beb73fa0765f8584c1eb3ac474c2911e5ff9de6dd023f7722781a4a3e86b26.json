{"ast":null,"code":"import { _ as _sfc_main } from \"./VaYearPicker.vue_vue_type_script_lang-f1764a6d.mjs\";\nimport { resolveComponent, openBlock, createElementBlock, mergeProps, withKeys, withModifiers, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString } from \"vue\";\nimport { _ as _export_sfc } from \"../../../../../plugin-vue_export-helper-cc2b3d55.mjs\";\nconst VaYearPicker_vue_vue_type_style_index_0_lang = \"\";\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_date_picker_cell = resolveComponent(\"va-date-picker-cell\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"rootNode\",\n    class: \"va-year-picker\"\n  }, _ctx.containerAttributes, {\n    onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers(() => {}, [\"prevent\"]), [\"space\"]))\n  }), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.years, (year, index) => {\n    return openBlock(), createBlock(_component_va_date_picker_cell, {\n      key: year.toString(),\n      \"in-range\": _ctx.isInRange(year),\n      selected: _ctx.isSelected(year),\n      disabled: _ctx.isYearDisabled(year),\n      today: _ctx.isToday(year),\n      focused: _ctx.focusedCellIndex === index,\n      \"highlight-today\": _ctx.highlightToday,\n      readonly: _ctx.$props.readonly,\n      color: _ctx.color,\n      onClick: $event => {\n        _ctx.onClick(year);\n        _ctx.focusedCellIndex = index;\n      },\n      onMouseenter: $event => _ctx.hoveredIndex = index,\n      onMouseleave: _cache[0] || (_cache[0] = $event => _ctx.hoveredIndex = -1)\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(year.getFullYear()), 1)]),\n      _: 2\n    }, 1032, [\"in-range\", \"selected\", \"disabled\", \"today\", \"focused\", \"highlight-today\", \"readonly\", \"color\", \"onClick\", \"onMouseenter\"]);\n  }), 128))], 16);\n}\nconst VaYearPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { VaYearPicker as V };","map":{"version":3,"names":["resolveComponent","openBlock","createElementBlock","mergeProps","ref","class","_ctx","containerAttributes","onKeydown","_cache","withKeys","withModifiers","Fragment","renderList","years","year","index","createBlock","_component_va_date_picker_cell","key","toString","isInRange","selected","isSelected","disabled","isYearDisabled","today","isToday","focused","focusedCellIndex","highlightToday","readonly","$props","color","onClick","$event","onMouseenter","hoveredIndex","onMouseleave","default","withCtx"],"sources":["../../../../../../../src/components/va-date-picker/components/VaYearPicker/VaYearPicker.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"rootNode\"\n    class=\"va-year-picker\"\n    v-bind=\"containerAttributes\"\n    @keydown.space.prevent\n  >\n    <va-date-picker-cell\n      v-for=\"(year, index) in years\"\n      :key=\"year.toString()\"\n      :in-range=\"isInRange(year)\"\n      :selected=\"isSelected(year)\"\n      :disabled=\"isYearDisabled(year)\"\n      :today=\"isToday(year)\"\n      :focused=\"focusedCellIndex === index\"\n      :highlight-today=\"highlightToday\"\n      :readonly=\"$props.readonly\"\n      :color=\"color\"\n      @click=\"onClick(year); focusedCellIndex = index\"\n      @mouseenter=\"hoveredIndex = index\"\n      @mouseleave=\"hoveredIndex = -1\"\n    >\n      {{ year.getFullYear() }}\n    </va-date-picker-cell>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, toRefs, onMounted, computed, watch, shallowRef } from 'vue'\n\nimport { createYearDate } from '../../utils/date-utils'\nimport { useGridKeyboardNavigation } from '../../hooks/grid-keyboard-navigation'\nimport { useDatePicker } from '../../hooks/use-picker'\n\nimport { DatePickerMode, DatePickerModelValue, DatePickerView } from '../../types'\n\nimport VaDatePickerCell from '../VaDatePickerCell.vue'\n\nexport default defineComponent({\n  name: 'VaYearPicker',\n  components: { VaDatePickerCell },\n\n  props: {\n    modelValue: { type: [Date, Array, Object] as PropType<DatePickerModelValue> },\n    allowedYears: { type: Function as PropType<(date: Date) => boolean>, default: undefined },\n    highlightToday: { type: Boolean, default: true },\n    startYear: { type: Number, default: 1970 },\n    mode: { type: String as PropType<DatePickerMode>, default: 'auto' },\n    view: { type: Object as PropType<DatePickerView>, default: () => ({ type: 'year' }) },\n    endYear: { type: Number, default: () => new Date().getFullYear() + 50 },\n    readonly: { type: Boolean, default: false },\n    color: { type: String, default: 'primary' },\n  },\n\n  emits: ['update:modelValue', 'hover:year', 'click:year'],\n\n  setup (props, { emit }) {\n    const rootNode = shallowRef<HTMLElement>()\n\n    const { view } = toRefs(props)\n\n    const generateYearsArray = (start: number, end: number) => {\n      const yearsCount = end - start + 1\n      return Array.from(Array(yearsCount).keys())\n        .map((i) => createYearDate(start + i))\n    }\n\n    const years = computed(() => generateYearsArray(props.startYear, props.endYear))\n\n    const scrollIntoYearIndex = (index: number) => {\n      if (!rootNode.value) { return }\n\n      const scrollHeight = rootNode.value.scrollHeight\n      const rootNodeHeight = rootNode.value.offsetHeight\n      const currentYearOffset = scrollHeight / years.value.length * index\n      const cellSize = scrollHeight / years.value.length\n      const relativeScrollPosition = currentYearOffset - rootNode.value.scrollTop\n\n      if (relativeScrollPosition < 0) {\n        // First element in view\n        rootNode.value.scrollTo({ top: currentYearOffset })\n      } else if (relativeScrollPosition > rootNodeHeight) {\n        // Last element in view\n        rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight + cellSize })\n      }\n    }\n\n    const scrollIntoYearIndexCenter = (index: number) => {\n      if (!rootNode.value) { return }\n\n      const scrollHeight = rootNode.value.scrollHeight\n      const rootNodeHeight = rootNode.value.offsetHeight\n      const currentYearOffset = scrollHeight / years.value.length * index\n\n      rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight / 2 })\n    }\n\n    onMounted(() => {\n      const currentYearIndex = years.value.findIndex((date) => date.getFullYear() === view.value.year)\n\n      scrollIntoYearIndexCenter(currentYearIndex)\n    })\n\n    const {\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n    } = useDatePicker('year', years, props, emit)\n\n    const isYearDisabled = (year: Date) => props.allowedYears === undefined ? false : !props.allowedYears(year)\n\n    const {\n      focusedCellIndex, containerAttributes,\n    } = useGridKeyboardNavigation({\n      rowSize: 1,\n      start: 0,\n      end: years.value.length,\n      onFocusIndex: computed(() => years.value.findIndex((date) => date.getFullYear() === view.value.year)),\n      onSelected: (selectedIndex) => onClick(years.value[selectedIndex]),\n    })\n\n    watch(focusedCellIndex, (index) => index !== -1 && scrollIntoYearIndex(index))\n    watch(focusedCellIndex, (index) => { hoveredIndex.value = index })\n    watch(hoveredIndex, (index) => { focusedCellIndex.value = index })\n\n    return {\n      hoveredIndex,\n      years,\n      rootNode,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n      isYearDisabled,\n      focusedCellIndex,\n      containerAttributes,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-year-picker {\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n  grid-gap: var(--va-date-picker-cell-gap);\n  max-height: 100%;\n  position: relative;\n}\n</style>\n"],"mappings":";;;;;yCACEA,gBAAA,CAuBM;EArBC,OAAAC,SAAA,CAAiB,GAAAC,kBAAA,QAAAC,UAAA;IACdC,GAAA;IACPC,KAAA;EAAA,GAAAC,IAAA,CAAAC,mBAAA;IAEDC,SAAA,EAAAC,MAAA,QAAAA,MAAA,MAAAC,QAAA,CAgBsBC,aAAA,CAfI,OAAhB,iBAAI,CAAE,OAAK;EAAA,MACbV,SAAA,KAAK,GAAQC,kBAAA,CAAAU,QAAA,QAAAC,UAAA,CAAAP,IAAA,CAAAQ,KAAA,GAAAC,IAAA,EAAAC,KAAA;IAClB,OAAAf,SAAA,IAAwBgB,WAAA,CAAAC,8BAAA;MACxBC,GAAA,EAAUJ,IAAA,CAAAK,QAAA;MACV,YAAUd,IAAA,CAAee,SAAA,CAAAN,IAAA;MACzBO,QAAA,EAAOhB,IAAA,CAAYiB,UAAA,CAAAR,IAAA;MACnBS,QAAA,EAASlB,IAAA,CAAgBmB,cAAA,CAAAV,IAAA;MACzBW,KAAA,EAAiBpB,IAAA,CAAAqB,OAAA,CAAAZ,IAAA;MACjBa,OAAA,EAAQtB,IAAA,CAAEuB,gBAAA,KAAeb,KAAA;MACzB,mBAAYV,IAAA,CAAAwB,cAAA;MACZC,QAAA,EAAKzB,IAAA,CAAE0B,MAAA,CAAAD,QAAA;MACPE,KAAA,EAAU3B,IAAA,CAAA2B,KAAA;MACVC,OAAA,EAAUC,MAAA;QAAA7B,IAAA,CAAA4B,OAAA,CAAAnB,IAAA;QAAET,IAAA,CAAAuB,gBAAA,GAAAb,KAAA;MAAY;MAAAoB,YAAA,EAAAD,MAAA,IAAA7B,IAAA,CAAA+B,YAAA,GAAArB,KAAA;MAEDsB,YAAA,EAAA7B,MAAA,QAAAA,MAAA,MAAA0B,MAAA,IAAA7B,IAAA,CAAA+B,YAAA;IAAA;MAAAE,OAAA,EAAAC,OAAA,Q"},"metadata":{},"sourceType":"module","externalDependencies":[]}