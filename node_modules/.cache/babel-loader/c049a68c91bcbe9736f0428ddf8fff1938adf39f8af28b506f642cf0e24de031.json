{"ast":null,"code":"const useTreeKeyboardNavigation = (props, methods) => {\n  const {\n    emit,\n    toggleNode,\n    toggleCheckbox\n  } = methods;\n  const isElementExpanded = currentElement => (currentElement == null ? void 0 : currentElement.getAttribute(\"aria-expanded\")) === \"true\";\n  const getParentElement = currentElement => {\n    var _a;\n    return ((_a = currentElement == null ? void 0 : currentElement.parentElement) == null ? void 0 : _a.closest(\".va-tree-node\")) || null;\n  };\n  const getPreviousElement = currentElement => currentElement == null ? void 0 : currentElement.previousElementSibling;\n  const findPreviousElement = currentElement => {\n    if (!currentElement) {\n      return null;\n    }\n    let previousElement = getPreviousElement(currentElement);\n    let lastChildElement = isElementExpanded(previousElement) && getLastChildElement(previousElement);\n    if (lastChildElement) {\n      do {\n        if (isElementExpanded(lastChildElement)) {\n          lastChildElement = getLastChildElement(lastChildElement);\n          if (lastChildElement) {\n            continue;\n          } else {\n            break;\n          }\n        } else {\n          previousElement = lastChildElement;\n          break;\n        }\n      } while (true);\n    }\n    if (!previousElement) {\n      return getParentElement(currentElement);\n    }\n    return previousElement;\n  };\n  const getNextElement = currentElement => currentElement == null ? void 0 : currentElement.nextElementSibling;\n  const findNextElement = currentElement => {\n    if (!currentElement) {\n      return null;\n    }\n    let nextElement = getNextElement(currentElement);\n    const isCurrentExpanded = isElementExpanded(currentElement);\n    if (!nextElement) {\n      let parentElement = getParentElement(currentElement);\n      do {\n        if (!getNextElement(parentElement)) {\n          parentElement = getParentElement(parentElement);\n          if (!parentElement) {\n            break;\n          } else {\n            continue;\n          }\n        } else {\n          nextElement = getNextElement(parentElement);\n          break;\n        }\n      } while (true);\n    }\n    if (isCurrentExpanded) {\n      return getFirstChildElement(currentElement);\n    }\n    return nextElement;\n  };\n  const getFirstChildElement = currentElement => {\n    var _a;\n    return ((_a = currentElement == null ? void 0 : currentElement.querySelector(\".va-tree-node-children\")) == null ? void 0 : _a.firstElementChild) || null;\n  };\n  const getLastChildElement = currentElement => {\n    var _a;\n    return ((_a = currentElement == null ? void 0 : currentElement.querySelector(\".va-tree-node-children\")) == null ? void 0 : _a.lastElementChild) || null;\n  };\n  const onHorizontalMove = (currentElement, dir, node) => {\n    var _a, _b;\n    const isCurrentElementExpanded = isElementExpanded(currentElement);\n    if (dir === \"left\") {\n      if (isCurrentElementExpanded) {\n        toggleNode(node);\n      } else {\n        (_a = getParentElement(currentElement)) == null ? void 0 : _a.focus();\n      }\n    } else {\n      if (!isCurrentElementExpanded) {\n        toggleNode(node);\n      } else {\n        (_b = getFirstChildElement(currentElement)) == null ? void 0 : _b.focus();\n      }\n    }\n  };\n  const onVerticalMove = (currentElement, dir) => {\n    var _a, _b;\n    if (dir === \"up\") {\n      (_a = findPreviousElement(currentElement)) == null ? void 0 : _a.focus();\n    } else {\n      (_b = findNextElement(currentElement)) == null ? void 0 : _b.focus();\n    }\n  };\n  const handleKeyboardNavigation = (event, node) => {\n    const currentElement = event.target;\n    switch (event.code) {\n      case \"ArrowUp\":\n        onVerticalMove(currentElement, \"up\");\n        break;\n      case \"ArrowRight\":\n        onHorizontalMove(currentElement, \"right\", node);\n        break;\n      case \"ArrowDown\":\n        onVerticalMove(currentElement, \"down\");\n        break;\n      case \"ArrowLeft\":\n        onHorizontalMove(currentElement, \"left\", node);\n        break;\n      case \"Space\":\n        if (props.selectable) {\n          const state = typeof node.checked !== \"undefined\" ? !node.checked : null;\n          toggleCheckbox(node, state);\n        } else {\n          emit(\"update:selected\", node);\n        }\n        break;\n      case \"Escape\":\n        if (!props.selectable) {\n          emit(\"update:selected\", null);\n        }\n        currentElement.blur();\n        break;\n      default:\n        currentElement.blur();\n    }\n  };\n  return {\n    handleKeyboardNavigation\n  };\n};\nconst useTreeKeyboardNavigation$1 = useTreeKeyboardNavigation;\nexport { useTreeKeyboardNavigation$1 as u };","map":{"version":3,"names":["useTreeKeyboardNavigation","props","methods","emit","toggleNode","toggleCheckbox","isElementExpanded","currentElement","getAttribute","getParentElement","_a","parentElement","closest","getPreviousElement","previousElementSibling","findPreviousElement","previousElement","lastChildElement","getLastChildElement","getNextElement","nextElementSibling","findNextElement","nextElement","isCurrentExpanded","getFirstChildElement","querySelector","firstElementChild","lastElementChild","onHorizontalMove","dir","node","_b","isCurrentElementExpanded","focus","onVerticalMove","handleKeyboardNavigation","event","target","code","selectable","state","checked","blur","useTreeKeyboardNavigation$1"],"sources":["../../../../../../src/components/va-tree-view/hooks/useTreeKeyboardNavigation.ts"],"sourcesContent":["import { ExtractPropTypes } from 'vue'\n\nimport type { TreeNode, TreeView, TreeViewEmitsFunc } from '../types'\nimport { useTreeViewProps } from './useTreeHelpers'\n\ntype TreeNodeElement = HTMLElement | null\ntype UseTreeKeyboardNavigationMethods = Pick<TreeView, 'toggleNode' | 'toggleCheckbox'> & {\n  emit: TreeViewEmitsFunc,\n}\n\nconst useTreeKeyboardNavigation = (\n  props: ExtractPropTypes<typeof useTreeViewProps>,\n  methods: UseTreeKeyboardNavigationMethods,\n) => {\n  const { emit, toggleNode, toggleCheckbox } = methods\n  const isElementExpanded = (currentElement: TreeNodeElement): boolean =>\n    currentElement?.getAttribute('aria-expanded') === 'true'\n\n  const getParentElement = (currentElement: TreeNodeElement): TreeNodeElement =>\n    currentElement?.parentElement?.closest('.va-tree-node') || null\n\n  const getPreviousElement = (currentElement: TreeNodeElement): TreeNodeElement =>\n    currentElement?.previousElementSibling as TreeNodeElement\n\n  const findPreviousElement = (currentElement: TreeNodeElement): TreeNodeElement => {\n    if (!currentElement) {\n      return null\n    }\n\n    let previousElement = getPreviousElement(currentElement)\n    let lastChildElement = isElementExpanded(previousElement) && getLastChildElement(previousElement)\n\n    if (lastChildElement) {\n      do {\n        if (isElementExpanded(lastChildElement)) {\n          lastChildElement = getLastChildElement(lastChildElement)\n\n          if (lastChildElement) {\n            continue\n          } else {\n            break\n          }\n        } else {\n          previousElement = lastChildElement\n          break\n        }\n      } while (true)\n    }\n\n    if (!previousElement) {\n      return getParentElement(currentElement)\n    }\n\n    return previousElement\n  }\n\n  const getNextElement = (currentElement: TreeNodeElement): TreeNodeElement =>\n    currentElement?.nextElementSibling as TreeNodeElement\n\n  const findNextElement = (currentElement: TreeNodeElement): TreeNodeElement => {\n    if (!currentElement) {\n      return null\n    }\n\n    let nextElement = getNextElement(currentElement)\n    const isCurrentExpanded = isElementExpanded(currentElement)\n\n    if (!nextElement) {\n      let parentElement = getParentElement(currentElement)\n\n      do {\n        if (!getNextElement(parentElement)) {\n          parentElement = getParentElement(parentElement)\n\n          if (!parentElement) {\n            break\n          } else {\n            continue\n          }\n        } else {\n          nextElement = getNextElement(parentElement)\n          break\n        }\n      } while (true)\n    }\n\n    if (isCurrentExpanded) {\n      return getFirstChildElement(currentElement)\n    }\n\n    return nextElement\n  }\n\n  const getFirstChildElement = (currentElement: TreeNodeElement): TreeNodeElement => {\n    return (currentElement?.querySelector('.va-tree-node-children')?.firstElementChild || null) as TreeNodeElement\n  }\n\n  const getLastChildElement = (currentElement: TreeNodeElement): TreeNodeElement => {\n    return (currentElement?.querySelector('.va-tree-node-children')?.lastElementChild || null) as TreeNodeElement\n  }\n\n  const onHorizontalMove = (currentElement: TreeNodeElement, dir: 'left' | 'right', node: TreeNode) => {\n    const isCurrentElementExpanded = isElementExpanded(currentElement)\n\n    if (dir === 'left') {\n      if (isCurrentElementExpanded) {\n        toggleNode(node)\n      } else {\n        getParentElement(currentElement)?.focus()\n      }\n    } else {\n      if (!isCurrentElementExpanded) {\n        toggleNode(node)\n      } else {\n        getFirstChildElement(currentElement)?.focus()\n      }\n    }\n  }\n\n  const onVerticalMove = (currentElement: HTMLElement, dir: 'up' | 'down') => {\n    if (dir === 'up') {\n      findPreviousElement(currentElement)?.focus()\n    } else {\n      findNextElement(currentElement)?.focus()\n    }\n  }\n\n  const handleKeyboardNavigation = (event: KeyboardEvent, node: TreeNode) => {\n    const currentElement = event.target as HTMLElement\n\n    switch (event.code) {\n      case 'ArrowUp':\n        onVerticalMove(currentElement, 'up')\n        break\n      case 'ArrowRight':\n        onHorizontalMove(currentElement, 'right', node)\n        break\n      case 'ArrowDown':\n        onVerticalMove(currentElement, 'down')\n        break\n      case 'ArrowLeft':\n        onHorizontalMove(currentElement, 'left', node)\n        break\n      case 'Space':\n        if (props.selectable) {\n          const state = typeof node.checked !== 'undefined' ? !node.checked : null\n\n          toggleCheckbox(node, state)\n        } else {\n          emit('update:selected', node)\n        }\n\n        break\n      case 'Escape':\n        if (!props.selectable) {\n          emit('update:selected', null)\n        }\n\n        currentElement.blur()\n\n        break\n      default:\n        currentElement.blur()\n    }\n  }\n\n  return { handleKeyboardNavigation }\n}\n\nexport default useTreeKeyboardNavigation\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}