{"ast":null,"code":"import { computed } from \"vue\";\nconst getMonthDaysCount = (year, month) => new Date(year, month + 1, 0).getDate();\nconst getMonthStartWeekday = (year, month) => new Date(year, month, 1).getDay();\nconst getNumbersArray = length => Array.from(Array(length).keys()).map(k => k + 1);\nconst useVaDatePickerCalendar = (view, options) => {\n  const CALENDAR_ROWS_COUNT = 6;\n  const localizeWeekday = weekdayNumber => {\n    var _a;\n    if (options && ((_a = options.firstWeekday) == null ? void 0 : _a.value) === \"Monday\") {\n      return weekdayNumber === 0 ? 6 : weekdayNumber - 1;\n    }\n    return weekdayNumber;\n  };\n  const currentMonthStartWeekday = computed(() => localizeWeekday(getMonthStartWeekday(view.value.year, view.value.month)));\n  const getPreviousDates = () => {\n    if (currentMonthStartWeekday.value === 0) {\n      return [];\n    }\n    const prevMonthDaysCount = getMonthDaysCount(view.value.year, view.value.month - 1);\n    const prevMonthDays = getNumbersArray(prevMonthDaysCount);\n    return prevMonthDays.slice(-currentMonthStartWeekday.value).map(d => new Date(view.value.year, view.value.month - 1, d));\n  };\n  const getCurrentDates = () => {\n    const currentMonthDays = getNumbersArray(getMonthDaysCount(view.value.year, view.value.month));\n    return currentMonthDays.map(d => new Date(view.value.year, view.value.month, d));\n  };\n  const prevAndCurrentDays = computed(() => [...getPreviousDates(), ...getCurrentDates()]);\n  const currentMonthEndIndex = computed(() => prevAndCurrentDays.value.length);\n  const calendarDates = computed(() => {\n    const days = prevAndCurrentDays.value;\n    const daysRemaining = 7 * CALENDAR_ROWS_COUNT - days.length;\n    const nextMonthDaysCount = getMonthDaysCount(view.value.year, view.value.month + 1);\n    const nextMonthDays = getNumbersArray(nextMonthDaysCount);\n    return [...days, ...nextMonthDays.slice(0, daysRemaining).map(d => new Date(view.value.year, view.value.month + 1, d))];\n  });\n  return {\n    calendarDates,\n    currentMonthStartIndex: currentMonthStartWeekday,\n    currentMonthEndIndex\n  };\n};\nexport { useVaDatePickerCalendar as u };","map":{"version":3,"names":["getMonthDaysCount","year","month","Date","getDate","getMonthStartWeekday","getDay","getNumbersArray","length","Array","from","keys","map","k","useVaDatePickerCalendar","view","options","CALENDAR_ROWS_COUNT","localizeWeekday","weekdayNumber","_a","firstWeekday","value","currentMonthStartWeekday","computed","getPreviousDates","prevMonthDaysCount","prevMonthDays","slice","d","getCurrentDates","currentMonthDays","prevAndCurrentDays","currentMonthEndIndex","calendarDates","days","daysRemaining","nextMonthDaysCount","nextMonthDays","currentMonthStartIndex"],"sources":["../../../../../../../src/components/va-date-picker/components/VaDayPicker/va-date-picker-calendar-hook.ts"],"sourcesContent":["import { computed, Ref } from 'vue'\n\nimport { DatePickerView } from '../../types'\n\n/** Returns last day of previous month */\nexport const getMonthDaysCount = (year: number, month: number): number => new Date(year, month + 1, 0).getDate()\n\nexport const getMonthStartWeekday = (year: number, month: number) => new Date(year, month, 1).getDay()\n\n/** Returns array from 1 to length */\nexport const getNumbersArray = (length: number) => Array.from(Array(length).keys()).map((k) => k + 1)\n\nexport const useVaDatePickerCalendar = (view: Ref<DatePickerView>, options?: { firstWeekday?: Ref<'Monday' | 'Sunday'> }) => {\n  const CALENDAR_ROWS_COUNT = 6 // Need 6 rows if first day of a month is Saturday and the last day is Monday 31th.\n\n  const localizeWeekday = (weekdayNumber: number) => {\n    if (options && options.firstWeekday?.value === 'Monday') {\n      // Set Sunday as 7th day of the week and Monday as first day of the week.\n      return weekdayNumber === 0 ? 6 : weekdayNumber - 1\n    }\n\n    return weekdayNumber\n  }\n\n  const currentMonthStartWeekday = computed(() => localizeWeekday(getMonthStartWeekday(view.value.year, view.value.month)))\n\n  const getPreviousDates = () => {\n    if (currentMonthStartWeekday.value === 0) { return [] }\n\n    const prevMonthDaysCount = getMonthDaysCount(view.value.year, view.value.month - 1)\n    const prevMonthDays: number[] = getNumbersArray(prevMonthDaysCount)\n\n    return prevMonthDays\n      .slice(-currentMonthStartWeekday.value)\n      .map((d) => new Date(view.value.year, view.value.month - 1, d))\n  }\n\n  const getCurrentDates = () => {\n    const currentMonthDays: number[] = getNumbersArray(getMonthDaysCount(view.value.year, view.value.month))\n\n    return currentMonthDays.map((d) => new Date(view.value.year, view.value.month, d))\n  }\n\n  const prevAndCurrentDays = computed(() => [...getPreviousDates(), ...getCurrentDates()])\n  const currentMonthEndIndex = computed(() => prevAndCurrentDays.value.length)\n\n  const calendarDates = computed(() => {\n    const days = prevAndCurrentDays.value\n\n    const daysRemaining = 7 * CALENDAR_ROWS_COUNT - days.length\n\n    const nextMonthDaysCount = getMonthDaysCount(view.value.year, view.value.month + 1)\n    const nextMonthDays: number[] = getNumbersArray(nextMonthDaysCount)\n\n    return [\n      ...days,\n      ...nextMonthDays\n        .slice(0, daysRemaining)\n        .map((d) => new Date(view.value.year, view.value.month + 1, d)),\n    ]\n  })\n\n  return { calendarDates, currentMonthStartIndex: currentMonthStartWeekday, currentMonthEndIndex }\n}\n"],"mappings":";AAKa,MAAAA,iBAAA,GAAoBA,CAACC,IAAA,EAAcC,KAAA,KAA0B,IAAIC,IAAA,CAAKF,IAAA,EAAMC,KAAA,GAAQ,GAAG,CAAC,EAAEE,OAAA,CAAQ;AAElG,MAAAC,oBAAA,GAAuBA,CAACJ,IAAA,EAAcC,KAAA,KAAkB,IAAIC,IAAA,CAAKF,IAAA,EAAMC,KAAA,EAAO,CAAC,EAAEI,MAAA;AAGvF,MAAMC,eAAA,GAAmBC,MAAA,IAAmBC,KAAA,CAAMC,IAAA,CAAKD,KAAA,CAAMD,MAAM,EAAEG,IAAA,CAAM,GAAEC,GAAA,CAAKC,CAAA,IAAMA,CAAA,GAAI,CAAC;AAEvF,MAAAC,uBAAA,GAA0BA,CAACC,IAAA,EAA2BC,OAAA,KAA0D;EAC3H,MAAMC,mBAAA,GAAsB;EAEtB,MAAAC,eAAA,GAAmBC,aAAA,IAA0B;;IACjD,IAAIH,OAAA,MAAWI,EAAA,GAAAJ,OAAA,CAAQK,YAAA,KAAR,gBAAAD,EAAA,CAAsBE,KAAA,MAAU,UAAU;MAEhD,OAAAH,aAAA,KAAkB,IAAI,IAAIA,aAAA,GAAgB;IACnD;IAEO,OAAAA,aAAA;EAAA;EAGT,MAAMI,wBAAA,GAA2BC,QAAA,CAAS,MAAMN,eAAA,CAAgBb,oBAAA,CAAqBU,IAAA,CAAKO,KAAA,CAAMrB,IAAA,EAAMc,IAAA,CAAKO,KAAA,CAAMpB,KAAK,CAAC,CAAC;EAExH,MAAMuB,gBAAA,GAAmBA,CAAA,KAAM;IACzB,IAAAF,wBAAA,CAAyBD,KAAA,KAAU,GAAG;MAAE,OAAO;IAAG;IAEhD,MAAAI,kBAAA,GAAqB1B,iBAAA,CAAkBe,IAAA,CAAKO,KAAA,CAAMrB,IAAA,EAAMc,IAAA,CAAKO,KAAA,CAAMpB,KAAA,GAAQ,CAAC;IAC5E,MAAAyB,aAAA,GAA0BpB,eAAA,CAAgBmB,kBAAkB;IAElE,OAAOC,aAAA,CACJC,KAAA,CAAM,CAACL,wBAAA,CAAyBD,KAAK,EACrCV,GAAA,CAAKiB,CAAA,IAAM,IAAI1B,IAAA,CAAKY,IAAA,CAAKO,KAAA,CAAMrB,IAAA,EAAMc,IAAA,CAAKO,KAAA,CAAMpB,KAAA,GAAQ,GAAG2B,CAAC,CAAC;EAAA;EAGlE,MAAMC,eAAA,GAAkBA,CAAA,KAAM;IACtB,MAAAC,gBAAA,GAA6BxB,eAAA,CAAgBP,iBAAA,CAAkBe,IAAA,CAAKO,KAAA,CAAMrB,IAAA,EAAMc,IAAA,CAAKO,KAAA,CAAMpB,KAAK,CAAC;IAEvG,OAAO6B,gBAAA,CAAiBnB,GAAA,CAAKiB,CAAA,IAAM,IAAI1B,IAAA,CAAKY,IAAA,CAAKO,KAAA,CAAMrB,IAAA,EAAMc,IAAA,CAAKO,KAAA,CAAMpB,KAAA,EAAO2B,CAAC,CAAC;EAAA;EAG7E,MAAAG,kBAAA,GAAqBR,QAAA,CAAS,MAAM,CAAC,GAAGC,gBAAA,IAAoB,GAAGK,eAAA,CAAiB,EAAC;EACvF,MAAMG,oBAAA,GAAuBT,QAAA,CAAS,MAAMQ,kBAAA,CAAmBV,KAAA,CAAMd,MAAM;EAErE,MAAA0B,aAAA,GAAgBV,QAAA,CAAS,MAAM;IACnC,MAAMW,IAAA,GAAOH,kBAAA,CAAmBV,KAAA;IAE1B,MAAAc,aAAA,GAAgB,IAAInB,mBAAA,GAAsBkB,IAAA,CAAK3B,MAAA;IAE/C,MAAA6B,kBAAA,GAAqBrC,iBAAA,CAAkBe,IAAA,CAAKO,KAAA,CAAMrB,IAAA,EAAMc,IAAA,CAAKO,KAAA,CAAMpB,KAAA,GAAQ,CAAC;IAC5E,MAAAoC,aAAA,GAA0B/B,eAAA,CAAgB8B,kBAAkB;IAE3D,QACL,GAAGF,IAAA,EACH,GAAGG,aAAA,CACAV,KAAA,CAAM,GAAGQ,aAAa,EACtBxB,GAAA,CAAKiB,CAAA,IAAM,IAAI1B,IAAA,CAAKY,IAAA,CAAKO,KAAA,CAAMrB,IAAA,EAAMc,IAAA,CAAKO,KAAA,CAAMpB,KAAA,GAAQ,GAAG2B,CAAC,CAAC;EAClE,CACD;EAED,OAAO;IAAEK,aAAA;IAAeK,sBAAA,EAAwBhB,wBAAA;IAA0BU;EAAqB;AACjG"},"metadata":{},"sourceType":"module","externalDependencies":[]}