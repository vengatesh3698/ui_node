{"ast":null,"code":"import { _ as _sfc_main } from \"./VaOptionList.vue_vue_type_script_lang-1abce1e7.mjs\";\nimport { resolveComponent, openBlock, createBlock, withCtx, createElementVNode, createElementBlock, Fragment, renderList, renderSlot, normalizeProps, guardReactiveProps, mergeProps } from \"vue\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper-cc2b3d55.mjs\";\nconst VaOptionList_vue_vue_type_style_index_0_lang = \"\";\nconst _hoisted_1 = {\n  class: \"va-option-list__list\"\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_radio = resolveComponent(\"va-radio\");\n  const _component_va_checkbox = resolveComponent(\"va-checkbox\");\n  const _component_va_switch = resolveComponent(\"va-switch\");\n  const _component_VaMessageListWrapper = resolveComponent(\"VaMessageListWrapper\");\n  return openBlock(), createBlock(_component_VaMessageListWrapper, {\n    error: _ctx.computedError,\n    \"error-messages\": _ctx.computedErrorMessages,\n    \"error-count\": _ctx.$props.errorCount\n  }, {\n    default: withCtx(() => [createElementVNode(\"ul\", _hoisted_1, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.options, option => {\n      return openBlock(), createElementBlock(\"li\", {\n        key: _ctx.getTrackBy(option)\n      }, [renderSlot(_ctx.$slots, \"default\", normalizeProps(guardReactiveProps({\n        option,\n        selectedValue: _ctx.selectedValue,\n        isDisabled: _ctx.isDisabled,\n        getText: _ctx.getText,\n        getValue: _ctx.getValue\n      })), () => [_ctx.$props.type === \"radio\" ? (openBlock(), createBlock(_component_va_radio, mergeProps({\n        key: 0,\n        ref_for: true,\n        ref: _ctx.setItemRef,\n        modelValue: _ctx.selectedValue,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.selectedValue = $event),\n        label: _ctx.getText(option),\n        disabled: _ctx.isDisabled(option),\n        option: _ctx.getValue(option)\n      }, _ctx.computedProps), null, 16, [\"modelValue\", \"label\", \"disabled\", \"option\"])) : _ctx.$props.type === \"checkbox\" ? (openBlock(), createBlock(_component_va_checkbox, mergeProps({\n        key: 1,\n        ref_for: true,\n        ref: _ctx.setItemRef,\n        modelValue: _ctx.selectedValue,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectedValue = $event),\n        label: _ctx.getText(option),\n        disabled: _ctx.isDisabled(option),\n        \"array-value\": _ctx.getValue(option)\n      }, _ctx.computedProps), null, 16, [\"modelValue\", \"label\", \"disabled\", \"array-value\"])) : (openBlock(), createBlock(_component_va_switch, mergeProps({\n        key: 2,\n        ref_for: true,\n        ref: _ctx.setItemRef,\n        modelValue: _ctx.selectedValue,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.selectedValue = $event),\n        label: _ctx.getText(option),\n        disabled: _ctx.isDisabled(option),\n        \"array-value\": _ctx.getValue(option)\n      }, _ctx.computedProps), null, 16, [\"modelValue\", \"label\", \"disabled\", \"array-value\"]))])]);\n    }), 128))])]),\n    _: 3\n  }, 8, [\"error\", \"error-messages\", \"error-count\"]);\n}\nconst _VaOptionList = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { _VaOptionList as _ };","map":{"version":3,"names":["_component_VaMessageListWrapper","resolveComponent","openBlock","createBlock","error","_ctx","computedError","computedErrorMessages","$props","errorCount","default","withCtx","createElementVNode","_hoisted_1","createElementBlock","Fragment","renderList","options","option","key","getTrackBy","renderSlot","$slots","normalizeProps","guardReactiveProps","selectedValue","isDisabled","getText","getValue","type","_component_va_radio","mergeProps","ref_for","ref","setItemRef","modelValue","_cache","$event","label","disabled","computedProps","_component_va_checkbox","_component_va_switch"],"sources":["../../../../../src/components/va-option-list/VaOptionList.vue"],"sourcesContent":["<template>\n  <VaMessageListWrapper\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"$props.errorCount\"\n  >\n    <ul class=\"va-option-list__list\">\n      <li\n        v-for=\"option in $props.options\"\n        :key=\"getTrackBy(option)\"\n      >\n        <slot v-bind=\"{ option, selectedValue, isDisabled, getText, getValue }\">\n          <va-radio\n            v-if=\"$props.type === 'radio'\"\n            :ref=\"setItemRef\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :option=\"getValue(option)\"\n            v-bind=\"computedProps\"\n          />\n          <va-checkbox\n            v-else-if=\"$props.type === 'checkbox'\"\n            :ref=\"setItemRef\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :array-value=\"getValue(option)\"\n            v-bind=\"computedProps\"\n          />\n          <va-switch\n            v-else\n            :ref=\"setItemRef\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :array-value=\"getValue(option)\"\n            v-bind=\"computedProps\"\n          />\n        </slot>\n      </li>\n    </ul>\n  </VaMessageListWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, onMounted } from 'vue'\nimport pick from 'lodash/pick.js'\n\nimport {\n  useComponentPresetProp,\n  useSelectableList, useSelectableListProps, SelectableOption,\n  useValidation, useValidationProps,\n  useStateful, useStatefulProps, useStatefulEmits,\n  useArrayRefs,\n} from '../../composables'\n\nimport { isDev } from '../../utils/env'\n\nimport { VaMessageListWrapper } from '../va-input'\nimport { VaCheckbox } from '../va-checkbox'\nimport { VaRadio } from '../va-radio'\nimport { VaSwitch } from '../va-switch'\n\ntype OptionListValue = SelectableOption | SelectableOption[] | null\n\nexport default defineComponent({\n  name: 'VaOptionList',\n  components: {\n    VaRadio,\n    VaCheckbox,\n    VaSwitch,\n    VaMessageListWrapper,\n  },\n  emits: [...useStatefulEmits, 'clear'],\n  props: {\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...useStatefulProps,\n    type: {\n      type: String as PropType<'radio' | 'checkbox' | 'switch'>,\n      default: 'checkbox',\n      validator: (type: any) => ['radio', 'checkbox', 'switch'].includes(type),\n    },\n    disabled: ({ type: Boolean, default: false }),\n    readonly: ({ type: Boolean, default: false }),\n    defaultValue: ({ type: [String, Number, Boolean, Object, Array] as PropType<OptionListValue | null> }),\n    name: ({ type: String, default: '' }),\n    color: ({ type: String, default: 'primary' }),\n    leftLabel: ({ type: Boolean, default: false }),\n    modelValue: ({ type: [String, Number, Boolean, Object, Array] as PropType<OptionListValue | null> }),\n  },\n\n  setup (props, { emit }) {\n    const { valueComputed } = useStateful(props, emit, 'modelValue', { defaultValue: props.defaultValue })\n\n    const { getValue, getText, getTrackBy, getDisabled } = useSelectableList(props)\n\n    const { itemRefs, setItemRef } = useArrayRefs()\n\n    const isRadio = computed(() => props.type === 'radio')\n\n    const selectedValue = computed({\n      get () {\n        const value = isRadio.value ? null : []\n\n        return valueComputed.value || value as OptionListValue\n      },\n      set (value: OptionListValue) {\n        if (props.readonly) { return }\n\n        if (isRadio.value && !Array.isArray(value)) {\n          valueComputed.value = value ? getValue(value) : value\n        } else {\n          valueComputed.value = Array.isArray(value)\n            ? value.map(getValue)\n            : [value ? getValue(value) : value]\n        }\n      },\n    })\n\n    const isDisabled = (option: SelectableOption) => props.disabled || getDisabled(option)\n\n    const reset = () => withoutValidation(() => {\n      valueComputed.value = null\n      emit('clear')\n      resetValidation()\n    })\n\n    const focus = () => {\n      const firstActiveEl = Array.isArray(itemRefs.value) && itemRefs.value.find(el => !(el as HTMLInputElement).disabled)\n\n      if (firstActiveEl && typeof firstActiveEl.focus === 'function') {\n        firstActiveEl.focus()\n      }\n    }\n\n    const {\n      computedError,\n      computedErrorMessages,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus, value: valueComputed })\n\n    const computedProps = computed(() => pick(props, ['name', 'color', 'readonly', 'leftLabel']))\n\n    onMounted(() => {\n      if (isDev && props.type !== 'radio' && !Array.isArray(props.modelValue)) {\n        console.warn(`Prop 'modelValue = ${props.modelValue}' has not a proper type!\\n For component property 'type = ${props.type}' it must be of type 'array'.`)\n      }\n    })\n\n    return {\n      selectedValue,\n      computedError,\n      computedErrorMessages,\n      getValue,\n      getText,\n      getTrackBy,\n      isDisabled,\n      reset,\n      focus,\n      setItemRef,\n      computedProps,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import 'variables';\n\n.va-option-list {\n  &__list {\n    line-height: var(--va-option-list-line-height);\n    margin: 0;\n    padding: 0;\n    list-style: none;\n    vertical-align: baseline;\n  }\n}\n</style>\n"],"mappings":";;;;;;;;;;;EA0CyB,MAAAA,+BAAA,GAAAC,gBAAA;EAvCpB,OAAAC,SAAA,IAAgBC,WAAA,CAAqBH,+BAAA;IACrCI,KAAA,EAAAC,IAAA,CAAAC,aAAA;IAAA,kBAAAD,IAAA,CAAAE,qBAAA;IAqCI,eAAAF,IAAA,CAAAG,MAAA,CAAAC;EAAA;IAlCHC,OAAA,EAAAC,OAAA,QAAAC,kBAAA,OAAAC,UAAA,IAAAX,SAAA,CAEQ,IAAiB,GAAAY,kBAAA,CAAAC,QAAA,QAAAC,UAAA,CAAAX,IAAA,CAAAG,MAAA,CAAAS,OAAA,EAAAC,MAAA;;QAEvBC,GAAA,EA4BOd,IAAA,CAAAe,UAAA,CAAAF,MAAA;MAAA,IAAAG,UAAA,CAAAhB,IAAA,CAAAiB,MAAA,EA3BL,WAQEC,cAAA,CAAAC,kBAAA;QAAAN,MAAA;QAAAO,aAAA,EAAApB,IAAA,CAAAoB,aAAA;QAAAC,UAAA,EAAArB,IAAA,CAAAqB,UAAA;QAAAC,OAAA,EAAAtB,IAAA,CAAAsB,OAAA;QAAAC,QAAA,EAAAvB,IAAA,CAAAuB;MAAA,YAAAvB,IAAA,CAAAG,MAAA,CAAAqB,IAAA,gBAAA3B,SAAA,IAAAC,WAAA,CAAA2B,mBAAA,EAAAC,UAAA;QANCZ,GAAA,EAAK;QAAAa,OAAA;QAAAC,GAAA,EAAA5B,IAAA,CAAA6B,UAAA;QAELC,UAAA,EAAO9B,IAAA,CAAAoB,aAAA;QACP,uBAAUW,MAAA,CAAW,CAAM,MAAAA,MAAA,MAAAC,MAAA,IAAAhC,IAAA,CAAAoB,aAAA,GAAAY,MAAA;QAC3BC,KAAA,EAAMjC,IAAA,CAAEsB,OAAA,CAAST,MAAA;QAAAqB,QAAA,EACVlC,IAAA,CAAaqB,UAAA,CAAAR,MAAA;QAGVA,MAAA,EAAAb,IAAA,CAAOuB,QAAA,CAAIV,MAAA;MAAA,GADxBb,IAAA,CAAAmC,aAAA,SAQE,4BARF,YAQE,cAAAnC,IAAA,CAAAG,MAAA,CAAAqB,IAAA,mBAAA3B,SAAA,IAAAC,WAAA,CAAAsC,sBAAA,EAAAV,UAAA;QANCZ,GAAA,EAAK;QAAAa,OAAA;QAAAC,GAAA,EAAA5B,IAAA,CAAA6B,UAAA;QAELC,UAAA,EAAO9B,IAAA,CAAAoB,aAAA;QACP,uBAAUW,MAAA,CAAW,CAAM,MAAAA,MAAA,MAAAC,MAAA,IAAAhC,IAAA,CAAAoB,aAAA,GAAAY,MAAA;QAC3BC,KAAA,EAAajC,IAAA,CAAAsB,OAAA,CAAAT,MAAA;QAAAqB,QAAA,EACNlC,IAAA,CAAaqB,UAAA,CAAAR,MAAA;QAAA,eAEvBb,IAAA,CAQEuB,QAAA,CAAAV,MAAA;MAAA,GAAAb,IAAA,CAAAmC,aAAA,qEAAAtC,SAAA,IAAAC,WAAA,CAAAuC,oBAAA,EAAAX,UAAA;QANCZ,GAAA,EAAK;QAAAa,OAAA;QAAAC,GAAA,EAAA5B,IAAA,CAAA6B,UAAA;QAELC,UAAA,EAAO9B,IAAA,CAAAoB,aAAA;QACP,uBAAUW,MAAA,CAAW,CAAM,MAAAA,MAAA,MAAAC,MAAA,IAAAhC,IAAA,CAAAoB,aAAA,GAAAY,MAAA;QAC3BC,KAAA,EAAajC,IAAA,CAAAsB,OAAA,CAAAT,MAAA;QAAAqB,QAAA,EACNlC,IAAA,CAAaqB,UAAA,CAAAR,MAAA;QAAA,eAAAb,IAAA,CAAAuB,QAAA,CAAAV,MAAA;MAAA,GAAAb,IAAA,CAAAmC,aAAA,kE"},"metadata":{},"sourceType":"module","externalDependencies":[]}