{"ast":null,"code":"import { watch } from \"vue\";\nimport { i as isServer } from \"../../../utils/ssr-fd33979c.mjs\";\nimport { j as cssVariableName } from \"../utils-21d3493b.mjs\";\nimport { u as useColors } from \"../../../composables/useColors-f23d24ff.mjs\";\nconst setCSSVariable = (name, value, root) => {\n  root.style.setProperty(cssVariableName(name), value);\n};\nconst createColorConfigPlugin = (app, config) => {\n  const {\n    colors: configColors,\n    getTextColor,\n    getColor,\n    currentPresetName,\n    applyPreset\n  } = useColors();\n  const renderCSSVariables = (colors = configColors) => {\n    if (!colors) {\n      return;\n    }\n    const colorNames = Object.keys(colors);\n    const renderedColors = colorNames.map(key => `${cssVariableName(key)}: ${colors[key]}`).join(\";\");\n    const renderedOnColors = colorNames.map(key => `${cssVariableName(`on-${key}`)}: ${getColor(getTextColor(colors[key]))}`).join(\";\");\n    return `${renderedColors};${renderedOnColors}`;\n  };\n  const updateColors = newValue => {\n    if (!newValue) {\n      return;\n    }\n    if (isServer()) {\n      return;\n    }\n    const root = document.documentElement;\n    const colorNames = Object.keys(newValue);\n    colorNames.forEach(key => {\n      setCSSVariable(key, newValue[key], root);\n    });\n    colorNames.forEach(key => {\n      setCSSVariable(`on-${key}`, getColor(getTextColor(newValue[key])), root);\n    });\n  };\n  watch(configColors, newValue => {\n    updateColors(newValue);\n  }, {\n    immediate: true,\n    deep: true\n  });\n  return {\n    renderCSSVariables,\n    updateColors\n  };\n};\nexport { createColorConfigPlugin as c };","map":{"version":3,"names":["setCSSVariable","name","value","root","style","setProperty","cssVariableName","createColorConfigPlugin","app","config","colors","configColors","getTextColor","getColor","currentPresetName","applyPreset","useColors","renderCSSVariables","colorNames","Object","keys","renderedColors","map","key","join","renderedOnColors","updateColors","newValue","isServer","document","documentElement","forEach","watch","immediate","deep"],"sources":["../../../../../../src/services/color/plugin/create-color-config-plugin.ts"],"sourcesContent":["import { PartialGlobalConfig } from './../../global-config/types'\nimport { ColorVariables } from './../types'\nimport { App, watch } from 'vue'\nimport { isServer } from '../../../utils/ssr'\nimport { cssVariableName } from '../utils'\nimport { useColors } from '../../../composables'\n\nexport const setCSSVariable = (name: string, value: string, root: HTMLElement) => {\n  root.style.setProperty(cssVariableName(name), value)\n}\n\nexport const createColorConfigPlugin = (app: App, config?: PartialGlobalConfig) => {\n  const { colors: configColors, getTextColor, getColor, currentPresetName, applyPreset } = useColors()\n\n  /** Renders CSS variables string. Use this in SSR mode */\n  const renderCSSVariables = (colors: ColorVariables | undefined = configColors) => {\n    if (!colors) { return }\n\n    const colorNames = Object.keys(colors)\n    const renderedColors = colorNames.map((key) => `${cssVariableName(key)}: ${colors[key]}`).join(';')\n    const renderedOnColors = colorNames.map((key) => `${cssVariableName(`on-${key}`)}: ${getColor(getTextColor(colors[key]))}`).join(';')\n\n    return `${renderedColors};${renderedOnColors}`\n  }\n\n  const updateColors = (newValue: ColorVariables | undefined) => {\n    if (!newValue) { return }\n    if (isServer()) { return }\n\n    const root = document.documentElement\n\n    const colorNames = Object.keys(newValue)\n    colorNames.forEach((key) => {\n      setCSSVariable(key, newValue[key], root)\n    })\n    colorNames.forEach((key) => {\n      setCSSVariable(`on-${key}`, getColor(getTextColor(newValue[key])), root)\n    })\n  }\n\n  watch(configColors, (newValue) => {\n    updateColors(newValue)\n  }, { immediate: true, deep: true })\n\n  return {\n    renderCSSVariables,\n    updateColors,\n  }\n}\n"],"mappings":";;;;AAOO,MAAMA,cAAA,GAAiBA,CAACC,IAAA,EAAcC,KAAA,EAAeC,IAAA,KAAsB;EAChFA,IAAA,CAAKC,KAAA,CAAMC,WAAA,CAAYC,eAAA,CAAgBL,IAAI,GAAGC,KAAK;AACrD;AAEa,MAAAK,uBAAA,GAA0BA,CAACC,GAAA,EAAUC,MAAA,KAAiC;EAC3E;IAAEC,MAAA,EAAQC,YAAA;IAAcC,YAAA;IAAcC,QAAA;IAAUC,iBAAA;IAAmBC;EAAA,IAAgBC,SAAA;EAGnF,MAAAC,kBAAA,GAAqBA,CAACP,MAAA,GAAqCC,YAAA,KAAiB;IAChF,IAAI,CAACD,MAAA,EAAQ;MAAE;IAAO;IAEhB,MAAAQ,UAAA,GAAaC,MAAA,CAAOC,IAAA,CAAKV,MAAM;IACrC,MAAMW,cAAA,GAAiBH,UAAA,CAAWI,GAAA,CAAKC,GAAA,IAAQ,GAAGjB,eAAA,CAAgBiB,GAAG,MAAMb,MAAA,CAAOa,GAAG,GAAG,EAAEC,IAAA,CAAK,GAAG;IAClG,MAAMC,gBAAA,GAAmBP,UAAA,CAAWI,GAAA,CAAKC,GAAA,IAAQ,GAAGjB,eAAA,CAAgB,MAAMiB,GAAA,EAAK,MAAMV,QAAA,CAASD,YAAA,CAAaF,MAAA,CAAOa,GAAG,CAAC,CAAC,GAAG,EAAEC,IAAA,CAAK,GAAG;IAEpI,OAAO,GAAGH,cAAA,IAAkBI,gBAAA;EAAA;EAGxB,MAAAC,YAAA,GAAgBC,QAAA,IAAyC;IAC7D,IAAI,CAACA,QAAA,EAAU;MAAE;IAAO;IACxB,IAAIC,QAAA,IAAY;MAAE;IAAO;IAEzB,MAAMzB,IAAA,GAAO0B,QAAA,CAASC,eAAA;IAEhB,MAAAZ,UAAA,GAAaC,MAAA,CAAOC,IAAA,CAAKO,QAAQ;IAC5BT,UAAA,CAAAa,OAAA,CAASR,GAAA,IAAQ;MAC1BvB,cAAA,CAAeuB,GAAA,EAAKI,QAAA,CAASJ,GAAG,GAAGpB,IAAI;IAAA,CACxC;IACUe,UAAA,CAAAa,OAAA,CAASR,GAAA,IAAQ;MACXvB,cAAA,OAAMuB,GAAA,IAAOV,QAAA,CAASD,YAAA,CAAae,QAAA,CAASJ,GAAG,CAAC,CAAC,GAAGpB,IAAI;IAAA,CACxE;EAAA;EAGG6B,KAAA,CAAArB,YAAA,EAAegB,QAAA,IAAa;IAChCD,YAAA,CAAaC,QAAQ;EAAA,GACpB;IAAEM,SAAA,EAAW;IAAMC,IAAA,EAAM;EAAM;EAE3B;IACLjB,kBAAA;IACAS;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}