{"ast":null,"code":"import { defineComponent, shallowRef, ref, computed, watch, nextTick } from \"vue\";\nimport { p as pick } from \"../../../vendor-fff696df.mjs\";\nimport { V as VaSelectOptionList } from \"./components/VaSelectOptionList/index-365020ae.mjs\";\nimport { V as VaSelectContent } from \"./components/VaSelectContent/index-eee36543.mjs\";\nimport { u as useMaxVisibleOptionsProps, a as useMaxVisibleOptions } from \"./hooks/useMaxVisibleOptions-a7eecfbc.mjs\";\nimport { u as useToggleIconProps, a as useToggleIcon } from \"./hooks/useToggleIcon-e991bbc8.mjs\";\nimport { u as useStringValueProps, a as useStringValue } from \"./hooks/useStringValue-1b278456.mjs\";\nimport { u as useAutocompleteProps, a as useAutocomplete } from \"./hooks/useAutocomplete-fdef5d6e.mjs\";\nimport { f as focusElement, b as blurElement } from \"../../utils/focus-7a563842.mjs\";\nimport { u as unwrapEl } from \"../../utils/unwrapEl-55936fea.mjs\";\nimport { i as isNilValue } from \"../../utils/isNilValue-745d19e7.mjs\";\nimport { w as warn } from \"../../utils/console-42c8e8cc.mjs\";\nimport { V as VaDropdownContent } from \"../va-dropdown/components/VaDropdownContent/index-d67c0ae9.mjs\";\nimport { V as VaInput } from \"../va-input/index-ab246709.mjs\";\nimport { V as VaInputWrapper } from \"../va-input/components/VaInputWrapper/VaInputWrapper-89658c86.mjs\";\nimport { u as useMaxSelectionsProps, a as useMaxSelections } from \"../../composables/useMaxSelections-2afbbe77.mjs\";\nimport { e as extractComponentProps } from \"../../utils/component-options/extract-component-options-6b96d215.mjs\";\nimport { V as VaIcon } from \"../va-icon/index-0ebbc0f2.mjs\";\nimport { V as VaDropdown } from \"../va-dropdown/index-2edb30e9.mjs\";\nimport { a as useValidationEmits, u as useValidationProps, b as useValidation } from \"../../composables/useValidation-a7c1fccc.mjs\";\nimport { a as useClearableEmits, u as useClearableProps, b as useClearable } from \"../../composables/useClearable-6c80b820.mjs\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset-0dfbd395.mjs\";\nimport { u as useSelectableListProps, a as useSelectableList } from \"../../composables/useSelectableList-a02a95a9.mjs\";\nimport { u as useLoadingProps } from \"../../composables/useLoading-5a447e96.mjs\";\nimport { u as useFormFieldProps } from \"../../composables/useFormField-0ac52e7e.mjs\";\nimport { u as useThrottleProps } from \"../../composables/useThrottle-cdbdff3a.mjs\";\nimport { u as useFocusDeep } from \"../../composables/useFocusDeep-86e6bbc0.mjs\";\nimport { u as useTranslation } from \"../../composables/useTranslation-acf7d88d.mjs\";\nimport { f as filterComponentProps } from \"../../utils/component-options/filter-props-9727421a.mjs\";\nimport { u as useBem } from \"../../composables/useBem-10a5bc6e.mjs\";\nconst VaDropdownProps = extractComponentProps(VaDropdown, [\"keyboardNavigation\", \"offset\", \"stateful\", \"keepAnchorWidth\", \"closeOnContentClick\", \"innerAnchorSelector\", \"modelValue\"]);\nconst _sfc_main = defineComponent({\n  name: \"VaSelect\",\n  components: {\n    VaSelectContent,\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaDropdownContent,\n    VaInput,\n    VaInputWrapper\n  },\n  emits: [\"update:modelValue\", \"update-search\", \"create-new\", \"scroll-bottom\", ...useValidationEmits, ...useClearableEmits],\n  props: {\n    ...VaDropdownProps,\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n    ...useClearableProps,\n    ...useFormFieldProps,\n    ...useMaxVisibleOptionsProps,\n    ...useToggleIconProps,\n    ...useThrottleProps,\n    ...useStringValueProps,\n    ...useAutocompleteProps,\n    modelValue: {\n      type: [String, Number, Array, Object, Boolean],\n      default: \"\"\n    },\n    // Dropdown placement\n    placement: {\n      type: String,\n      default: \"bottom\",\n      validator: placement => [\"top\", \"bottom\"].includes(placement)\n    },\n    allowCreate: {\n      type: [Boolean, String],\n      default: false,\n      validator: mode => [true, false, \"unique\"].includes(mode)\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    searchable: {\n      type: Boolean,\n      default: false\n    },\n    width: {\n      type: String,\n      default: \"100%\"\n    },\n    maxHeight: {\n      type: String,\n      default: \"256px\"\n    },\n    noOptionsText: {\n      type: String,\n      default: \"$t:noOptions\"\n    },\n    hideSelected: {\n      type: Boolean,\n      default: false\n    },\n    tabindex: {\n      type: [String, Number],\n      default: 0\n    },\n    virtualScroller: {\n      type: Boolean,\n      default: false\n    },\n    selectedTopShown: {\n      type: Boolean,\n      default: false\n    },\n    highlightMatchedText: {\n      type: Boolean,\n      default: true\n    },\n    minSearchChars: {\n      type: Number,\n      default: 0\n    },\n    autoSelectFirstOption: {\n      type: Boolean,\n      default: false\n    },\n    // Input style\n    outline: {\n      type: Boolean,\n      default: false\n    },\n    bordered: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      type: String,\n      default: \"\"\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    searchPlaceholderText: {\n      type: String,\n      default: \"$t:search\"\n    },\n    requiredMark: {\n      type: Boolean,\n      default: false\n    },\n    ariaLabel: {\n      type: String,\n      default: void 0\n    },\n    ariaSearchLabel: {\n      type: String,\n      default: \"$t:optionsFilter\"\n    },\n    ariaClearLabel: {\n      type: String,\n      default: \"$t:reset\"\n    }\n  },\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const optionList = shallowRef();\n    const input = shallowRef();\n    const searchBar = shallowRef();\n    const isInputFocused = useFocusDeep(input);\n    const {\n      getValue,\n      getText,\n      getTrackBy\n    } = useSelectableList(props);\n    const onScrollBottom = () => emit(\"scroll-bottom\");\n    const searchInput = ref(\"\");\n    const showSearchInput = computed(() => props.searchable || props.allowCreate && !props.autocomplete);\n    watch(searchInput, value => {\n      emit(\"update-search\", value);\n      hoveredOption.value = null;\n    });\n    const getOptionByValue = value => {\n      if (isNilValue(value) || typeof value === \"object\") {\n        return value;\n      }\n      const optionByValue = props.options.find(option => value === getValue(option));\n      if (optionByValue === void 0) {\n        warn(`[VaSelect]: can not find option in options list (${JSON.stringify(props.options)}) by provided value (${JSON.stringify(value)})!`);\n        return value;\n      }\n      return optionByValue;\n    };\n    const {\n      toggleHiddenOptionsState,\n      isAllOptionsShown,\n      visibleSelectedOptions,\n      hiddenSelectedOptionsAmount,\n      allSelectedOptions\n    } = useMaxVisibleOptions(props, getOptionByValue);\n    const valueComputed = computed({\n      get() {\n        if (props.multiple) {\n          return allSelectedOptions.value;\n        }\n        const value = getOptionByValue(props.modelValue);\n        if (Array.isArray(value)) {\n          warn(\"Model value should be a string, number, boolean or an object for a single Select.\");\n          if (value.length) {\n            return value.at(-1);\n          }\n        }\n        return value;\n      },\n      set(option) {\n        if (Array.isArray(option)) {\n          emit(\"update:modelValue\", option.map(getValue));\n        } else {\n          emit(\"update:modelValue\", getValue(option));\n        }\n      }\n    });\n    const valueString = useStringValue(props, visibleSelectedOptions, getText);\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur\n    } = useClearable(props, valueComputed);\n    const showClearIcon = computed(() => {\n      if (!canBeCleared.value) {\n        return false;\n      }\n      if (props.multiple && Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.length;\n      }\n      return true;\n    });\n    const filteredOptions = computed(() => {\n      if (!props.options) {\n        return [];\n      }\n      if (props.selectedTopShown) {\n        return props.options.slice().sort((a, b) => {\n          const isASelected = checkIsOptionSelected(a);\n          const isBSelected = checkIsOptionSelected(b);\n          if (isASelected && isBSelected) {\n            return 0;\n          }\n          if (isASelected && !isBSelected) {\n            return -1;\n          }\n          return 1;\n        });\n      }\n      if (props.hideSelected) {\n        return props.options.filter(option => !checkIsOptionSelected(option));\n      }\n      return props.options;\n    });\n    const checkIsOptionSelected = option => {\n      if (isNilValue(valueComputed.value)) {\n        return false;\n      }\n      if (Array.isArray(valueComputed.value)) {\n        return !isNilValue(valueComputed.value.find(valueItem => compareOptions(valueItem, option)));\n      }\n      return compareOptions(valueComputed.value, option);\n    };\n    const compareOptions = (option1, option2) => {\n      const one = getValue(option1);\n      const two = getValue(option2);\n      if (one === two) {\n        return true;\n      }\n      if (typeof one === \"string\" && typeof two === \"string\") {\n        return one === two;\n      }\n      if (one === null || two === null) {\n        return false;\n      }\n      if (typeof one === \"object\" && typeof two === \"object\") {\n        return getTrackBy(one) === getTrackBy(two);\n      }\n      return false;\n    };\n    const isValueComputedArray = v => Array.isArray(v.value);\n    const selectOption = option => {\n      if (hoveredOption.value === null) {\n        hideAndFocus();\n        return;\n      }\n      if (showSearchInput.value) {\n        searchInput.value = \"\";\n      }\n      if (props.multiple && isValueComputedArray(valueComputed)) {\n        const {\n          exceedsMaxSelections,\n          addOption\n        } = useMaxSelections(valueComputed, ref(props.maxSelections));\n        const isSelected = checkIsOptionSelected(option);\n        if (isSelected) {\n          valueComputed.value = valueComputed.value.filter(optionSelected => !compareOptions(option, optionSelected));\n        } else {\n          if (exceedsMaxSelections()) {\n            return;\n          }\n          valueComputed.value = addOption(option);\n        }\n      } else {\n        valueComputed.value = typeof option !== \"object\" ? option : {\n          ...option\n        };\n        hideAndFocus();\n      }\n      focusAutocompleteInput();\n    };\n    const addNewOption = () => {\n      var _a;\n      const hasAddedOption = (_a = props.options) == null ? void 0 : _a.some(option => [searchInput.value, autocompleteValue.value].includes(getText(option)));\n      const allowedToCreateCheck = !((props.allowCreate === \"unique\" || props.autocomplete) && hasAddedOption);\n      if (allowedToCreateCheck) {\n        emit(\"create-new\", searchInput.value || autocompleteValue.value);\n        searchInput.value = \"\";\n        autocompleteValue.value = \"\";\n      }\n    };\n    const hoveredOption = ref(null);\n    const selectHoveredOption = () => {\n      if (isNilValue(hoveredOption.value)) {\n        return;\n      }\n      if (!showDropdownContent.value) {\n        handleDropdownOpen();\n        return;\n      }\n      selectOption(hoveredOption.value);\n    };\n    const selectOrAddOption = () => {\n      const allowedToCreate = !!props.allowCreate && (searchInput.value || autocompleteValue.value);\n      if (hoveredOption.value !== null) {\n        selectHoveredOption();\n      } else if (allowedToCreate) {\n        addNewOption();\n      }\n    };\n    const focusPreviousOption = () => {\n      var _a;\n      return (_a = optionList.value) == null ? void 0 : _a.focusPreviousOption();\n    };\n    const focusNextOption = () => {\n      var _a;\n      return (_a = optionList.value) == null ? void 0 : _a.focusNextOption();\n    };\n    const showDropdownContent = ref(false);\n    const showDropdownContentComputed = computed({\n      get: () => showDropdownContent.value,\n      set: show => {\n        show ? handleDropdownOpen() : handleDropdownClose();\n      }\n    });\n    const closeOnContentClick = computed(() => {\n      return !(props.multiple || props.searchable || props.allowCreate);\n    });\n    const handleDropdownOpen = () => {\n      if (props.disabled || props.readonly) {\n        return;\n      }\n      showDropdownContent.value = true;\n      scrollToSelected();\n      focusSearchOrOptions();\n    };\n    const handleDropdownClose = () => {\n      showDropdownContent.value = false;\n      searchInput.value = \"\";\n      validate();\n    };\n    const hideAndFocus = () => {\n      handleDropdownClose();\n      isInputFocused.value = true;\n    };\n    const focusSearchBar = () => {\n      var _a;\n      (_a = searchBar.value) == null ? void 0 : _a.focus();\n    };\n    const focusOptionList = () => {\n      var _a, _b;\n      (_a = optionList.value) == null ? void 0 : _a.focus();\n      !props.modelValue && ((_b = optionList.value) == null ? void 0 : _b.focusFirstOption());\n    };\n    const focusSearchOrOptions = () => nextTick(() => {\n      if (showSearchInput.value) {\n        focusSearchBar();\n      } else {\n        focusOptionList();\n      }\n    });\n    const onInputFocus = () => {\n      isInputFocused.value = true;\n      onFocus();\n    };\n    const onInputBlur = () => {\n      if (showDropdownContentComputed.value) {\n        return;\n      }\n      onBlur();\n      isInputFocused.value ? isInputFocused.value = false : validate();\n    };\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex);\n    const inputWrapperTabIndexComputed = computed(() => props.disabled || props.autocomplete ? -1 : 0);\n    const scrollToSelected = () => {\n      const selected = valueComputed.value;\n      const nothingSelected = typeof selected !== \"object\" && Array.isArray(selected) && !selected.length;\n      if (nothingSelected) {\n        return;\n      }\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n      hoveredOption.value = scrollTo;\n      nextTick(() => {\n        var _a;\n        return (_a = optionList.value) == null ? void 0 : _a.scrollToOption(scrollTo);\n      });\n    };\n    let hintedSearchQuery = \"\";\n    let hintedSearchQueryTimeoutIndex;\n    const navigationKeys = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"Enter\", \" \"];\n    const onHintedSearch = event => {\n      if (navigationKeys.some(key => key === event.key)) {\n        return;\n      }\n      const isLetter = event.key.length === 1;\n      const isDeleteKey = event.key === \"Backspace\" || event.key === \"Delete\";\n      clearTimeout(hintedSearchQueryTimeoutIndex);\n      if (isDeleteKey) {\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : \"\";\n      } else if (isLetter) {\n        hintedSearchQuery += event.key;\n      }\n      if (showSearchInput.value) {\n        searchInput.value = hintedSearchQuery;\n        return;\n      }\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()));\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption;\n        }\n      }\n      hintedSearchQueryTimeoutIndex = setTimeout(() => {\n        hintedSearchQuery = \"\";\n      }, 1e3);\n    };\n    const {\n      tp,\n      t\n    } = useTranslation();\n    const filteredDropdownProps = filterComponentProps(VaDropdownProps);\n    const dropdownPropsComputed = computed(() => ({\n      ...filteredDropdownProps.value,\n      closeOnContentClick: closeOnContentClick.value,\n      stateful: false,\n      offset: [1, 0],\n      keepAnchorWidth: true,\n      keyboardNavigation: true,\n      innerAnchorSelector: \".va-input-wrapper__field\",\n      \"aria-label\": props.ariaLabel || (props.modelValue ? `${t(\"selectedOption\")}: ${props.modelValue}` : t(\"noSelectedOption\"))\n    }));\n    const optionsListPropsComputed = computed(() => ({\n      ...pick(props, [\"textBy\", \"trackBy\", \"groupBy\", \"valueBy\", \"disabledBy\", \"color\", \"virtualScroller\", \"highlightMatchedText\", \"minSearchChars\", \"delay\", \"selectedTopShown\"]),\n      autoSelectFirstOption: props.autoSelectFirstOption || props.autocomplete,\n      search: searchInput.value || autocompleteValue.value,\n      tabindex: tabIndexComputed.value,\n      selectedValue: valueComputed.value,\n      options: filteredOptions.value,\n      getSelectedState: checkIsOptionSelected,\n      noOptionsText: tp(props.noOptionsText)\n    }));\n    const {\n      toggleIcon,\n      toggleIconColor\n    } = useToggleIcon(props, showDropdownContent);\n    const isFocused = computed(() => isInputFocused.value || showDropdownContent.value);\n    const inputWrapperClassComputed = useBem(\"va-select-anchor\", () => ({\n      nowrap: !!(props.maxVisibleOptions && !slots.content)\n    }));\n    const inputWrapperPropsComputed = computed(() => ({\n      ...pick(props, [\"messages\", \"requiredMark\", \"bordered\", \"outline\", \"label\", \"color\", \"success\", \"readonly\", \"disabled\", \"error\", \"loading\"]),\n      error: computedError.value,\n      errorMessages: computedErrorMessages.value,\n      focused: isFocused.value,\n      tabindex: inputWrapperTabIndexComputed.value\n    }));\n    const selectContentPropsComputed = computed(() => ({\n      ...pick(props, [\"placeholder\", \"autocomplete\", \"multiple\", \"disabled\", \"readonly\"]),\n      tabindex: tabIndexComputed.value,\n      value: visibleSelectedOptions.value,\n      valueString: valueString.value,\n      hiddenSelectedOptionsAmount: hiddenSelectedOptionsAmount.value,\n      isAllOptionsShown: isAllOptionsShown.value,\n      focused: isInputFocused.value,\n      autocompleteInputValue: autocompleteValue.value,\n      getText\n    }));\n    const autocompleteValue = useAutocomplete(props, visibleSelectedOptions, showDropdownContent, getText);\n    const setAutocompleteValue = v => autocompleteValue.value = v;\n    const focus = () => {\n      if (props.disabled) {\n        return;\n      }\n      focusElement(unwrapEl(input.value));\n    };\n    const blur = () => {\n      if (showDropdownContentComputed.value) {\n        showDropdownContentComputed.value = false;\n      }\n      nextTick(() => {\n        if (props.disabled) {\n          return;\n        }\n        blurElement(unwrapEl(input.value));\n      });\n    };\n    const reset = () => withoutValidation(() => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : [];\n      } else {\n        valueComputed.value = props.clearValue;\n      }\n      searchInput.value = \"\";\n      emit(\"clear\");\n      resetValidation();\n    });\n    const focusAutocompleteInput = e => {\n      if (props.autocomplete && !props.disabled && !props.readonly) {\n        e == null ? void 0 : e.stopImmediatePropagation();\n        isInputFocused.value = true;\n        showDropdownContent.value = true;\n      }\n    };\n    const toggleDropdown = () => {\n      if (props.disabled || props.readonly) {\n        return;\n      }\n      showDropdownContentComputed.value = !showDropdownContentComputed.value;\n    };\n    const deleteLastSelected = () => {\n      if (!Array.isArray(valueComputed.value)) {\n        return;\n      }\n      valueComputed.value = valueComputed.value.slice(0, -1);\n    };\n    const {\n      validate,\n      computedError,\n      computedErrorMessages,\n      withoutValidation,\n      resetValidation\n    } = useValidation(props, emit, {\n      reset,\n      focus,\n      value: valueComputed\n    });\n    return {\n      input,\n      optionList,\n      searchBar,\n      reset,\n      focus,\n      blur,\n      toggleDropdown,\n      deleteLastSelected,\n      focusAutocompleteInput,\n      tp,\n      t,\n      onInputFocus,\n      onInputBlur,\n      focusOptionList,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueString,\n      showClearIcon,\n      toggleIcon,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      focusPreviousOption,\n      focusNextOption,\n      showDropdownContentComputed,\n      handleDropdownOpen,\n      handleDropdownClose,\n      hideAndFocus,\n      toggleIconColor,\n      onHintedSearch,\n      onScrollBottom,\n      clearIconProps,\n      dropdownPropsComputed,\n      visibleSelectedOptions,\n      optionsListPropsComputed,\n      toggleHiddenOptionsState,\n      setAutocompleteValue,\n      inputWrapperPropsComputed,\n      inputWrapperClassComputed,\n      selectContentPropsComputed,\n      // for e2e tests\n      getOptionByValue,\n      compareOptions,\n      getText\n    };\n  }\n});\nexport { _sfc_main as _ };\nimport '../../../VaSelect.css';","map":{"version":3,"names":["VaDropdownProps","extractComponentProps","VaDropdown","_sfc_main","defineComponent","name","components","VaSelectContent","VaSelectOptionList","VaIcon","VaDropdownContent","VaInput","VaInputWrapper","emits","useValidationEmits","useClearableEmits","props","useComponentPresetProp","useSelectableListProps","useValidationProps","useLoadingProps","useMaxSelectionsProps","useClearableProps","useFormFieldProps","useMaxVisibleOptionsProps","useToggleIconProps","useThrottleProps","useStringValueProps","useAutocompleteProps","modelValue","type","String","Number","Array","Object","Boolean","default","placement","validator","includes","allowCreate","mode","color","multiple","searchable","width","maxHeight","noOptionsText","hideSelected","tabindex","virtualScroller","selectedTopShown","highlightMatchedText","minSearchChars","autoSelectFirstOption","outline","bordered","label","placeholder","searchPlaceholderText","requiredMark","ariaLabel","ariaSearchLabel","ariaClearLabel","setup","emit","slots","optionList","shallowRef","input","searchBar","isInputFocused","useFocusDeep","getValue","getText","getTrackBy","useSelectableList","onScrollBottom","searchInput","ref","showSearchInput","computed","autocomplete","watch","value","hoveredOption","getOptionByValue","isNilValue","optionByValue","options","find","option","warn","JSON","stringify","toggleHiddenOptionsState","isAllOptionsShown","visibleSelectedOptions","hiddenSelectedOptionsAmount","allSelectedOptions","useMaxVisibleOptions","valueComputed","get","isArray","length","at","set","map","valueString","useStringValue","canBeCleared","clearIconProps","onFocus","onBlur","useClearable","showClearIcon","filteredOptions","slice","sort","a","b","isASelected","checkIsOptionSelected","isBSelected","filter","valueItem","compareOptions","option1","option2","one","two","isValueComputedArray","v","selectOption","hideAndFocus","exceedsMaxSelections","addOption","useMaxSelections","maxSelections","isSelected","optionSelected","focusAutocompleteInput","addNewOption","hasAddedOption","_a","some","autocompleteValue","allowedToCreateCheck","selectHoveredOption","showDropdownContent","handleDropdownOpen","selectOrAddOption","allowedToCreate","focusPreviousOption","focusNextOption","showDropdownContentComputed","show","handleDropdownClose","closeOnContentClick","disabled","readonly","scrollToSelected","focusSearchOrOptions","validate","focusSearchBar","focus","focusOptionList","_b","focusFirstOption","nextTick","onInputFocus","onInputBlur","tabIndexComputed","inputWrapperTabIndexComputed","selected","nothingSelected","scrollTo","scrollToOption","hintedSearchQuery","hintedSearchQueryTimeoutIndex","navigationKeys","onHintedSearch","event","key","isLetter","isDeleteKey","clearTimeout","appropriateOption","toLowerCase","startsWith","setTimeout","tp","t","useTranslation","filteredDropdownProps","filterComponentProps","dropdownPropsComputed","stateful","offset","keepAnchorWidth","keyboardNavigation","innerAnchorSelector","optionsListPropsComputed","pick","search","selectedValue","getSelectedState","toggleIcon","toggleIconColor","useToggleIcon","isFocused","inputWrapperClassComputed","useBem","nowrap","maxVisibleOptions","content","inputWrapperPropsComputed","error","computedError","errorMessages","computedErrorMessages","focused","selectContentPropsComputed","autocompleteInputValue","useAutocomplete","setAutocompleteValue","focusElement","unwrapEl","blur","blurElement","reset","withoutValidation","clearValue","resetValidation","e","stopImmediatePropagation","toggleDropdown","deleteLastSelected","useValidation"],"sources":["../../../../../src/components/va-select/VaSelect.vue"],"sourcesContent":["<template>\n  <va-dropdown\n    ref=\"dropdown\"\n    v-model=\"showDropdownContentComputed\"\n    class=\"va-select va-select__dropdown va-select-dropdown\"\n    v-bind=\"dropdownPropsComputed\"\n  >\n    <template #anchor>\n      <va-input-wrapper\n        ref=\"input\"\n        class=\"va-select__anchor va-select-anchor__input\"\n        :class=\"inputWrapperClassComputed\"\n        :model-value=\"valueString\"\n        v-bind=\"inputWrapperPropsComputed\"\n        @focus=\"onInputFocus\"\n        @blur=\"onInputBlur\"\n        @click=\"focusAutocompleteInput\"\n      >\n        <template\n          v-for=\"(_, name) in $slots\"\n          :key=\"name\"\n          v-slot:[name]=\"slotScope\"\n        >\n          <slot :name=\"name\" v-bind=\"slotScope\" />\n        </template>\n\n        <template #icon>\n          <va-icon\n            v-if=\"showClearIcon\"\n            role=\"button\"\n            :aria-label=\"tp($props.ariaClearLabel)\"\n            tabindex=\"0\"\n            v-bind=\"clearIconProps\"\n            @click.stop=\"reset\"\n            @keydown.enter.stop=\"reset\"\n            @keydown.space.stop=\"reset\"\n          />\n        </template>\n\n        <template #appendInner>\n          <va-icon\n            :color=\"toggleIconColor\"\n            :name=\"toggleIcon\"\n            @click.stop=\"toggleDropdown\"\n            class=\"va-select__toggle-icon\"\n          />\n        </template>\n\n        <template #default>\n          <va-select-content\n            v-bind=\"selectContentPropsComputed\"\n            @toggle-hidden=\"toggleHiddenOptionsState\"\n            @autocomplete-input=\"setAutocompleteValue\"\n            @focus-prev=\"focusPreviousOption\"\n            @focus-next=\"focusNextOption\"\n            @select-option=\"selectOrAddOption\"\n            @delete-last-selected=\"deleteLastSelected\"\n          >\n            <template\n              v-for=\"(_, name) in $slots\"\n              :key=\"name\"\n              v-slot:[name]=\"slotScope\"\n            >\n              <slot :name=\"name\" v-bind=\"slotScope\" />\n            </template>\n          </va-select-content>\n        </template>\n      </va-input-wrapper>\n    </template>\n\n    <va-dropdown-content\n      class=\"va-select-dropdown__content\"\n      :style=\"{ width: $props.width }\"\n    >\n      <va-input\n        v-if=\"showSearchInput\"\n        ref=\"searchBar\"\n        class=\"va-select-dropdown__content-search-input\"\n        v-model=\"searchInput\"\n        :aria-label=\"tp($props.ariaSearchLabel)\"\n        :tabindex=\"tabIndexComputed\"\n        :placeholder=\"tp($props.searchPlaceholderText)\"\n        bordered\n        @keydown.up.stop.prevent=\"focusPreviousOption\"\n        @keydown.left.stop.prevent=\"focusPreviousOption\"\n        @keydown.down.stop.prevent=\"focusNextOption\"\n        @keydown.right.stop.prevent=\"focusNextOption\"\n        @keydown.enter.prevent=\"selectOrAddOption\"\n        @focus=\"hoveredOption = null\"\n      />\n      <va-select-option-list\n        ref=\"optionList\"\n        class=\"va-select-dropdown__options-wrapper\"\n        v-model:hoveredOption=\"hoveredOption\"\n        :style=\"{ maxHeight: $props.maxHeight }\"\n        v-bind=\"optionsListPropsComputed\"\n        @select-option=\"selectHoveredOption\"\n        @no-previous-option-to-hover=\"focusSearchBar\"\n        @keydown.tab.stop.prevent=\"searchBar && searchBar.focus()\"\n        @keydown=\"onHintedSearch\"\n        @scroll-bottom=\"onScrollBottom\"\n        v-slot=\"slotData\"\n      >\n        <slot name=\"option\" v-bind=\"slotData || {}\" />\n      </va-select-option-list>\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, shallowRef, computed, watch, nextTick, type PropType, type Ref } from 'vue'\nimport pick from 'lodash/pick.js'\n\nimport {\n  useComponentPresetProp,\n  useSelectableList, useSelectableListProps,\n  useValidation, useValidationProps, useValidationEmits, ValidationProps,\n  useFormFieldProps,\n  useLoadingProps,\n  useMaxSelections, useMaxSelectionsProps,\n  useClearableProps, useClearable, useClearableEmits,\n  useFocusDeep,\n  useTranslation,\n  useBem,\n  useThrottleProps,\n} from '../../composables'\n\nimport {\n  VaDropdown,\n  VaDropdownContent,\n  VaIcon,\n  VaInput,\n  VaInputWrapper,\n} from '../index'\nimport { VaSelectOptionList } from './components/VaSelectOptionList'\nimport { VaSelectContent } from './components/VaSelectContent'\n\nimport { useMaxVisibleOptions, useMaxVisibleOptionsProps } from './hooks/useMaxVisibleOptions'\nimport { useToggleIcon, useToggleIconProps } from './hooks/useToggleIcon'\nimport { useStringValue, useStringValueProps } from './hooks/useStringValue'\nimport { useAutocomplete, useAutocompleteProps } from './hooks/useAutocomplete'\n\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\nimport { blurElement, focusElement } from '../../utils/focus'\nimport { unwrapEl } from '../../utils/unwrapEl'\nimport { isNilValue } from '../../utils/isNilValue'\nimport { warn } from '../../utils/console'\n\nimport type { SelectOption, Placement } from './types'\nimport type { DropdownOffsetProp } from '../va-dropdown/types'\n\nconst VaDropdownProps = extractComponentProps(VaDropdown,\n  ['keyboardNavigation', 'offset', 'stateful', 'keepAnchorWidth', 'closeOnContentClick', 'innerAnchorSelector', 'modelValue'],\n)\n\nexport default defineComponent({\n  name: 'VaSelect',\n\n  components: {\n    VaSelectContent,\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaDropdownContent,\n    VaInput,\n    VaInputWrapper,\n  },\n\n  emits: [\n    'update:modelValue',\n    'update-search',\n    'create-new',\n    'scroll-bottom',\n    ...useValidationEmits,\n    ...useClearableEmits,\n  ],\n\n  props: {\n    ...VaDropdownProps,\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    ...useValidationProps as ValidationProps<SelectOption>,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n    ...useClearableProps,\n    ...useFormFieldProps,\n    ...useMaxVisibleOptionsProps,\n    ...useToggleIconProps,\n    ...useThrottleProps,\n    ...useStringValueProps,\n    ...useAutocompleteProps,\n\n    modelValue: {\n      type: [String, Number, Array, Object, Boolean] as PropType<SelectOption | SelectOption[]>,\n      default: '',\n    },\n\n    // Dropdown placement\n    placement: {\n      type: String as PropType<Placement>,\n      default: 'bottom',\n      validator: (placement: string) => ['top', 'bottom'].includes(placement),\n    },\n\n    allowCreate: {\n      type: [Boolean, String] as PropType<boolean | 'unique'>,\n      default: false,\n      validator: (mode: string | boolean) => [true, false, 'unique'].includes(mode),\n    },\n\n    color: { type: String, default: 'primary' },\n    multiple: { type: Boolean, default: false },\n    searchable: { type: Boolean, default: false },\n    width: { type: String, default: '100%' },\n    maxHeight: { type: String, default: '256px' },\n    noOptionsText: { type: String, default: '$t:noOptions' },\n    hideSelected: { type: Boolean, default: false },\n    tabindex: { type: [String, Number], default: 0 },\n    virtualScroller: { type: Boolean, default: false },\n    selectedTopShown: { type: Boolean, default: false },\n    highlightMatchedText: { type: Boolean, default: true },\n    minSearchChars: { type: Number, default: 0 },\n    autoSelectFirstOption: { type: Boolean, default: false },\n\n    // Input style\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    label: { type: String, default: '' },\n    placeholder: { type: String, default: '' },\n    searchPlaceholderText: { type: String, default: '$t:search' },\n    requiredMark: { type: Boolean, default: false },\n\n    ariaLabel: { type: String, default: undefined },\n    ariaSearchLabel: { type: String, default: '$t:optionsFilter' },\n    ariaClearLabel: { type: String, default: '$t:reset' },\n  },\n\n  setup (props, { emit, slots }) {\n    const optionList = shallowRef<typeof VaSelectOptionList>()\n    const input = shallowRef<typeof VaInputWrapper>()\n    const searchBar = shallowRef<typeof VaInput>()\n\n    const isInputFocused = useFocusDeep(input as any)\n\n    const { getValue, getText, getTrackBy } = useSelectableList(props)\n\n    const onScrollBottom = () => emit('scroll-bottom')\n\n    const searchInput = ref('')\n    const showSearchInput = computed(() => props.searchable || (props.allowCreate && !props.autocomplete))\n\n    watch(searchInput, (value) => {\n      emit('update-search', value)\n      hoveredOption.value = null\n    })\n\n    const getOptionByValue = (value: SelectOption): SelectOption => {\n      // if value is an object, it should be selectable option itself\n      if (isNilValue(value) || typeof value === 'object') { return value }\n\n      const optionByValue = props.options.find((option) => value === getValue(option))\n\n      if (optionByValue === undefined) {\n        warn(`[VaSelect]: can not find option in options list (${JSON.stringify(props.options)}) by provided value (${JSON.stringify(value)})!`)\n\n        return value\n      }\n\n      return optionByValue\n    }\n\n    const {\n      toggleHiddenOptionsState,\n      isAllOptionsShown,\n      visibleSelectedOptions,\n      hiddenSelectedOptionsAmount,\n      allSelectedOptions,\n    } = useMaxVisibleOptions(props, getOptionByValue)\n\n    // select value\n    const valueComputed = computed<SelectOption | SelectOption[]>({\n      get () {\n        if (props.multiple) { return allSelectedOptions.value }\n\n        const value = getOptionByValue(props.modelValue)\n\n        if (Array.isArray(value)) {\n          warn('Model value should be a string, number, boolean or an object for a single Select.')\n\n          if (value.length) {\n            return value.at(-1)\n          }\n        }\n\n        return value\n      },\n\n      set (option: SelectOption | SelectOption[]) {\n        if (Array.isArray(option)) {\n          emit('update:modelValue', option.map(getValue))\n        } else {\n          emit('update:modelValue', getValue(option))\n        }\n      },\n    })\n\n    const valueString = useStringValue(props, visibleSelectedOptions, getText)\n\n    // icons\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueComputed)\n\n    const showClearIcon = computed(() => {\n      if (!canBeCleared.value) { return false }\n      if (props.multiple && Array.isArray(valueComputed.value)) { return !!valueComputed.value.length }\n      return true\n    })\n\n    // options\n    const filteredOptions = computed(() => {\n      if (!props.options) { return [] }\n\n      if (props.selectedTopShown) {\n        return props.options.slice().sort((a, b) => {\n          const isASelected = checkIsOptionSelected(a)\n          const isBSelected = checkIsOptionSelected(b)\n\n          if (isASelected && isBSelected) { return 0 }\n          if (isASelected && !isBSelected) { return -1 }\n\n          return 1\n        })\n      }\n\n      if (props.hideSelected) {\n        return props.options.filter((option) => !checkIsOptionSelected(option))\n      }\n\n      return props.options\n    })\n\n    const checkIsOptionSelected = (option: SelectOption) => {\n      if (isNilValue(valueComputed.value)) { return false }\n\n      if (Array.isArray(valueComputed.value)) {\n        return !isNilValue(valueComputed.value.find((valueItem) => compareOptions(valueItem, option)))\n      }\n\n      return compareOptions(valueComputed.value, option)\n    }\n\n    const compareOptions = (option1: SelectOption, option2: SelectOption) => {\n      const one = getValue(option1)\n      const two = getValue(option2)\n\n      // identity check works nice for strings and exact matches.\n      if (one === two) {\n        return true\n      }\n      if (typeof one === 'string' && typeof two === 'string') {\n        return one === two\n      }\n      if (one === null || two === null) {\n        return false\n      }\n      if (typeof one === 'object' && typeof two === 'object') {\n        return getTrackBy(one) === getTrackBy(two)\n      }\n\n      return false\n    }\n\n    const isValueComputedArray = (v: Ref<SelectOption | SelectOption[]>): v is Ref<SelectOption[]> => Array.isArray(v.value)\n\n    const selectOption = (option: SelectOption) => {\n      if (hoveredOption.value === null) {\n        hideAndFocus()\n        return\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = ''\n      }\n\n      if (props.multiple && isValueComputedArray(valueComputed)) {\n        const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections))\n\n        const isSelected = checkIsOptionSelected(option)\n\n        if (isSelected) {\n          // Unselect\n          valueComputed.value = valueComputed.value.filter((optionSelected) => !compareOptions(option, optionSelected))\n        } else {\n          if (exceedsMaxSelections()) { return }\n          valueComputed.value = addOption(option)\n        }\n      } else {\n        valueComputed.value = typeof option !== 'object' ? option : { ...option }\n        hideAndFocus()\n      }\n\n      focusAutocompleteInput()\n    }\n\n    const addNewOption = () => {\n      // Do not emit if option already exist and allow create is `unique`\n      const hasAddedOption = props.options?.some((option: SelectOption) => [searchInput.value, autocompleteValue.value].includes(getText(option)))\n\n      const allowedToCreateCheck = !((props.allowCreate === 'unique' || props.autocomplete) && hasAddedOption)\n      if (allowedToCreateCheck) {\n        emit('create-new', searchInput.value || autocompleteValue.value)\n\n        searchInput.value = ''\n        autocompleteValue.value = ''\n      }\n    }\n\n    // Hovered options\n\n    const hoveredOption = ref<SelectOption | null>(null)\n\n    const selectHoveredOption = () => {\n      if (isNilValue(hoveredOption.value)) { return }\n\n      if (!showDropdownContent.value) {\n        // We can not select options if they are hidden\n        handleDropdownOpen()\n        return\n      }\n\n      selectOption(hoveredOption.value)\n    }\n\n    const selectOrAddOption = () => {\n      const allowedToCreate = !!props.allowCreate && (searchInput.value || autocompleteValue.value)\n\n      if (hoveredOption.value !== null) {\n        selectHoveredOption()\n      } else if (allowedToCreate) {\n        addNewOption()\n      }\n    }\n\n    const focusPreviousOption = () => optionList.value?.focusPreviousOption()\n\n    const focusNextOption = () => optionList.value?.focusNextOption()\n\n    // Dropdown content\n\n    const showDropdownContent = ref(false)\n\n    const showDropdownContentComputed = computed({\n      get: () => showDropdownContent.value,\n      set: (show: boolean) => {\n        show ? handleDropdownOpen() : handleDropdownClose()\n      },\n    })\n\n    const closeOnContentClick = computed(() => {\n      return !(props.multiple || props.searchable || props.allowCreate)\n    })\n\n    const handleDropdownOpen = () => {\n      if (props.disabled || props.readonly) { return }\n\n      showDropdownContent.value = true\n      scrollToSelected()\n      focusSearchOrOptions()\n    }\n\n    const handleDropdownClose = () => {\n      showDropdownContent.value = false\n      searchInput.value = ''\n      validate()\n    }\n    const hideAndFocus = () => {\n      handleDropdownClose()\n      isInputFocused.value = true\n    }\n\n    const focusSearchBar = () => {\n      searchBar.value?.focus()\n    }\n\n    const focusOptionList = () => {\n      optionList.value?.focus()\n      !props.modelValue && optionList.value?.focusFirstOption()\n    }\n\n    const focusSearchOrOptions = () => nextTick(() => {\n      if (showSearchInput.value) {\n        focusSearchBar()\n      } else {\n        focusOptionList()\n      }\n    })\n\n    const onInputFocus = () => {\n      isInputFocused.value = true\n      onFocus()\n    }\n\n    const onInputBlur = () => {\n      if (showDropdownContentComputed.value) { return }\n\n      onBlur()\n\n      isInputFocused.value\n        ? isInputFocused.value = false\n        : validate()\n    }\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex)\n    const inputWrapperTabIndexComputed = computed(() => props.disabled || props.autocomplete ? -1 : 0)\n\n    const scrollToSelected = () => {\n      const selected = valueComputed.value\n      const nothingSelected = typeof selected !== 'object' && Array.isArray(selected) && !selected.length\n\n      if (nothingSelected) { return }\n\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\n      hoveredOption.value = scrollTo\n      nextTick(() => optionList.value?.scrollToOption(scrollTo))\n    }\n\n    // Hinted search\n\n    let hintedSearchQuery = ''\n    let hintedSearchQueryTimeoutIndex!: ReturnType<typeof setTimeout>\n    const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\n\n    // Hinted search - hover option if you typing it's value on select without search-bar\n    const onHintedSearch = (event: KeyboardEvent) => {\n      if (navigationKeys.some(key => key === event.key)) {\n        return\n      }\n\n      const isLetter: boolean = event.key.length === 1\n      const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\n\n      clearTimeout(hintedSearchQueryTimeoutIndex)\n\n      if (isDeleteKey) {\n        // Remove last letter from query\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\n      } else if (isLetter) {\n        // Add every new letter to the query\n        hintedSearchQuery += event.key\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = hintedSearchQuery\n        return\n      }\n\n      // Search for an option that matches the query\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption\n        }\n      }\n\n      hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\n    }\n\n    const { tp, t } = useTranslation()\n\n    const filteredDropdownProps = filterComponentProps(VaDropdownProps)\n    const dropdownPropsComputed = computed(() => ({\n      ...filteredDropdownProps.value,\n      closeOnContentClick: closeOnContentClick.value,\n      stateful: false,\n      offset: [1, 0] as DropdownOffsetProp,\n      keepAnchorWidth: true,\n      keyboardNavigation: true,\n      innerAnchorSelector: '.va-input-wrapper__field',\n      'aria-label': props.ariaLabel || (props.modelValue ? `${t('selectedOption')}: ${props.modelValue}` : t('noSelectedOption')),\n    }))\n\n    const optionsListPropsComputed = computed(() => ({\n      ...pick(props, ['textBy', 'trackBy', 'groupBy', 'valueBy', 'disabledBy', 'color', 'virtualScroller', 'highlightMatchedText', 'minSearchChars', 'delay', 'selectedTopShown']),\n      autoSelectFirstOption: props.autoSelectFirstOption || props.autocomplete,\n      search: searchInput.value || autocompleteValue.value,\n      tabindex: tabIndexComputed.value,\n      selectedValue: valueComputed.value,\n      options: filteredOptions.value,\n      getSelectedState: checkIsOptionSelected,\n      noOptionsText: tp(props.noOptionsText),\n    }))\n\n    const { toggleIcon, toggleIconColor } = useToggleIcon(props, showDropdownContent)\n\n    // input wrapper\n    const isFocused = computed(() => isInputFocused.value || showDropdownContent.value)\n    const inputWrapperClassComputed = useBem('va-select-anchor', () => ({\n      nowrap: !!(props.maxVisibleOptions && !slots.content),\n    }))\n    const inputWrapperPropsComputed = computed(() => ({\n      ...pick(props, ['messages', 'requiredMark', 'bordered', 'outline', 'label', 'color', 'success', 'readonly', 'disabled', 'error', 'loading']),\n      error: computedError.value,\n      errorMessages: computedErrorMessages.value,\n      focused: isFocused.value,\n      tabindex: inputWrapperTabIndexComputed.value,\n    }))\n\n    // select content\n    const selectContentPropsComputed = computed(() => ({\n      ...pick(props, ['placeholder', 'autocomplete', 'multiple', 'disabled', 'readonly']),\n      tabindex: tabIndexComputed.value,\n      value: visibleSelectedOptions.value,\n      valueString: valueString.value,\n      hiddenSelectedOptionsAmount: hiddenSelectedOptionsAmount.value,\n      isAllOptionsShown: isAllOptionsShown.value,\n      focused: isInputFocused.value,\n      autocompleteInputValue: autocompleteValue.value,\n      getText,\n    }))\n\n    // autocomplete\n    const autocompleteValue = useAutocomplete(props, visibleSelectedOptions, showDropdownContent, getText)\n    const setAutocompleteValue = (v: string) => (autocompleteValue.value = v)\n\n    // public methods\n    const focus = () => {\n      if (props.disabled) { return }\n      focusElement(unwrapEl(input.value))\n    }\n\n    const blur = () => {\n      if (showDropdownContentComputed.value) {\n        showDropdownContentComputed.value = false\n      }\n\n      nextTick(() => {\n        if (props.disabled) { return }\n        blurElement(unwrapEl(input.value))\n      })\n    }\n\n    const reset = () => withoutValidation(() => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\n      } else {\n        valueComputed.value = props.clearValue\n      }\n\n      searchInput.value = ''\n      emit('clear')\n      resetValidation()\n    })\n\n    const focusAutocompleteInput = (e?: Event) => {\n      if (props.autocomplete && !props.disabled && !props.readonly) {\n        e?.stopImmediatePropagation()\n\n        isInputFocused.value = true\n        showDropdownContent.value = true\n      }\n    }\n\n    const toggleDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n\n      showDropdownContentComputed.value = !showDropdownContentComputed.value\n    }\n\n    const deleteLastSelected = () => {\n      if (!Array.isArray(valueComputed.value)) { return }\n\n      valueComputed.value = valueComputed.value.slice(0, -1)\n    }\n\n    const {\n      validate,\n      computedError,\n      computedErrorMessages,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus, value: valueComputed })\n\n    return {\n      input,\n      optionList,\n      searchBar,\n\n      reset,\n      focus,\n      blur,\n      toggleDropdown,\n      deleteLastSelected,\n\n      focusAutocompleteInput,\n\n      tp,\n      t,\n\n      onInputFocus,\n      onInputBlur,\n      focusOptionList,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueString,\n      showClearIcon,\n      toggleIcon,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      focusPreviousOption,\n      focusNextOption,\n      showDropdownContentComputed,\n      handleDropdownOpen,\n      handleDropdownClose,\n      hideAndFocus,\n      toggleIconColor,\n      onHintedSearch,\n      onScrollBottom,\n      clearIconProps,\n      dropdownPropsComputed,\n      visibleSelectedOptions,\n      optionsListPropsComputed,\n      toggleHiddenOptionsState,\n      setAutocompleteValue,\n\n      inputWrapperPropsComputed,\n      inputWrapperClassComputed,\n      selectContentPropsComputed,\n\n      // for e2e tests\n      getOptionByValue,\n      compareOptions,\n      getText,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-select {\n  & .va-input-wrapper__text {\n    line-height: normal;\n    flex-wrap: wrap;\n  }\n}\n\n.va-select-anchor {\n  &__input {\n    cursor: var(--va-select-cursor);\n    flex: 1;\n  }\n\n  &--nowrap {\n    .va-input-wrapper__text {\n      flex-wrap: nowrap;\n    }\n  }\n}\n\n.va-select-dropdown {\n  &__content {\n    overflow: hidden;\n    border-bottom-right-radius: var(--va-select-dropdown-border-radius);\n    border-bottom-left-radius: var(--va-select-dropdown-border-radius);\n    border-top-right-radius: 0;\n    border-top-left-radius: 0;\n    box-shadow: var(--va-select-box-shadow);\n    padding: 0;\n  }\n\n  &__content-search-input {\n    min-width: auto;\n    width: 100%;\n  }\n\n  &__options-wrapper {\n    background: var(--va-select-dropdown-background);\n    overflow-y: auto;\n\n    @include va-scroll(var(--va-background-element));\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}