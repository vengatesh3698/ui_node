{"ast":null,"code":"import { a as isSingleDate, b as isRange, i as isDates } from \"../utils/date-utils-62af9561.mjs\";\nconst modeInitialValue = (date, mode) => {\n  if (mode === \"single\") {\n    return date;\n  } else if (mode === \"range\") {\n    return {\n      start: date,\n      end: null\n    };\n  } else if (mode === \"multiple\") {\n    return [date];\n  } else if (mode === \"auto\") {\n    return date;\n  }\n  throw new Error(\"Unknown mode\");\n};\nconst throwIncorrectModelValueError = (modelValue, mode) => {\n  throw Error(`Incorrect modelValue for mode ${mode}. Got ${JSON.stringify(modelValue)}`);\n};\nconst modeFromModelValue = modelValue => {\n  if (isSingleDate(modelValue)) {\n    return \"single\";\n  } else if (isRange(modelValue)) {\n    return \"range\";\n  } else if (isDates(modelValue)) {\n    return \"multiple\";\n  }\n  return throwIncorrectModelValueError(modelValue, \"auto\");\n};\nconst sortRange = modelValue => {\n  if (modelValue.start && modelValue.end) {\n    if (modelValue.start > modelValue.end) {\n      return {\n        start: modelValue.end,\n        end: modelValue.start\n      };\n    }\n  }\n  return modelValue;\n};\nconst useDatePickerModelValue = (props, emit, dateEqual) => {\n  const updateModelValue = date => {\n    if (!props.modelValue) {\n      emit(\"update:modelValue\", modeInitialValue(date, props.mode));\n      return;\n    }\n    const mode = props.mode === \"auto\" ? modeFromModelValue(props.modelValue) : props.mode;\n    if (mode === \"single\") {\n      if (!isSingleDate(props.modelValue)) {\n        return throwIncorrectModelValueError(props.modelValue, mode);\n      }\n      emit(\"update:modelValue\", date);\n    } else if (mode === \"range\") {\n      if (!isRange(props.modelValue)) {\n        return throwIncorrectModelValueError(props.modelValue, mode);\n      }\n      if (props.modelValue.end && dateEqual(props.modelValue.end, date)) {\n        return emit(\"update:modelValue\", {\n          start: props.modelValue.start,\n          end: null\n        });\n      }\n      if (props.modelValue.start && dateEqual(props.modelValue.start, date)) {\n        return emit(\"update:modelValue\", {\n          start: null,\n          end: props.modelValue.end\n        });\n      }\n      if (props.modelValue.end === null) {\n        return emit(\"update:modelValue\", sortRange({\n          start: props.modelValue.start,\n          end: date\n        }));\n      }\n      if (props.modelValue.start === null) {\n        return emit(\"update:modelValue\", sortRange({\n          end: props.modelValue.end,\n          start: date\n        }));\n      }\n      emit(\"update:modelValue\", {\n        start: date,\n        end: null\n      });\n    } else if (mode === \"multiple\") {\n      if (!isDates(props.modelValue)) {\n        return throwIncorrectModelValueError(props.modelValue, mode);\n      }\n      const isDatesIncludesDate = !!props.modelValue.find(d => dateEqual(d, date));\n      if (isDatesIncludesDate) {\n        emit(\"update:modelValue\", props.modelValue.filter(d => !dateEqual(d, date)));\n      } else {\n        emit(\"update:modelValue\", [...props.modelValue, date].sort((a, b) => a.getTime() - b.getTime()));\n      }\n    }\n  };\n  return {\n    updateModelValue\n  };\n};\nexport { useDatePickerModelValue as u };","map":{"version":3,"names":["modeInitialValue","date","mode","start","end","Error","throwIncorrectModelValueError","modelValue","JSON","stringify","modeFromModelValue","isSingleDate","isRange","isDates","sortRange","useDatePickerModelValue","props","emit","dateEqual","updateModelValue","isDatesIncludesDate","find","d","filter","sort","a","b","getTime"],"sources":["../../../../../../src/components/va-date-picker/hooks/model-value-helper.ts"],"sourcesContent":["import { isRange, isSingleDate, isDates } from '../utils/date-utils'\nimport { DatePickerModelValue, DatePickerRange, DatePickerMode } from '../types'\n\nconst modeInitialValue = (date: Date, mode: DatePickerMode) => {\n  if (mode === 'single') {\n    return date\n  } else if (mode === 'range') {\n    return { start: date, end: null }\n  } else if (mode === 'multiple') {\n    return [date]\n  } else if (mode === 'auto') {\n    return date\n  }\n\n  throw new Error('Unknown mode')\n}\n\nconst throwIncorrectModelValueError = (modelValue: DatePickerModelValue, mode: DatePickerMode) : never => {\n  throw Error(`Incorrect modelValue for mode ${mode}. Got ${JSON.stringify(modelValue)}`)\n}\n\nconst modeFromModelValue = (modelValue: DatePickerModelValue): DatePickerMode => {\n  if (isSingleDate(modelValue)) {\n    return 'single'\n  } else if (isRange(modelValue)) {\n    return 'range'\n  } else if (isDates(modelValue)) {\n    return 'multiple'\n  }\n\n  return throwIncorrectModelValueError(modelValue, 'auto')\n}\n\nconst sortRange = (modelValue: DatePickerRange) => {\n  if (modelValue.start && modelValue.end) {\n    if (modelValue.start > modelValue.end) {\n      return { start: modelValue.end, end: modelValue.start }\n    }\n  }\n\n  return modelValue\n}\n\nexport const useDatePickerModelValue = (\n  props: {\n    [key: string]: any,\n    modelValue?: DatePickerModelValue,\n    mode: DatePickerMode\n  },\n  emit: (event: 'update:modelValue', newValue: DatePickerModelValue) => any,\n  dateEqual: (date1?: Date | null, date2?: Date | null) => boolean,\n) => {\n  const updateModelValue = (date: Date) => {\n    if (!props.modelValue) {\n      emit('update:modelValue', modeInitialValue(date, props.mode))\n      return\n    }\n\n    const mode = props.mode === 'auto' ? modeFromModelValue(props.modelValue) : props.mode\n\n    if (mode === 'single') {\n      if (!isSingleDate(props.modelValue)) {\n        return throwIncorrectModelValueError(props.modelValue, mode)\n      }\n\n      emit('update:modelValue', date)\n    } else if (mode === 'range') {\n      if (!isRange(props.modelValue)) {\n        return throwIncorrectModelValueError(props.modelValue, mode)\n      }\n\n      if (props.modelValue.end && dateEqual(props.modelValue.end, date)) {\n        return emit('update:modelValue', { start: props.modelValue.start, end: null })\n      }\n      if (props.modelValue.start && dateEqual(props.modelValue.start, date)) {\n        return emit('update:modelValue', { start: null, end: props.modelValue.end })\n      }\n\n      if (props.modelValue.end === null) {\n        return emit('update:modelValue', sortRange({ start: props.modelValue.start, end: date }))\n      }\n      if (props.modelValue.start === null) {\n        return emit('update:modelValue', sortRange({ end: props.modelValue.end, start: date }))\n      }\n\n      emit('update:modelValue', { start: date, end: null })\n    } else if (mode === 'multiple') {\n      if (!isDates(props.modelValue)) {\n        return throwIncorrectModelValueError(props.modelValue, mode)\n      }\n\n      const isDatesIncludesDate = !!props.modelValue.find((d) => dateEqual(d, date))\n\n      if (isDatesIncludesDate) {\n        emit('update:modelValue', props.modelValue.filter((d) => !dateEqual(d, date)))\n      } else {\n        emit('update:modelValue', [...props.modelValue, date].sort((a, b) => a.getTime() - b.getTime()))\n      }\n    }\n  }\n\n  return {\n    updateModelValue,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}