{"ast":null,"code":"import { toRef, ref, computed, watch } from \"vue\";\nimport { i as isNilValue } from \"../../../utils/isNilValue-745d19e7.mjs\";\nconst useMaxVisibleOptionsProps = {\n  maxVisibleOptions: {\n    type: Number,\n    default: 0\n  }\n};\nconst useMaxVisibleOptions = (props, getOptionByValue) => {\n  const modelValue = toRef(props, \"modelValue\");\n  const isAllOptionsShown = ref(false);\n  const belowLimitSelectedOptions = ref([]);\n  const hiddenSelectedOptions = ref([]);\n  const hiddenSelectedOptionsAmount = computed(() => hiddenSelectedOptions.value.length);\n  const allSelectedOptions = computed(() => [...belowLimitSelectedOptions.value, ...hiddenSelectedOptions.value]);\n  const visibleSelectedOptions = computed(() => {\n    if (!props.maxVisibleOptions || isAllOptionsShown.value) {\n      return allSelectedOptions.value;\n    }\n    return belowLimitSelectedOptions.value;\n  });\n  watch(modelValue, () => {\n    if (!Array.isArray(modelValue.value)) {\n      belowLimitSelectedOptions.value = [getOptionByValue(modelValue.value)];\n      hiddenSelectedOptions.value = [];\n      return;\n    }\n    const value = modelValue.value.filter(v => !isNilValue(v)).map(getOptionByValue);\n    if (props.maxVisibleOptions) {\n      belowLimitSelectedOptions.value = value.slice(0, props.maxVisibleOptions);\n      hiddenSelectedOptions.value = value.slice(props.maxVisibleOptions);\n    } else {\n      belowLimitSelectedOptions.value = [...value];\n      hiddenSelectedOptions.value = [];\n    }\n  }, {\n    immediate: true\n  });\n  const toggleHiddenOptionsState = () => isAllOptionsShown.value = !isAllOptionsShown.value;\n  return {\n    toggleHiddenOptionsState,\n    isAllOptionsShown,\n    visibleSelectedOptions,\n    hiddenSelectedOptionsAmount,\n    allSelectedOptions\n  };\n};\nexport { useMaxVisibleOptions as a, useMaxVisibleOptionsProps as u };","map":{"version":3,"names":["useMaxVisibleOptionsProps","maxVisibleOptions","type","Number","default","useMaxVisibleOptions","props","getOptionByValue","modelValue","toRef","isAllOptionsShown","ref","belowLimitSelectedOptions","hiddenSelectedOptions","hiddenSelectedOptionsAmount","computed","value","length","allSelectedOptions","visibleSelectedOptions","watch","Array","isArray","filter","v","isNilValue","map","slice","immediate","toggleHiddenOptionsState"],"sources":["../../../../../../src/components/va-select/hooks/useMaxVisibleOptions.ts"],"sourcesContent":["import { computed, ref, toRef, watch, type ExtractPropTypes } from 'vue'\n\nimport { isNilValue } from '../../../utils/isNilValue'\n\nimport type { SelectOption } from '../types'\n\nexport const useMaxVisibleOptionsProps = {\n  maxVisibleOptions: { type: Number, default: 0 },\n}\n\ntype UseMaxVisibleOptionsProps = ExtractPropTypes<typeof useMaxVisibleOptionsProps> & { multiple: boolean, modelValue: SelectOption | SelectOption[] }\n\nexport const useMaxVisibleOptions = (\n  props: UseMaxVisibleOptionsProps,\n  getOptionByValue: (v: SelectOption) => SelectOption,\n) => {\n  const modelValue = toRef(props, 'modelValue')\n  const isAllOptionsShown = ref(false)\n  const belowLimitSelectedOptions = ref<SelectOption[]>([])\n  const hiddenSelectedOptions = ref<SelectOption[]>([])\n\n  const hiddenSelectedOptionsAmount = computed(() => hiddenSelectedOptions.value.length)\n  const allSelectedOptions = computed(() => [...belowLimitSelectedOptions.value, ...hiddenSelectedOptions.value])\n  const visibleSelectedOptions = computed(() => {\n    if (!props.maxVisibleOptions || isAllOptionsShown.value) { return allSelectedOptions.value }\n\n    return belowLimitSelectedOptions.value\n  })\n\n  watch(modelValue, () => {\n    if (!Array.isArray(modelValue.value)) {\n      belowLimitSelectedOptions.value = [getOptionByValue(modelValue.value)]\n      hiddenSelectedOptions.value = []\n      return\n    }\n\n    const value = modelValue.value.filter((v) => !isNilValue(v)).map(getOptionByValue)\n\n    if (props.maxVisibleOptions) {\n      belowLimitSelectedOptions.value = value.slice(0, props.maxVisibleOptions)\n      hiddenSelectedOptions.value = value.slice(props.maxVisibleOptions)\n    } else {\n      belowLimitSelectedOptions.value = [...value]\n      hiddenSelectedOptions.value = []\n    }\n  }, { immediate: true })\n\n  const toggleHiddenOptionsState = () => (isAllOptionsShown.value = !isAllOptionsShown.value)\n\n  return {\n    toggleHiddenOptionsState,\n    isAllOptionsShown,\n    visibleSelectedOptions,\n    hiddenSelectedOptionsAmount,\n    allSelectedOptions,\n  }\n}\n"],"mappings":";;AAMO,MAAMA,yBAAA,GAA4B;EACvCC,iBAAA,EAAmB;IAAEC,IAAA,EAAMC,MAAA;IAAQC,OAAA,EAAS;EAAE;AAChD;AAIa,MAAAC,oBAAA,GAAuBA,CAClCC,KAAA,EACAC,gBAAA,KACG;EACG,MAAAC,UAAA,GAAaC,KAAA,CAAMH,KAAA,EAAO,YAAY;EACtC,MAAAI,iBAAA,GAAoBC,GAAA,CAAI,KAAK;EAC7B,MAAAC,yBAAA,GAA4BD,GAAA,CAAoB,EAAE;EAClD,MAAAE,qBAAA,GAAwBF,GAAA,CAAoB,EAAE;EAEpD,MAAMG,2BAAA,GAA8BC,QAAA,CAAS,MAAMF,qBAAA,CAAsBG,KAAA,CAAMC,MAAM;EAC/E,MAAAC,kBAAA,GAAqBH,QAAA,CAAS,MAAM,CAAC,GAAGH,yBAAA,CAA0BI,KAAA,EAAO,GAAGH,qBAAA,CAAsBG,KAAK,CAAC;EACxG,MAAAG,sBAAA,GAAyBJ,QAAA,CAAS,MAAM;IAC5C,IAAI,CAACT,KAAA,CAAML,iBAAA,IAAqBS,iBAAA,CAAkBM,KAAA,EAAO;MAAE,OAAOE,kBAAA,CAAmBF,KAAA;IAAM;IAE3F,OAAOJ,yBAAA,CAA0BI,KAAA;EAAA,CAClC;EAEDI,KAAA,CAAMZ,UAAA,EAAY,MAAM;IACtB,IAAI,CAACa,KAAA,CAAMC,OAAA,CAAQd,UAAA,CAAWQ,KAAK,GAAG;MACpCJ,yBAAA,CAA0BI,KAAA,GAAQ,CAACT,gBAAA,CAAiBC,UAAA,CAAWQ,KAAK,CAAC;MACrEH,qBAAA,CAAsBG,KAAA,GAAQ;MAC9B;IACF;IAEA,MAAMA,KAAA,GAAQR,UAAA,CAAWQ,KAAA,CAAMO,MAAA,CAAQC,CAAA,IAAM,CAACC,UAAA,CAAWD,CAAC,CAAC,EAAEE,GAAA,CAAInB,gBAAgB;IAEjF,IAAID,KAAA,CAAML,iBAAA,EAAmB;MAC3BW,yBAAA,CAA0BI,KAAA,GAAQA,KAAA,CAAMW,KAAA,CAAM,GAAGrB,KAAA,CAAML,iBAAiB;MACxEY,qBAAA,CAAsBG,KAAA,GAAQA,KAAA,CAAMW,KAAA,CAAMrB,KAAA,CAAML,iBAAiB;IAAA,OAC5D;MACqBW,yBAAA,CAAAI,KAAA,GAAQ,CAAC,GAAGA,KAAK;MAC3CH,qBAAA,CAAsBG,KAAA,GAAQ;IAChC;EAAA,GACC;IAAEY,SAAA,EAAW;EAAA,CAAM;EAEtB,MAAMC,wBAAA,GAA2BA,CAAA,KAAOnB,iBAAA,CAAkBM,KAAA,GAAQ,CAACN,iBAAA,CAAkBM,KAAA;EAE9E;IACLa,wBAAA;IACAnB,iBAAA;IACAS,sBAAA;IACAL,2BAAA;IACAI;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}