{"ast":null,"code":"import { defineComponent, toRefs, computed, watch } from \"vue\";\nimport { u as useGridKeyboardNavigation } from \"../../hooks/grid-keyboard-navigation-48c0f4a7.mjs\";\nimport { u as useDatePicker } from \"../../hooks/use-picker-9ed9190b.mjs\";\nimport { V as VaDatePickerCell } from \"../VaDatePickerCell-af3b2fb6.mjs\";\nconst _sfc_main = defineComponent({\n  name: \"VaMonthPicker\",\n  components: {\n    VaDatePickerCell\n  },\n  props: {\n    modelValue: {\n      type: [Date, Array, Object]\n    },\n    monthNames: {\n      type: Array,\n      required: true\n    },\n    view: {\n      type: Object,\n      default: () => ({\n        type: \"month\"\n      })\n    },\n    allowedMonths: {\n      type: Function,\n      default: void 0\n    },\n    highlightToday: {\n      type: Boolean,\n      default: true\n    },\n    mode: {\n      type: String,\n      default: \"auto\"\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    }\n  },\n  emits: [\"update:modelValue\", \"hover:month\", \"click:month\"],\n  setup(props, {\n    emit\n  }) {\n    const {\n      view\n    } = toRefs(props);\n    const months = computed(() => Array.from(Array(12).keys()).map(month => new Date(view.value.year, month)));\n    const {\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange\n    } = useDatePicker(\"month\", months, props, emit);\n    const isDisabled = date => props.allowedMonths === void 0 ? false : !props.allowedMonths(date);\n    const {\n      focusedCellIndex,\n      containerAttributes\n    } = useGridKeyboardNavigation({\n      rowSize: 3,\n      start: 0,\n      end: months.value.length,\n      onSelected: selectedIndex => onClick(months.value[selectedIndex])\n    });\n    watch(focusedCellIndex, index => {\n      hoveredIndex.value = index;\n    });\n    watch(hoveredIndex, index => {\n      focusedCellIndex.value = index;\n    });\n    return {\n      months,\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n      isDisabled,\n      containerAttributes,\n      focusedCellIndex\n    };\n  }\n});\nexport { _sfc_main as _ };\nimport '../../../../../VaMonthPicker.css';","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","VaDatePickerCell","props","modelValue","type","Date","Array","Object","monthNames","required","view","default","allowedMonths","Function","highlightToday","Boolean","mode","String","readonly","color","emits","setup","emit","toRefs","months","computed","from","keys","map","month","value","year","hoveredIndex","onClick","isToday","isSelected","isInRange","useDatePicker","isDisabled","date","focusedCellIndex","containerAttributes","useGridKeyboardNavigation","rowSize","start","end","length","onSelected","selectedIndex","watch","index"],"sources":["../../../../../../../src/components/va-date-picker/components/VaMonthPicker/VaMonthPicker.vue"],"sourcesContent":["<template>\n  <div class=\"va-month-picker\" v-bind=\"containerAttributes\">\n    <div\n      v-for=\"(month, monthIndex) in months\"\n      :key=\"monthIndex\"\n      class=\"va-month-picker__month-wrapper\"\n      @mouseenter=\"hoveredIndex = monthIndex\"\n      @mouseleave=\"hoveredIndex = -1\"\n    >\n      <va-date-picker-cell\n        :in-range=\"!!isInRange(month)\"\n        :selected=\"!!isSelected(month)\"\n        :disabled=\"!!isDisabled(month)\"\n        :today=\"!!isToday(month)\"\n        :focused=\"hoveredIndex === monthIndex\"\n        :highlight-today=\"highlightToday\"\n        :readonly=\"$props.readonly\"\n        :color=\"color\"\n        @click=\"onClick(month); focusedCellIndex = monthIndex\"\n      >\n        <slot name=\"month\" v-bind=\"{ monthIndex, month: monthNames[monthIndex] }\">\n          {{ monthNames[monthIndex] }}\n        </slot>\n      </va-date-picker-cell>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, toRefs, watch } from 'vue'\n\nimport { useGridKeyboardNavigation } from '../../hooks/grid-keyboard-navigation'\nimport { useDatePicker } from '../../hooks/use-picker'\n\nimport { DatePickerMode, DatePickerView, DatePickerModelValue } from '../../types'\n\nimport VaDatePickerCell from '../VaDatePickerCell.vue'\n\nexport default defineComponent({\n  name: 'VaMonthPicker',\n\n  components: { VaDatePickerCell },\n\n  props: {\n    modelValue: { type: [Date, Array, Object] as PropType<DatePickerModelValue> },\n    monthNames: { type: Array as PropType<string[]>, required: true },\n    view: { type: Object as PropType<DatePickerView>, default: () => ({ type: 'month' }) },\n    allowedMonths: { type: Function as PropType<(date: Date) => boolean>, default: undefined },\n    highlightToday: { type: Boolean, default: true },\n    mode: { type: String as PropType<DatePickerMode>, default: 'auto' },\n    readonly: { type: Boolean, default: false },\n    color: { type: String, default: 'primary' },\n  },\n\n  emits: ['update:modelValue', 'hover:month', 'click:month'],\n\n  setup (props, { emit }) {\n    const { view } = toRefs(props)\n\n    const months = computed(() => Array.from(Array(12).keys()).map((month) => new Date(view.value.year, month)))\n\n    const {\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n    } = useDatePicker('month', months, props, emit)\n\n    const isDisabled = (date: Date) => props.allowedMonths === undefined ? false : !props.allowedMonths(date)\n\n    const {\n      focusedCellIndex, containerAttributes,\n    } = useGridKeyboardNavigation({\n      rowSize: 3,\n      start: 0,\n      end: months.value.length,\n      onSelected: (selectedIndex) => onClick(months.value[selectedIndex]),\n    })\n\n    watch(focusedCellIndex, (index) => { hoveredIndex.value = index })\n    watch(hoveredIndex, (index) => { focusedCellIndex.value = index })\n\n    return {\n      months,\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n      isDisabled,\n      containerAttributes,\n      focusedCellIndex,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-month-picker {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); // 4 columns\n  grid-gap: var(--va-date-picker-cell-gap);\n  min-width: calc(var(--va-date-picker-cell-size) * 7 + var(--va-date-picker-cell-gap) * 6); // 7 days + gap\n  width: 100%;\n\n  &__month-wrapper {\n    border-radius: var(--va-date-picker-cell-radius);\n    text-align: center;\n    user-select: none;\n    overflow: hidden;\n  }\n}\n</style>\n"],"mappings":";;;;AAsCA,MAAAA,SAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EAENC,UAAA,EAAY;IAAEC;EAAiB;EAE/BC,KAAA,EAAO;IACLC,UAAA,EAAY;MAAEC,IAAA,EAAM,CAACC,IAAA,EAAMC,KAAA,EAAOC,MAAM;IAAoC;IAC5EC,UAAA,EAAY;MAAEJ,IAAA,EAAME,KAAA;MAA6BG,QAAA,EAAU;IAAK;IAChEC,IAAA,EAAM;MAAEN,IAAA,EAAMG,MAAA;MAAoCI,OAAA,EAASA,CAAA,MAAO;QAAEP,IAAA,EAAM;MAAA;IAAW;IACrFQ,aAAA,EAAe;MAAER,IAAA,EAAMS,QAAA;MAA+CF,OAAA,EAAS;IAAU;IACzFG,cAAA,EAAgB;MAAEV,IAAA,EAAMW,OAAA;MAASJ,OAAA,EAAS;IAAK;IAC/CK,IAAA,EAAM;MAAEZ,IAAA,EAAMa,MAAA;MAAoCN,OAAA,EAAS;IAAO;IAClEO,QAAA,EAAU;MAAEd,IAAA,EAAMW,OAAA;MAASJ,OAAA,EAAS;IAAM;IAC1CQ,KAAA,EAAO;MAAEf,IAAA,EAAMa,MAAA;MAAQN,OAAA,EAAS;IAAU;EAC5C;EAEAS,KAAA,EAAO,CAAC,qBAAqB,eAAe,aAAa;EAEzDC,MAAOnB,KAAA,EAAO;IAAEoB;EAAA,GAAQ;IACtB,MAAM;MAAEZ;IAAA,IAASa,MAAA,CAAOrB,KAAK;IAEvB,MAAAsB,MAAA,GAASC,QAAA,CAAS,MAAMnB,KAAA,CAAMoB,IAAA,CAAKpB,KAAA,CAAM,EAAE,EAAEqB,IAAA,CAAM,GAAEC,GAAA,CAAKC,KAAA,IAAU,IAAIxB,IAAA,CAAKK,IAAA,CAAKoB,KAAA,CAAMC,IAAA,EAAMF,KAAK,CAAC,CAAC;IAErG;MACJG,YAAA;MACAC,OAAA;MACAC,OAAA;MACAC,UAAA;MACAC;IACE,IAAAC,aAAA,CAAc,SAASb,MAAA,EAAQtB,KAAA,EAAOoB,IAAI;IAExC,MAAAgB,UAAA,GAAcC,IAAA,IAAerC,KAAA,CAAMU,aAAA,KAAkB,SAAY,QAAQ,CAACV,KAAA,CAAMU,aAAA,CAAc2B,IAAI;IAElG;MACJC,gBAAA;MAAkBC;IAAA,IAChBC,yBAAA,CAA0B;MAC5BC,OAAA,EAAS;MACTC,KAAA,EAAO;MACPC,GAAA,EAAKrB,MAAA,CAAOM,KAAA,CAAMgB,MAAA;MAClBC,UAAA,EAAaC,aAAA,IAAkBf,OAAA,CAAQT,MAAA,CAAOM,KAAA,CAAMkB,aAAa,CAAC;IAAA,CACnE;IAEKC,KAAA,CAAAT,gBAAA,EAAmBU,KAAA,IAAU;MAAElB,YAAA,CAAaF,KAAA,GAAQoB,KAAA;IAAA,CAAO;IAC3DD,KAAA,CAAAjB,YAAA,EAAekB,KAAA,IAAU;MAAEV,gBAAA,CAAiBV,KAAA,GAAQoB,KAAA;IAAA,CAAO;IAE1D;MACL1B,MAAA;MACAQ,YAAA;MACAC,OAAA;MACAC,OAAA;MACAC,UAAA;MACAC,SAAA;MACAE,UAAA;MACAG,mBAAA;MACAD;IAAA;EAEJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}