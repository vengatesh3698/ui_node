{"ast":null,"code":"import { ref } from \"vue\";\nimport { u as useHTMLElement } from \"./useHTMLElement-beee793a.mjs\";\nimport { u as useEvent } from \"./useEvent-d1ae925d.mjs\";\nfunction usePressed(el) {\n  const isPressed = ref(false);\n  const onMouseDown = () => {\n    isPressed.value = true;\n  };\n  const onMouseUp = () => {\n    isPressed.value = false;\n  };\n  const target = useHTMLElement(el);\n  useEvent([\"mousedown\", \"touchstart\", \"dragstart\"], onMouseDown, target);\n  useEvent([\"mouseup\", \"mouseleave\", \"touchend\", \"touchcancel\", \"drop\", \"dragend\"], onMouseUp, true);\n  return {\n    isPressed,\n    onMouseDown,\n    onMouseUp\n  };\n}\nexport { usePressed as u };","map":{"version":3,"names":["usePressed","el","isPressed","ref","onMouseDown","value","onMouseUp","target","useHTMLElement","useEvent"],"sources":["../../../../src/composables/usePressed.ts"],"sourcesContent":["import { ref, Ref, onMounted } from 'vue'\n\nimport { useHTMLElement, useEvent } from './'\n\nexport function usePressed (el?: Ref<HTMLElement | undefined>) {\n  const isPressed = ref(false)\n\n  const onMouseDown = () => { isPressed.value = true }\n  const onMouseUp = () => {\n    isPressed.value = false\n  }\n\n  const target = useHTMLElement(el as Ref<HTMLElement>)\n\n  useEvent(['mousedown', 'touchstart', 'dragstart'], onMouseDown, target)\n  useEvent([\n    'mouseup', 'mouseleave',\n    'touchend', 'touchcancel',\n    'drop', 'dragend',\n  ], onMouseUp, true)\n\n  return { isPressed, onMouseDown, onMouseUp }\n}\n"],"mappings":";;;AAIO,SAASA,WAAYC,EAAA,EAAmC;EACvD,MAAAC,SAAA,GAAYC,GAAA,CAAI,KAAK;EAE3B,MAAMC,WAAA,GAAcA,CAAA,KAAM;IAAEF,SAAA,CAAUG,KAAA,GAAQ;EAAA;EAC9C,MAAMC,SAAA,GAAYA,CAAA,KAAM;IACtBJ,SAAA,CAAUG,KAAA,GAAQ;EAAA;EAGd,MAAAE,MAAA,GAASC,cAAA,CAAeP,EAAsB;EAEpDQ,QAAA,CAAS,CAAC,aAAa,cAAc,WAAW,GAAGL,WAAA,EAAaG,MAAM;EAC7DE,QAAA,EACP,WAAW,cACX,YAAY,eACZ,QAAQ,YACPH,SAAA,EAAW,IAAI;EAEX;IAAEJ,SAAA;IAAWE,WAAA;IAAaE;EAAA;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}