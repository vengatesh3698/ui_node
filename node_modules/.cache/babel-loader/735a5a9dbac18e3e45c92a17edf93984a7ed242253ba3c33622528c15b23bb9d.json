{"ast":null,"code":"import { defineComponent, ref, computed } from \"vue\";\nimport { u as useTimePicker } from \"./hooks/useTimePicker-f70e2522.mjs\";\nimport { V as VaTimePickerColumn } from \"./components/VaTimePickerColumn/index-40959c9e.mjs\";\nimport { a as useStatefulProps, u as useStatefulEmits, b as useStateful } from \"../../composables/useStateful-50e4a6b9.mjs\";\nimport { u as useFormFieldProps, a as useFormField } from \"../../composables/useFormField-0ac52e7e.mjs\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset-0dfbd395.mjs\";\nimport { u as useArrayRefs } from \"../../composables/useArrayRefs-26d94ed7.mjs\";\nimport { u as useCSSVariables } from \"../../composables/useCSSVariables-2a07df45.mjs\";\nconst _sfc_main = defineComponent({\n  name: \"VaTimePicker\",\n  components: {\n    VaTimePickerColumn\n  },\n  props: {\n    ...useStatefulProps,\n    ...useFormFieldProps,\n    ...useComponentPresetProp,\n    modelValue: {\n      type: Date,\n      required: false\n    },\n    ampm: {\n      type: Boolean,\n      default: false\n    },\n    hidePeriodSwitch: {\n      type: Boolean,\n      default: false\n    },\n    periodUpdatesModelValue: {\n      type: Boolean,\n      default: true\n    },\n    // Update model value when switching period automatically\n    view: {\n      type: String,\n      default: \"minutes\"\n    },\n    hoursFilter: {\n      type: Function\n    },\n    minutesFilter: {\n      type: Function\n    },\n    secondsFilter: {\n      type: Function\n    },\n    framed: {\n      type: Boolean,\n      default: false\n    },\n    cellHeight: {\n      type: Number,\n      default: 30\n    },\n    visibleCellsCount: {\n      type: Number,\n      default: 7\n    }\n  },\n  emits: [...useStatefulEmits],\n  setup(props, {\n    emit\n  }) {\n    const {\n      valueComputed\n    } = useStateful(props, emit);\n    const {\n      columns,\n      isPM\n    } = useTimePicker(props, valueComputed);\n    const {\n      setItemRef,\n      itemRefs: pickers\n    } = useArrayRefs();\n    const activeColumnIndex = ref();\n    const focus = (idx = 0) => {\n      var _a;\n      (_a = pickers.value[idx]) == null ? void 0 : _a.focus();\n    };\n    const blur = idx => {\n      var _a;\n      idx ? (_a = pickers.value[idx]) == null ? void 0 : _a.blur() : pickers.value.forEach(el => el == null ? void 0 : el.blur());\n    };\n    const {\n      computedClasses: computedFormClasses\n    } = useFormField(\"va-time-picker\", props);\n    const focusNext = () => {\n      const nextIndex = ((activeColumnIndex == null ? void 0 : activeColumnIndex.value) || 0) + 1;\n      activeColumnIndex.value = nextIndex % columns.value.length;\n      focus(activeColumnIndex.value);\n    };\n    const focusPrev = () => {\n      const nextIndex = ((activeColumnIndex == null ? void 0 : activeColumnIndex.value) || 0) - 1 + columns.value.length;\n      activeColumnIndex.value = nextIndex % columns.value.length;\n      focus(activeColumnIndex.value);\n    };\n    const computedClasses = computed(() => ({\n      ...computedFormClasses,\n      \"va-time-picker--framed\": props.framed\n    }));\n    const computedStyles = useCSSVariables(\"va-time-picker\", () => {\n      const gapHeight = (props.visibleCellsCount - 1) / 2 * props.cellHeight;\n      return {\n        height: `${props.cellHeight * props.visibleCellsCount}px`,\n        \"cell-height\": `${props.cellHeight}px`,\n        \"column-gap-height\": `${gapHeight}px`\n      };\n    });\n    return {\n      columns,\n      computedStyles,\n      computedClasses,\n      isPM,\n      pickers,\n      setItemRef,\n      focusNext,\n      focusPrev,\n      activeColumnIndex,\n      focus,\n      blur\n    };\n  }\n});\nexport { _sfc_main as _ };\nimport '../../../VaTimePicker.css';","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","VaTimePickerColumn","props","useStatefulProps","useFormFieldProps","useComponentPresetProp","modelValue","type","Date","required","ampm","Boolean","default","hidePeriodSwitch","periodUpdatesModelValue","view","String","hoursFilter","Function","minutesFilter","secondsFilter","framed","cellHeight","Number","visibleCellsCount","emits","useStatefulEmits","setup","emit","valueComputed","useStateful","columns","isPM","useTimePicker","setItemRef","itemRefs","pickers","useArrayRefs","activeColumnIndex","ref","focus","idx","_a","value","blur","forEach","el","computedClasses","computedFormClasses","useFormField","focusNext","nextIndex","length","focusPrev","computed","computedStyles","useCSSVariables","gapHeight","height"],"sources":["../../../../../src/components/va-time-picker/VaTimePicker.vue"],"sourcesContent":["<template>\n  <div\n    class=\"va-time-picker\"\n    :class=\"computedClasses\"\n    :style=\"computedStyles\"\n  >\n    <VaTimePickerColumn\n      v-for=\"(column, idx) in columns\" :key=\"idx\"\n      :ref=\"setItemRef\"\n      :items=\"column.items\"\n      :tabindex=\"disabled ? -1 : 0\"\n      :cell-height=\"$props.cellHeight\"\n      v-model:activeItemIndex=\"column.activeItem.value\"\n      @keydown.right.stop.prevent=\"focusNext()\"\n      @keydown.tab.exact.stop.prevent=\"focusNext()\"\n      @keydown.left.stop.prevent=\"focusPrev()\"\n      @keydown.shift.tab.stop.prevent=\"focusPrev()\"\n      @focus=\"activeColumnIndex = idx\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, computed, PropType } from 'vue'\nimport { useTimePicker } from './hooks/useTimePicker'\n\nimport { VaTimePickerColumn } from './components/VaTimePickerColumn'\n\nimport {\n  useComponentPresetProp,\n  useStatefulProps,\n  useStatefulEmits,\n  useStateful,\n  useFormFieldProps,\n  useFormField,\n  useArrayRefs,\n  useCSSVariables,\n} from '../../composables'\n\nexport default defineComponent({\n  name: 'VaTimePicker',\n\n  components: { VaTimePickerColumn },\n\n  props: {\n    ...useStatefulProps,\n    ...useFormFieldProps,\n    ...useComponentPresetProp,\n    modelValue: { type: Date, required: false },\n    ampm: { type: Boolean, default: false },\n    hidePeriodSwitch: { type: Boolean, default: false },\n    periodUpdatesModelValue: { type: Boolean, default: true }, // Update model value when switching period automatically\n    view: { type: String as PropType<'hours' | 'minutes' | 'seconds'>, default: 'minutes' },\n    hoursFilter: { type: Function as PropType<(h: number) => boolean> },\n    minutesFilter: { type: Function as PropType<(h: number) => boolean> },\n    secondsFilter: { type: Function as PropType<(h: number) => boolean> },\n    framed: { type: Boolean, default: false },\n    cellHeight: { type: Number, default: 30 },\n    visibleCellsCount: { type: Number, default: 7 },\n  },\n\n  emits: [...useStatefulEmits],\n\n  setup (props, { emit }) {\n    const { valueComputed } = useStateful(props, emit)\n    const { columns, isPM } = useTimePicker(props, valueComputed)\n\n    const { setItemRef, itemRefs: pickers } = useArrayRefs()\n\n    const activeColumnIndex = ref<number>()\n\n    const focus = (idx = 0): void => {\n      pickers.value[idx]?.focus()\n    }\n\n    const blur = (idx?: number): void => {\n      idx ? pickers.value[idx]?.blur() : pickers.value.forEach((el) => el?.blur())\n    }\n\n    const { computedClasses: computedFormClasses } = useFormField('va-time-picker', props)\n\n    const focusNext = () => {\n      const nextIndex = (activeColumnIndex?.value || 0) + 1\n\n      activeColumnIndex.value = nextIndex % columns.value.length\n      focus(activeColumnIndex.value)\n    }\n\n    const focusPrev = () => {\n      const nextIndex = (activeColumnIndex?.value || 0) - 1 + columns.value.length\n\n      activeColumnIndex.value = nextIndex % columns.value.length\n      focus(activeColumnIndex.value)\n    }\n\n    const computedClasses = computed(() => ({\n      ...computedFormClasses,\n      'va-time-picker--framed': props.framed,\n    }))\n\n    const computedStyles = useCSSVariables('va-time-picker', () => {\n      const gapHeight = (props.visibleCellsCount - 1) / 2 * props.cellHeight\n\n      return {\n        height: `${props.cellHeight * props.visibleCellsCount}px`,\n        'cell-height': `${props.cellHeight}px`,\n        'column-gap-height': `${gapHeight}px`,\n      }\n    })\n\n    return {\n      columns,\n      computedStyles,\n      computedClasses,\n      isPM,\n      pickers,\n      setItemRef,\n\n      focusNext,\n      focusPrev,\n      activeColumnIndex,\n\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import './_variables.scss';\n\n@mixin after-overlay {\n  position: relative;\n\n  &::after {\n    content: '';\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    z-index: 1;\n  }\n}\n\n.va-time-picker {\n  display: var(--va-time-picker-display);\n  justify-content: center;\n  overflow: hidden;\n  height: var(--va-time-picker-height);\n  font-family: var(--va-font-family);\n\n  &--readonly {\n    @include after-overlay();\n  }\n\n  &--disabled {\n    @include after-overlay();\n\n    opacity: var(--va-time-picker-disabled-opacity);\n  }\n\n  &--framed {\n    position: relative;\n\n    &::before {\n      content: \"\";\n      height: var(--va-time-picker-cell-height);\n      width: 100%;\n      position: absolute;\n      top: 50%;\n      left: 0;\n      transform: translateY(-50%);\n      border-top: 1px solid var(--va-divider);\n      border-bottom: 1px solid var(--va-divider);\n      z-index: 0;\n    }\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}