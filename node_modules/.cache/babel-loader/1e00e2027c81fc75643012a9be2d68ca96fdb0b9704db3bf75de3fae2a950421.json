{"ast":null,"code":"import { computed } from \"vue\";\nimport { w as warn } from \"../utils/console-42c8e8cc.mjs\";\nimport { u as useGlobalConfig } from \"./useGlobalConfig-29bee2de.mjs\";\nconst applyI18nTemplate = (key, values) => {\n  if (!values) {\n    return key;\n  }\n  Object.keys(values).forEach(valueKey => {\n    key = key.replace(`{${valueKey}}`, String(values[valueKey]));\n  });\n  return key;\n};\nconst useTranslation = () => {\n  const {\n    globalConfig\n  } = useGlobalConfig();\n  const config = computed(() => globalConfig.value.i18n);\n  return {\n    /** Translate prop. Translate only if key has `$t:` prefix */\n    tp: (key, values) => {\n      if (!key) {\n        return \"\";\n      }\n      if (key.startsWith(\"$t:\")) {\n        key = config.value[key.slice(3)] || key;\n      }\n      return applyI18nTemplate(key, values) || key;\n    },\n    t(key, values) {\n      const translated = config.value[key];\n      if (!translated) {\n        warn(`${key} not found in VuesticUI i18n config`);\n        return key;\n      }\n      return applyI18nTemplate(translated, values) || key;\n    }\n  };\n};\nexport { useTranslation as u };","map":{"version":3,"names":["applyI18nTemplate","key","values","Object","keys","forEach","valueKey","replace","String","useTranslation","globalConfig","useGlobalConfig","config","computed","value","i18n","tp","startsWith","slice","t","translated","warn"],"sources":["../../../../src/composables/useTranslation.ts"],"sourcesContent":["import { computed } from 'vue'\nimport { useGlobalConfig } from '../composables'\nimport { I18nConfig } from '../services/i18n'\nimport { warn } from '../utils/console'\n\ntype Stringable = number | string | boolean | undefined\n\nconst applyI18nTemplate = (key: string, values?: Record<string, Stringable>) => {\n  if (!values) { return key }\n\n  Object.keys(values).forEach((valueKey) => {\n    key = key.replace(`{${valueKey}}`, String(values[valueKey]))\n  })\n  return key\n}\n\nexport const useTranslation = () => {\n  const { globalConfig } = useGlobalConfig()\n\n  const config = computed(() => globalConfig.value.i18n)\n\n  return {\n    /** Translate prop. Translate only if key has `$t:` prefix */\n    tp: <Key extends string | undefined>(key: Key, values?: Record<string, Stringable>): string => {\n      if (!key) { return '' }\n\n      if (key.startsWith('$t:')) {\n        key = (config.value[key.slice(3) as keyof I18nConfig] || key) as NonNullable<Key>\n      }\n\n      return (applyI18nTemplate(key, values) || key)\n    },\n    t (key: string, values?: Record<string, Stringable>) {\n      const translated = config.value[key as keyof I18nConfig]\n      if (!translated) {\n        warn(`${key} not found in VuesticUI i18n config`)\n        return key\n      }\n      return (applyI18nTemplate(translated, values) || key)\n    },\n  }\n}\n"],"mappings":";;;AAOA,MAAMA,iBAAA,GAAoBA,CAACC,GAAA,EAAaC,MAAA,KAAwC;EAC9E,IAAI,CAACA,MAAA,EAAQ;IAAS,OAAAD,GAAA;EAAI;EAE1BE,MAAA,CAAOC,IAAA,CAAKF,MAAM,EAAEG,OAAA,CAASC,QAAA,IAAa;IAClCL,GAAA,GAAAA,GAAA,CAAIM,OAAA,CAAQ,IAAID,QAAA,KAAaE,MAAA,CAAON,MAAA,CAAOI,QAAQ,CAAC,CAAC;EAAA,CAC5D;EACM,OAAAL,GAAA;AACT;AAEO,MAAMQ,cAAA,GAAiBA,CAAA,KAAM;EAC5B;IAAEC;EAAA,IAAiBC,eAAA;EAEzB,MAAMC,MAAA,GAASC,QAAA,CAAS,MAAMH,YAAA,CAAaI,KAAA,CAAMC,IAAI;EAE9C;IAAA;IAELC,EAAA,EAAIA,CAAiCf,GAAA,EAAUC,MAAA,KAAgD;MAC7F,IAAI,CAACD,GAAA,EAAK;QAAS;MAAG;MAElB,IAAAA,GAAA,CAAIgB,UAAA,CAAW,KAAK,GAAG;QACzBhB,GAAA,GAAOW,MAAA,CAAOE,KAAA,CAAMb,GAAA,CAAIiB,KAAA,CAAM,CAAC,CAAqB,KAAKjB,GAAA;MAC3D;MAEQ,OAAAD,iBAAA,CAAkBC,GAAA,EAAKC,MAAM,KAAKD,GAAA;IAC5C;IACAkB,EAAGlB,GAAA,EAAaC,MAAA,EAAqC;MAC7C,MAAAkB,UAAA,GAAaR,MAAA,CAAOE,KAAA,CAAMb,GAAuB;MACvD,IAAI,CAACmB,UAAA,EAAY;QACfC,IAAA,CAAK,GAAGpB,GAAA,qCAAwC;QACzC,OAAAA,GAAA;MACT;MACQ,OAAAD,iBAAA,CAAkBoB,UAAA,EAAYlB,MAAM,KAAKD,GAAA;IACnD;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}