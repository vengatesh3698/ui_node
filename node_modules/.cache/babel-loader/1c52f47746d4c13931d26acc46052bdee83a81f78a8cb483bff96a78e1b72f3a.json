{"ast":null,"code":"import { g as getWindow } from \"../../utils/ssr-fd33979c.mjs\";\nimport { i as isDev } from \"../../utils/env-da4fbb25.mjs\";\nimport { l as isCSSVariable } from \"../../services/color/utils-21d3493b.mjs\";\nconst window = getWindow();\nconst getCSSVariableNameFromDeclaration = color => color.slice(4, -1);\nconst getElementBackgroundFromCSS = el => {\n  const color = [...el.ownerDocument.styleSheets].filter(s => {\n    try {\n      return s.cssRules;\n    } catch {\n      return false;\n    }\n  }).map(s => [...(s.cssRules || [])]).flat().reduce((bg, cssRule) => {\n    const {\n      selectorText\n    } = cssRule;\n    try {\n      if (!el.matches(selectorText)) {\n        return bg;\n      }\n    } catch (error) {\n      if (isDev) {\n        console.warn(error, selectorText);\n      }\n    }\n    if (cssRule instanceof CSSStyleRule) {\n      return cssRule.style.background || cssRule.style.backgroundColor || bg;\n    }\n    return bg;\n  }, \"\").trim();\n  if (isCSSVariable(color)) {\n    return window == null ? void 0 : window.getComputedStyle(el).getPropertyValue(getCSSVariableNameFromDeclaration(color)).trim();\n  }\n  return color;\n};\nconst EMPTY_TRANSITION = \"all 0s ease 0s\";\nconst getElementBackground = element => {\n  const computedStyle = window == null ? void 0 : window.getComputedStyle(element);\n  if (!computedStyle) {\n    return;\n  }\n  if (computedStyle.transition.trim() !== EMPTY_TRANSITION) {\n    return getElementBackgroundFromCSS(element);\n  }\n  return computedStyle.backgroundColor;\n};\nexport { getElementBackground as g };","map":{"version":3,"names":["window","getWindow","getCSSVariableNameFromDeclaration","color","slice","getElementBackgroundFromCSS","el","ownerDocument","styleSheets","filter","s","cssRules","map","flat","reduce","bg","cssRule","selectorText","matches","error","isDev","console","warn","CSSStyleRule","style","background","backgroundColor","trim","isCSSVariable","getComputedStyle","getPropertyValue","EMPTY_TRANSITION","getElementBackground","element","computedStyle","transition"],"sources":["../../../../../src/composables/useElementBackground/utils.ts"],"sourcesContent":["import { getWindow } from '../../utils/ssr'\nimport { isCSSVariable } from '../useColors'\nimport { isDev } from '../../utils/env'\n\nexport type ColorArray = [number, number, number, number]\n\nconst FLOAT_NUMBERS_REGEX = /\\d+(\\.\\d+)?/g\n\nexport const parseRGBA = (color: string): ColorArray | undefined => color\n  .match(FLOAT_NUMBERS_REGEX)?.map((n) => parseFloat(n ?? 1)) as ColorArray\n\nconst window = getWindow()\n\n/** Remove `var()` from css variable declaration */\nconst getCSSVariableNameFromDeclaration = (color: string) => color.slice(4, -1)\n\n/**\n * Super slow function. Must be covered with cache as much as possible.\n * It actually goes through all CSS and search for value.\n * This is needed to prevent transition delay when changing background color.\n */\nexport const getElementBackgroundFromCSS = (el: HTMLElement) => {\n  const color = [...el.ownerDocument.styleSheets]\n    .filter((s) => {\n      try {\n        // Might be a cross-origin stylesheet\n        return (s as CSSStyleSheet).cssRules\n      } catch {\n        return false\n      }\n    })\n    .map(s => [...s.cssRules || []])\n    .flat()\n    .reduce((bg, cssRule) => {\n      const { selectorText } = (cssRule as CSSPageRule)\n\n      try {\n        if (!el.matches(selectorText)) { return bg }\n      } catch (error) {\n        if (isDev) {\n          console.warn(error, selectorText)\n        }\n      }\n\n      if (cssRule instanceof CSSStyleRule) {\n        return cssRule.style.background || cssRule.style.backgroundColor || bg\n      }\n\n      return bg\n    }, '')\n    .trim()\n\n  if (isCSSVariable(color)) {\n    return window?.getComputedStyle(el)\n      .getPropertyValue(getCSSVariableNameFromDeclaration(color)).trim()\n  }\n\n  return color\n}\n\nconst EMPTY_TRANSITION = 'all 0s ease 0s'\n\nexport const getElementBackground = (element: HTMLElement) => {\n  const computedStyle = window?.getComputedStyle(element)\n\n  if (!computedStyle) { return }\n\n  if (computedStyle.transition.trim() !== EMPTY_TRANSITION) {\n    return getElementBackgroundFromCSS(element)\n  }\n\n  return computedStyle.backgroundColor\n}\n"],"mappings":";;;AAWA,MAAMA,MAAA,GAASC,SAAA,CAAU;AAGzB,MAAMC,iCAAA,GAAqCC,KAAA,IAAkBA,KAAA,CAAMC,KAAA,CAAM,GAAG,EAAE;AAOjE,MAAAC,2BAAA,GAA+BC,EAAA,IAAoB;EACxD,MAAAH,KAAA,GAAQ,CAAC,GAAGG,EAAA,CAAGC,aAAA,CAAcC,WAAW,EAC3CC,MAAA,CAAQC,CAAA,IAAM;IACT;MAEF,OAAQA,CAAA,CAAoBC,QAAA;IAAA,QAC5B;MACO;IACT;EACD,GACAC,GAAA,CAASF,CAAA,KAAC,IAAGA,CAAA,CAAEC,QAAA,IAAY,EAAE,EAAC,EAC9BE,IAAA,GACAC,MAAA,CAAO,CAACC,EAAA,EAAIC,OAAA,KAAY;IACjB;MAAEC;IAAkB,IAAAD,OAAA;IAEtB;MACF,IAAI,CAACV,EAAA,CAAGY,OAAA,CAAQD,YAAY,GAAG;QAAS,OAAAF,EAAA;MAAG;IAAA,SACpCI,KAAA;MACP,IAAIC,KAAA,EAAO;QACDC,OAAA,CAAAC,IAAA,CAAKH,KAAA,EAAOF,YAAY;MAClC;IACF;IAEA,IAAID,OAAA,YAAmBO,YAAA,EAAc;MACnC,OAAOP,OAAA,CAAQQ,KAAA,CAAMC,UAAA,IAAcT,OAAA,CAAQQ,KAAA,CAAME,eAAA,IAAmBX,EAAA;IACtE;IAEO,OAAAA,EAAA;EAAA,GACN,EAAE,EACJY,IAAA;EAEC,IAAAC,aAAA,CAAczB,KAAK,GAAG;IACjB,OAAAH,MAAA,oBAAAA,MAAA,CAAQ6B,gBAAA,CAAiBvB,EAAA,EAC7BwB,gBAAA,CAAiB5B,iCAAA,CAAkCC,KAAK,GAAGwB,IAAA;EAChE;EAEO,OAAAxB,KAAA;AACT;AAEA,MAAM4B,gBAAA,GAAmB;AAEZ,MAAAC,oBAAA,GAAwBC,OAAA,IAAyB;EACtD,MAAAC,aAAA,GAAgBlC,MAAA,oBAAAA,MAAA,CAAQ6B,gBAAA,CAAiBI,OAAA;EAE/C,IAAI,CAACC,aAAA,EAAe;IAAE;EAAO;EAE7B,IAAIA,aAAA,CAAcC,UAAA,CAAWR,IAAA,CAAK,MAAMI,gBAAA,EAAkB;IACxD,OAAO1B,2BAAA,CAA4B4B,OAAO;EAC5C;EAEA,OAAOC,aAAA,CAAcR,eAAA;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}