{"ast":null,"code":"import { ref, computed, watch } from \"vue\";\nimport { d as isDatesMonthEqual, e as isDatesDayEqual, f as isDatesYearEqual, a as isSingleDate, i as isDates, b as isRange } from \"../utils/date-utils-62af9561.mjs\";\nimport { u as useDatePickerModelValue } from \"./model-value-helper-b0a7ff7f.mjs\";\nconst getDateEqualFunction = type => {\n  return {\n    month: isDatesMonthEqual,\n    day: isDatesDayEqual,\n    year: isDatesYearEqual\n  }[type];\n};\nconst useDatePicker = (type, dates, props, emit) => {\n  const datesEqual = getDateEqualFunction(type);\n  const isAllowedDate = props.allowedDays || props.allowedMonths || props.allowedYears;\n  const isDateDisabled = date => isAllowedDate === void 0 ? false : !isAllowedDate(date);\n  const hoveredIndex = ref(-1);\n  const hoveredValue = computed(() => dates.value[hoveredIndex.value]);\n  const {\n    updateModelValue\n  } = useDatePickerModelValue(props, emit, datesEqual);\n  const onClick = date => {\n    if (props.readonly || isDateDisabled(date)) {\n      return;\n    }\n    updateModelValue(date);\n    emit(`click:${type}`, date);\n  };\n  const isToday = date => {\n    const today = /* @__PURE__ */new Date();\n    return datesEqual(today, date);\n  };\n  const isSelected = date => {\n    if (!props.modelValue) {\n      return false;\n    }\n    if (isSingleDate(props.modelValue)) {\n      return datesEqual(props.modelValue, date);\n    } else if (isDates(props.modelValue)) {\n      return !!props.modelValue.find(d => datesEqual(d, date));\n    } else if (isRange(props.modelValue)) {\n      return datesEqual(props.modelValue.start, date) || datesEqual(props.modelValue.end, date);\n    }\n    return false;\n  };\n  const isInRange = date => {\n    if (!props.modelValue) {\n      return false;\n    }\n    if (!isRange(props.modelValue)) {\n      return false;\n    }\n    if (props.modelValue.start && props.modelValue.end) {\n      return props.modelValue.start < date && props.modelValue.end > date;\n    }\n    const selectedDate = props.modelValue.start || props.modelValue.end;\n    if (selectedDate) {\n      if (!hoveredValue.value) {\n        return false;\n      }\n      return selectedDate < date ? hoveredValue.value >= date : hoveredValue.value <= date;\n    }\n    return false;\n  };\n  watch(hoveredValue, date => {\n    emit(`hover:${type}`, date);\n  });\n  return {\n    hoveredIndex,\n    hoveredValue,\n    onClick,\n    isToday,\n    isSelected,\n    isInRange\n  };\n};\nexport { useDatePicker as u };","map":{"version":3,"names":["getDateEqualFunction","type","month","isDatesMonthEqual","day","isDatesDayEqual","year","isDatesYearEqual","useDatePicker","dates","props","emit","datesEqual","isAllowedDate","allowedDays","allowedMonths","allowedYears","isDateDisabled","date","hoveredIndex","ref","hoveredValue","computed","value","updateModelValue","useDatePickerModelValue","onClick","readonly","isToday","today","Date","isSelected","modelValue","isSingleDate","isDates","find","d","isRange","start","end","isInRange","selectedDate","watch"],"sources":["../../../../../../src/components/va-date-picker/hooks/use-picker.ts"],"sourcesContent":["import { computed, ComputedRef, ref, watch } from 'vue'\n\nimport { isDatesMonthEqual, isDatesDayEqual, isDatesYearEqual, isDates, isRange, isSingleDate } from './../utils/date-utils'\nimport { useDatePickerModelValue } from './model-value-helper'\nimport { DatePickerMode, DatePickerModelValue, DatePickerType } from '../types'\n\nconst getDateEqualFunction = (type: DatePickerType) => {\n  return {\n    month: isDatesMonthEqual,\n    day: isDatesDayEqual,\n    year: isDatesYearEqual,\n  }[type]\n}\n\nexport const useDatePicker = (\n  type: DatePickerType,\n  dates: ComputedRef<Date[]>,\n  props: {\n    modelValue?: DatePickerModelValue,\n    mode: DatePickerMode,\n    readonly: boolean,\n    allowedDays?: (date: Date) => boolean,\n    allowedMonths?: (date: Date) => boolean,\n    allowedYears?: (date: Date) => boolean,\n  },\n  emit: (event: 'update:modelValue' | any, ...args: any[]) => void,\n) => {\n  const datesEqual = getDateEqualFunction(type)\n  const isAllowedDate = props.allowedDays || props.allowedMonths || props.allowedYears\n  const isDateDisabled = (date: Date) => isAllowedDate === undefined ? false : !isAllowedDate(date)\n\n  const hoveredIndex = ref(-1)\n  const hoveredValue = computed(() => dates.value[hoveredIndex.value])\n\n  const { updateModelValue } = useDatePickerModelValue(\n    props,\n    emit,\n    datesEqual,\n  )\n\n  const onClick = (date: Date) => {\n    if (props.readonly || isDateDisabled(date)) { return }\n\n    updateModelValue(date)\n    emit(`click:${type}`, date)\n  }\n\n  const isToday = (date: Date): boolean => {\n    const today = new Date()\n    return datesEqual(today, date)\n  }\n\n  const isSelected = (date: Date): boolean => {\n    if (!props.modelValue) { return false }\n\n    if (isSingleDate(props.modelValue)) {\n      return datesEqual(props.modelValue, date)\n    } else if (isDates(props.modelValue)) {\n      return !!props.modelValue.find((d) => datesEqual(d, date))\n    } else if (isRange(props.modelValue)) {\n      return datesEqual(props.modelValue.start, date) || datesEqual(props.modelValue.end, date)\n    }\n\n    return false\n  }\n\n  const isInRange = (date: Date): boolean => {\n    if (!props.modelValue) { return false }\n\n    if (!isRange(props.modelValue)) { return false }\n\n    if (props.modelValue.start && props.modelValue.end) {\n      return props.modelValue.start < date && props.modelValue.end > date\n    }\n\n    const selectedDate = props.modelValue.start || props.modelValue.end\n\n    if (selectedDate) {\n      if (!hoveredValue.value) { return false }\n\n      return selectedDate < date\n        ? (hoveredValue.value >= date)\n        : (hoveredValue.value <= date)\n    }\n\n    return false\n  }\n\n  watch(hoveredValue, (date) => { emit(`hover:${type}`, date) })\n\n  return {\n    hoveredIndex,\n    hoveredValue,\n    onClick,\n    isToday,\n    isSelected,\n    isInRange,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}