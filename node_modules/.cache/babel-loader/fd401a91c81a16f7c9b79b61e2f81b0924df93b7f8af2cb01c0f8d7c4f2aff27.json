{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { getCurrentInstance } from \"vue\";\nimport { c as createModalInstance } from \"../modal-5ea0ec37.mjs\";\nconst useModal = () => {\n  var _a;\n  const appContext = (_a = getCurrentInstance()) == null ? void 0 : _a.appContext;\n  if (!appContext) {\n    throw new Error(\"useModal can be used only in setup function. You can use app.config.globalProperties.$vaModal outside setup function\");\n  }\n  const init = options => {\n    return createModalInstance(options, appContext);\n  };\n  const confirm = options => {\n    if (typeof options === \"string\") {\n      return new Promise((resolve, reject) => {\n        createModalInstance({\n          message: options,\n          onOk() {\n            resolve(true);\n          },\n          onCancel() {\n            resolve(false);\n          }\n        }, appContext);\n      });\n    }\n    return new Promise((resolve, reject) => {\n      createModalInstance({\n        ...options,\n        onOk() {\n          var _a2;\n          (_a2 = options == null ? void 0 : options.onOk) == null ? void 0 : _a2.call(options);\n          resolve(true);\n        },\n        onCancel() {\n          var _a2;\n          (_a2 = options == null ? void 0 : options.onCancel) == null ? void 0 : _a2.call(options);\n          resolve(false);\n        }\n      }, appContext);\n    });\n  };\n  return {\n    init,\n    confirm\n  };\n};\nexport { useModal as u };","map":{"version":3,"names":["useModal","appContext","_a","getCurrentInstance","Error","init","options","createModalInstance","confirm","Promise","resolve","reject","message","onOk","onCancel","_a2","call"],"sources":["../../../../../../src/components/va-modal/hooks/useModal.ts"],"sourcesContent":["import { getCurrentInstance } from 'vue'\nimport { createModalInstance } from '../modal'\nimport { ModalOptions } from '../types'\n\n/** This hook can be used without plugin used */\nexport const useModal = () => {\n  const appContext = getCurrentInstance()?.appContext\n\n  if (!appContext) {\n    throw new Error('useModal can be used only in setup function. You can use app.config.globalProperties.$vaModal outside setup function')\n  }\n\n  /**\n   * @param options can be message string or options object\n   */\n  const init = (options: string | ModalOptions) => {\n    return createModalInstance(options, appContext)\n  }\n\n  /**\n   * @param options can be message string or options object\n   * @returns Promise with boolean value. True if modal was confirmed, false if modal was canceled\n   */\n  const confirm = (options: string | ModalOptions) => {\n    if (typeof options === 'string') {\n      return new Promise<boolean>((resolve, reject) => {\n        createModalInstance({\n          message: options as string,\n          onOk () {\n            resolve(true)\n          },\n          onCancel () {\n            resolve(false)\n          },\n        }, appContext)\n      })\n    }\n\n    return new Promise<boolean>((resolve, reject) => {\n      createModalInstance({\n        ...options,\n        onOk () {\n          options?.onOk?.()\n          resolve(true)\n        },\n        onCancel () {\n          options?.onCancel?.()\n          resolve(false)\n        },\n      }, appContext)\n    })\n  }\n\n  return { init, confirm }\n}\n"],"mappings":";;;AAKO,MAAMA,QAAA,GAAWA,CAAA,KAAM;;EACtB,MAAAC,UAAA,IAAaC,EAAA,GAAAC,kBAAA,CAAsB,MAAtB,gBAAAD,EAAA,CAAsBD,UAAA;EAEzC,IAAI,CAACA,UAAA,EAAY;IACT,UAAIG,KAAA,CAAM,sHAAsH;EACxI;EAKM,MAAAC,IAAA,GAAQC,OAAA,IAAmC;IACxC,OAAAC,mBAAA,CAAoBD,OAAA,EAASL,UAAU;EAAA;EAO1C,MAAAO,OAAA,GAAWF,OAAA,IAAmC;IAC9C,WAAOA,OAAA,KAAY,UAAU;MAC/B,OAAO,IAAIG,OAAA,CAAiB,CAACC,OAAA,EAASC,MAAA,KAAW;QAC3BJ,mBAAA;UAClBK,OAAA,EAASN,OAAA;UACTO,KAAA,EAAQ;YACNH,OAAA,CAAQ,IAAI;UACd;UACAI,SAAA,EAAY;YACVJ,OAAA,CAAQ,KAAK;UACf;QAAA,GACCT,UAAU;MAAA,CACd;IACH;IAEA,OAAO,IAAIQ,OAAA,CAAiB,CAACC,OAAA,EAASC,MAAA,KAAW;MAC3BJ,mBAAA;QAClB,GAAGD,OAAA;QACHO,KAAA,EAAQ;;UACN,CAAAE,GAAA,GAAAT,OAAA,oBAAAA,OAAA,CAASO,IAAA,KAAT,gBAAAE,GAAA,CAAAC,IAAA,CAAAV,OAAA;UACAI,OAAA,CAAQ,IAAI;QACd;QACAI,SAAA,EAAY;;UACV,CAAAC,GAAA,GAAAT,OAAA,oBAAAA,OAAA,CAASQ,QAAA,KAAT,gBAAAC,GAAA,CAAAC,IAAA,CAAAV,OAAA;UACAI,OAAA,CAAQ,KAAK;QACf;MAAA,GACCT,UAAU;IAAA,CACd;EAAA;EAGI;IAAEI,IAAA;IAAMG;EAAA;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}