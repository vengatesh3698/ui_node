{"ast":null,"code":"import { defineComponent, computed } from \"vue\";\nimport { T as TreeViewKey } from \"../../types-095ae969.mjs\";\nimport { V as VaCheckbox } from \"../../../va-checkbox/index-18feaacf.mjs\";\nimport { u as useStrictInject } from \"../../../../composables/useStrictInject-08ce5ce6.mjs\";\nimport { V as VaIcon } from \"../../../va-icon/index-0ebbc0f2.mjs\";\nimport { u as useBem } from \"../../../../composables/useBem-10a5bc6e.mjs\";\nconst INJECTION_ERROR_MESSAGE = \"The VaTreeNode component should be used in the context of VaTreeView component\";\nconst _sfc_main = defineComponent({\n  name: \"VaTreeNode\",\n  props: {\n    node: {\n      type: Object,\n      required: true\n    }\n  },\n  components: {\n    VaCheckbox,\n    VaIcon\n  },\n  setup: props => {\n    const {\n      iconBy,\n      selectable,\n      expandNodeBy,\n      colorComputed,\n      selectedNodeComputed,\n      getText,\n      getTrackBy,\n      toggleNode,\n      toggleCheckbox,\n      getNodeProperty,\n      handleKeyboardNavigation\n    } = useStrictInject(TreeViewKey, INJECTION_ERROR_MESSAGE);\n    const labelComputed = computed(() => getText(props.node) || \"\");\n    const isExpandedComputed = computed(() => props.node.hasChildren ? !!props.node.expanded : void 0);\n    const iconComputed = computed(() => getNodeProperty(props.node, iconBy));\n    const roleComputed = computed(() => props.node.hasChildren ? \"group\" : \"treeitem\");\n    const treeNodeClassComputed = useBem(\"va-tree-node\", () => ({\n      disabled: !!props.node.disabled\n    }));\n    const expandedClassComputed = useBem(\"va-tree-node-children\", () => ({\n      expanded: !!isExpandedComputed.value\n    }));\n    const indentClassComputed = useBem(\"va-tree-node-content\", () => ({\n      indent: props.node.hasChildren === false\n    }));\n    const cursorClassComputed = useBem(\"va-tree-node-content\", () => ({\n      clickable: props.node.hasChildren === true && expandNodeBy === \"node\"\n    }));\n    const tabIndexComputed = computed(() => props.node.disabled ? -1 : 0);\n    const onNodeClick = type => {\n      const nodeType = expandNodeBy === \"node\" && type === \"leaf\" ? \"node\" : type;\n      if (expandNodeBy === nodeType) {\n        toggleNode(props.node);\n      }\n      selectedNodeComputed.value = props.node;\n    };\n    return {\n      selectable,\n      expandNodeBy,\n      getText,\n      getTrackBy,\n      toggleNode,\n      onNodeClick,\n      handleKeyboardNavigation,\n      toggleCheckbox,\n      roleComputed,\n      iconComputed,\n      labelComputed,\n      colorComputed,\n      tabIndexComputed,\n      indentClassComputed,\n      isExpandedComputed,\n      expandedClassComputed,\n      treeNodeClassComputed,\n      cursorClassComputed\n    };\n  }\n});\nexport { _sfc_main as _ };\nimport '../../../../../VaTreeNode.css';","map":{"version":3,"names":["INJECTION_ERROR_MESSAGE","_sfc_main","defineComponent","name","props","node","type","Object","required","components","VaCheckbox","VaIcon","setup","iconBy","selectable","expandNodeBy","colorComputed","selectedNodeComputed","getText","getTrackBy","toggleNode","toggleCheckbox","getNodeProperty","handleKeyboardNavigation","useStrictInject","TreeViewKey","labelComputed","computed","isExpandedComputed","hasChildren","expanded","iconComputed","roleComputed","treeNodeClassComputed","useBem","disabled","expandedClassComputed","value","indentClassComputed","indent","cursorClassComputed","clickable","tabIndexComputed","onNodeClick","nodeType"],"sources":["../../../../../../../src/components/va-tree-view/components/VaTreeNode/VaTreeNode.vue"],"sourcesContent":["<template>\n  <div\n    class=\"va-tree-node\"\n    :class=\"treeNodeClassComputed\"\n    :role=\"roleComputed\"\n    :aria-expanded=\"isExpandedComputed\"\n    :aria-disabled=\"$props.node.disabled\"\n    :aria-checked=\"!!$props.node.checked\"\n    :tabindex=\"tabIndexComputed\"\n    @keydown.up.stop.prevent=\"handleKeyboardNavigation($event, $props.node)\"\n    @keydown.right.stop.prevent=\"handleKeyboardNavigation($event, $props.node)\"\n    @keydown.down.stop.prevent=\"handleKeyboardNavigation($event, $props.node)\"\n    @keydown.left.stop.prevent=\"handleKeyboardNavigation($event, $props.node)\"\n    @keydown.space.stop.prevent=\"handleKeyboardNavigation($event, $props.node)\"\n    @keydown.esc.stop.prevent=\"handleKeyboardNavigation($event, $props.node)\"\n  >\n    <div class=\"va-tree-node-root\">\n      <div class=\"va-tree-node-content\" :class=\"indentClassComputed\" @click=\"onNodeClick('node')\">\n        <div\n          v-if=\"$props.node.hasChildren\"\n          class=\"va-tree-node-content__item va-tree-node-content__item--leaf\"\n          @click.stop=\"onNodeClick('leaf')\"\n        >\n          <slot name=\"icon-toggle\" v-bind=\"$props.node\">\n            <va-icon\n              :name=\"isExpandedComputed ? 'keyboard_arrow_down' : 'keyboard_arrow_right'\"\n              size=\"20px\"\n            />\n          </slot>\n        </div>\n        <div\n          v-if=\"selectable\"\n          class=\"va-tree-node-content__item\"\n          @click.stop\n        >\n          <slot name=\"checkbox\" v-bind=\"$props.node\">\n            <va-checkbox\n              :model-value=\"$props.node.checked\"\n              :color=\"colorComputed\"\n              indeterminate\n              @update:model-value=\"(v) => toggleCheckbox($props.node, v)\"\n              class=\"va-tree-node__checkbox\"\n            />\n          </slot>\n        </div>\n        <div v-if=\"iconComputed\" class=\"va-tree-node-content__item\">\n          <slot name=\"icon\" v-bind=\"$props.node\">\n            <va-icon :name=\"iconComputed\" size=\"small\" />\n          </slot>\n        </div>\n        <div class=\"va-tree-node-content__body\" :class=\"cursorClassComputed\">\n          <slot name=\"content\" v-bind=\"$props.node\">{{ labelComputed }}</slot>\n        </div>\n      </div>\n    </div>\n    <div\n      v-show=\"$props.node.hasChildren\"\n      :aria-hidden=\"!$props.node.expanded\"\n      class=\"va-tree-node-children\"\n      :class=\"expandedClassComputed\"\n    >\n      <va-tree-node\n        v-for=\"childNode in $props.node.children\"\n        :key=\"getTrackBy(childNode)\"\n        :node=\"childNode\"\n      >\n        <template v-for=\"(_, name) in $slots\" :key=\"name\" v-slot:[name]=\"slotScope\">\n          <slot :name=\"name\" v-bind=\"slotScope\" />\n        </template>\n      </va-tree-node>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType } from 'vue'\n\nimport { useBem, useStrictInject } from '../../../../composables'\n\nimport { VaIcon, VaCheckbox } from '../../../'\nimport { TreeViewKey, TreeNode } from '../../types'\n\nconst INJECTION_ERROR_MESSAGE = 'The VaTreeNode component should be used in the context of VaTreeView component'\n\nexport default defineComponent({\n  name: 'VaTreeNode',\n\n  props: {\n    node: {\n      type: Object as PropType<TreeNode>,\n      required: true,\n    },\n  },\n\n  components: { VaCheckbox, VaIcon },\n\n  setup: (props) => {\n    const {\n      iconBy,\n      selectable,\n      expandNodeBy,\n      colorComputed,\n      selectedNodeComputed,\n      getText,\n      getTrackBy,\n      toggleNode,\n      toggleCheckbox,\n      getNodeProperty,\n      handleKeyboardNavigation,\n    } = useStrictInject(TreeViewKey, INJECTION_ERROR_MESSAGE)\n\n    const labelComputed = computed(() => getText(props.node) || '')\n    const isExpandedComputed = computed(() => props.node.hasChildren ? !!props.node.expanded : undefined)\n    const iconComputed = computed(() => getNodeProperty(props.node, iconBy))\n    const roleComputed = computed(() => props.node.hasChildren ? 'group' : 'treeitem')\n\n    const treeNodeClassComputed = useBem('va-tree-node', () => ({\n      disabled: !!props.node.disabled,\n    }))\n\n    const expandedClassComputed = useBem('va-tree-node-children', () => ({\n      expanded: !!isExpandedComputed.value,\n    }))\n\n    const indentClassComputed = useBem('va-tree-node-content', () => ({\n      indent: props.node.hasChildren === false,\n    }))\n\n    const cursorClassComputed = useBem('va-tree-node-content', () => ({\n      clickable: (props.node.hasChildren === true && expandNodeBy === 'node'),\n    }))\n\n    const tabIndexComputed = computed(() => props.node.disabled ? -1 : 0)\n\n    const onNodeClick = (type: typeof expandNodeBy) => {\n      const nodeType = expandNodeBy === 'node' && type === 'leaf' ? 'node' : type\n\n      if (expandNodeBy === nodeType) {\n        toggleNode(props.node)\n      }\n\n      selectedNodeComputed.value = props.node\n    }\n\n    return {\n      selectable,\n      expandNodeBy,\n\n      getText,\n      getTrackBy,\n      toggleNode,\n      onNodeClick,\n      handleKeyboardNavigation,\n      toggleCheckbox,\n\n      roleComputed,\n      iconComputed,\n      labelComputed,\n      colorComputed,\n      tabIndexComputed,\n      indentClassComputed,\n      isExpandedComputed,\n      expandedClassComputed,\n      treeNodeClassComputed,\n      cursorClassComputed,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../../styles/resources/index\";\n@import 'variables';\n\n.va-tree-node {\n  &-root {\n    display: flex;\n    padding: var(--va-tree-node-padding);\n    position: relative;\n\n    &::before {\n      content: \"\";\n      background-color: var(--va-primary);\n      border-radius: var(--va-tree-node-border-radius);\n      bottom: 0;\n      left: 0;\n      opacity: 0;\n      pointer-events: none;\n      position: absolute;\n      right: 0;\n      top: 0;\n    }\n\n    &:hover::before {\n      opacity: var(--va-tree-node-interactive-bg-opacity);\n    }\n  }\n\n  &-content {\n    display: flex;\n    flex-wrap: nowrap;\n    align-items: center;\n    width: 100%;\n\n    &__item {\n      flex: var(--va-tree-node-content-item-flex);\n      min-width: var(--va-tree-node-indent);\n      line-height: 1;\n\n      &--leaf {\n        cursor: pointer;\n      }\n    }\n\n    &__body {\n      flex: var(--va-tree-node-content-body-item-flex);\n      width: 100%;\n    }\n\n    &--indent {\n      margin-left: var(--va-tree-node-indent);\n    }\n\n    &--clickable {\n      cursor: pointer;\n    }\n  }\n\n  &-children {\n    display: none;\n    background: var(--va-tree-node-children-background);\n    padding-left: var(--va-tree-node-indent);\n    width: 100%;\n\n    &--expanded {\n      display: block;\n    }\n  }\n\n  &__checkbox {\n    --va-checkbox-input-padding: 0;\n  }\n\n  &--disabled {\n    @include va-disabled;\n\n    .va-tree-node-content__item--leaf {\n      cursor: pointer;\n      pointer-events: all;\n    }\n  }\n\n  &:focus-visible > .va-tree-node-root {\n    @include focus-outline;\n\n    &::before {\n      opacity: var(--va-tree-node-interactive-bg-opacity);\n    }\n  }\n}\n</style>\n"],"mappings":";;;;;;AAkFA,MAAMA,uBAAA,GAA0B;AAEhC,MAAAC,SAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EAENC,KAAA,EAAO;IACLC,IAAA,EAAM;MACJC,IAAA,EAAMC,MAAA;MACNC,QAAA,EAAU;IACZ;EACF;EAEAC,UAAA,EAAY;IAAEC,UAAA;IAAYC;EAAO;EAEjCC,KAAA,EAAQR,KAAA,IAAU;IACV;MACJS,MAAA;MACAC,UAAA;MACAC,YAAA;MACAC,aAAA;MACAC,oBAAA;MACAC,OAAA;MACAC,UAAA;MACAC,UAAA;MACAC,cAAA;MACAC,eAAA;MACAC;IAAA,IACEC,eAAA,CAAgBC,WAAA,EAAazB,uBAAuB;IAExD,MAAM0B,aAAA,GAAgBC,QAAA,CAAS,MAAMT,OAAA,CAAQd,KAAA,CAAMC,IAAI,KAAK,EAAE;IACxD,MAAAuB,kBAAA,GAAqBD,QAAA,CAAS,MAAMvB,KAAA,CAAMC,IAAA,CAAKwB,WAAA,GAAc,CAAC,CAACzB,KAAA,CAAMC,IAAA,CAAKyB,QAAA,GAAW,MAAS;IACpG,MAAMC,YAAA,GAAeJ,QAAA,CAAS,MAAML,eAAA,CAAgBlB,KAAA,CAAMC,IAAA,EAAMQ,MAAM,CAAC;IACvE,MAAMmB,YAAA,GAAeL,QAAA,CAAS,MAAMvB,KAAA,CAAMC,IAAA,CAAKwB,WAAA,GAAc,UAAU,UAAU;IAE3E,MAAAI,qBAAA,GAAwBC,MAAA,CAAO,gBAAgB,OAAO;MAC1DC,QAAA,EAAU,CAAC,CAAC/B,KAAA,CAAMC,IAAA,CAAK8B;IACvB;IAEI,MAAAC,qBAAA,GAAwBF,MAAA,CAAO,yBAAyB,OAAO;MACnEJ,QAAA,EAAU,CAAC,CAACF,kBAAA,CAAmBS;IAC/B;IAEI,MAAAC,mBAAA,GAAsBJ,MAAA,CAAO,wBAAwB,OAAO;MAChEK,MAAA,EAAQnC,KAAA,CAAMC,IAAA,CAAKwB,WAAA,KAAgB;IACnC;IAEI,MAAAW,mBAAA,GAAsBN,MAAA,CAAO,wBAAwB,OAAO;MAChEO,SAAA,EAAYrC,KAAA,CAAMC,IAAA,CAAKwB,WAAA,KAAgB,QAAQd,YAAA,KAAiB;IAChE;IAEF,MAAM2B,gBAAA,GAAmBf,QAAA,CAAS,MAAMvB,KAAA,CAAMC,IAAA,CAAK8B,QAAA,GAAW,KAAK,CAAC;IAE9D,MAAAQ,WAAA,GAAerC,IAAA,IAA8B;MACjD,MAAMsC,QAAA,GAAW7B,YAAA,KAAiB,UAAUT,IAAA,KAAS,SAAS,SAASA,IAAA;MAEvE,IAAIS,YAAA,KAAiB6B,QAAA,EAAU;QAC7BxB,UAAA,CAAWhB,KAAA,CAAMC,IAAI;MACvB;MAEAY,oBAAA,CAAqBoB,KAAA,GAAQjC,KAAA,CAAMC,IAAA;IAAA;IAG9B;MACLS,UAAA;MACAC,YAAA;MAEAG,OAAA;MACAC,UAAA;MACAC,UAAA;MACAuB,WAAA;MACApB,wBAAA;MACAF,cAAA;MAEAW,YAAA;MACAD,YAAA;MACAL,aAAA;MACAV,aAAA;MACA0B,gBAAA;MACAJ,mBAAA;MACAV,kBAAA;MACAQ,qBAAA;MACAH,qBAAA;MACAO;IAAA;EAEJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}