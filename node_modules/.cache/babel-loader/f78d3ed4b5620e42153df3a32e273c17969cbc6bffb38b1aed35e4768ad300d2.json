{"ast":null,"code":"import { unref } from \"vue\";\nimport { u as useCaptureEvent } from \"./useCaptureEvent-90d008ac.mjs\";\nimport { e as extractHTMLElement } from \"./useHTMLElement-beee793a.mjs\";\nconst checkIfElementChild = (parent, child) => {\n  if (!child) {\n    return false;\n  }\n  if (child.parentElement === parent) {\n    return true;\n  }\n  return parent.contains(child);\n};\nconst safeArray = a => Array.isArray(a) ? a : [a];\nconst useClickOutside = (elements, cb) => {\n  useCaptureEvent(\"click\", event => {\n    const clickTarget = event.target;\n    if (event.target.shadowRoot) {\n      return;\n    }\n    const isClickInside = safeArray(elements).some(element => {\n      const el = extractHTMLElement(unref(element));\n      return el && checkIfElementChild(el, clickTarget);\n    });\n    if (!isClickInside) {\n      cb(clickTarget);\n    }\n  });\n};\nexport { useClickOutside as u };","map":{"version":3,"names":["checkIfElementChild","parent","child","parentElement","contains","safeArray","a","Array","isArray","useClickOutside","elements","cb","useCaptureEvent","event","clickTarget","target","shadowRoot","isClickInside","some","element","el","extractHTMLElement","unref"],"sources":["../../../../src/composables/useClickOutside.ts"],"sourcesContent":["import { Ref, unref } from 'vue'\n\nimport { useCaptureEvent } from './useCaptureEvent'\nimport { extractHTMLElement } from './useHTMLElement'\n\nconst checkIfElementChild = (parent: HTMLElement, child: HTMLElement | null | undefined): boolean => {\n  if (!child) { return false }\n  if (child.parentElement === parent) { return true }\n\n  return parent.contains(child)\n}\n\ntype MaybeRef<T> = T | Ref<T>\ntype MaybeArray<T> = T | T[]\n\nconst safeArray = <T>(a: MaybeArray<T>) => Array.isArray(a) ? a : [a]\n\nexport const useClickOutside = (elements: MaybeArray<MaybeRef<HTMLElement | undefined>>, cb: (el: HTMLElement) => void) => {\n  useCaptureEvent('click', (event: MouseEvent) => {\n    const clickTarget = event.target as HTMLElement\n\n    if ((event.target as HTMLElement).shadowRoot) {\n      return\n    }\n\n    const isClickInside = safeArray(elements)\n      .some((element) => {\n        const el = extractHTMLElement(unref(element))\n        return el && checkIfElementChild(el, clickTarget)\n      })\n\n    if (!isClickInside) { cb(clickTarget) }\n  })\n}\n"],"mappings":";;;AAKA,MAAMA,mBAAA,GAAsBA,CAACC,MAAA,EAAqBC,KAAA,KAAmD;EACnG,IAAI,CAACA,KAAA,EAAO;IAAS;EAAM;EACvB,IAAAA,KAAA,CAAMC,aAAA,KAAkBF,MAAA,EAAQ;IAAS;EAAK;EAE3C,OAAAA,MAAA,CAAOG,QAAA,CAASF,KAAK;AAC9B;AAKA,MAAMG,SAAA,GAAgBC,CAAA,IAAqBC,KAAA,CAAMC,OAAA,CAAQF,CAAC,IAAIA,CAAA,GAAI,CAACA,CAAC;AAEvD,MAAAG,eAAA,GAAkBA,CAACC,QAAA,EAAyDC,EAAA,KAAkC;EACzGC,eAAA,UAAUC,KAAA,IAAsB;IAC9C,MAAMC,WAAA,GAAcD,KAAA,CAAME,MAAA;IAErB,IAAAF,KAAA,CAAME,MAAA,CAAuBC,UAAA,EAAY;MAC5C;IACF;IAEA,MAAMC,aAAA,GAAgBZ,SAAA,CAAUK,QAAQ,EACrCQ,IAAA,CAAMC,OAAA,IAAY;MACjB,MAAMC,EAAA,GAAKC,kBAAA,CAAmBC,KAAA,CAAMH,OAAO,CAAC;MACrC,OAAAC,EAAA,IAAMpB,mBAAA,CAAoBoB,EAAA,EAAIN,WAAW;IAAA,CACjD;IAEH,IAAI,CAACG,aAAA,EAAe;MAAEN,EAAA,CAAGG,WAAW;IAAE;EAAA,CACvC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}