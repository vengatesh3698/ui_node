{"ast":null,"code":"import { ref, watch } from \"vue\";\nimport { u as unwrapEl } from \"../utils/unwrapEl-55936fea.mjs\";\nimport { u as useRequestAnimationFrame } from \"./useRequestAnimationFrame-8c0a599c.mjs\";\nconst keys = [\"x\", \"y\", \"width\", \"height\", \"top\", \"left\", \"right\", \"bottom\"];\nconst isDomRectEqual = (a, b) => {\n  for (let i = 0; i < keys.length; i++) {\n    if (a[keys[i]] !== b[keys[i]]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst useDomRect = target => {\n  const domRect = ref(null);\n  let prev = {};\n  useRequestAnimationFrame(() => {\n    const el = unwrapEl(target.value);\n    if (!el) {\n      return;\n    }\n    const rect = el.getBoundingClientRect();\n    if (!isDomRectEqual(rect, prev)) {\n      domRect.value = rect;\n    }\n    prev = rect;\n  });\n  watch(target, newVal => {\n    const el = unwrapEl(newVal);\n    if (el) {\n      domRect.value = el.getBoundingClientRect();\n    } else {\n      domRect.value = null;\n    }\n  });\n  return {\n    domRect\n  };\n};\nexport { useDomRect as u };","map":{"version":3,"names":["keys","isDomRectEqual","a","b","i","length","useDomRect","target","domRect","ref","prev","useRequestAnimationFrame","el","unwrapEl","value","rect","getBoundingClientRect","watch","newVal"],"sources":["../../../../src/composables/useDomRect.ts"],"sourcesContent":["import { Ref, ref, watch } from 'vue'\nimport { unwrapEl } from '../utils/unwrapEl'\nimport { useRequestAnimationFrame } from './useRequestAnimationFrame'\n\nconst keys = ['x', 'y', 'width', 'height', 'top', 'left', 'right', 'bottom']\nconst isDomRectEqual = (a: any, b: any) => {\n  for (let i = 0; i < keys.length; i++) {\n    if (a[keys[i]] !== b[keys[i]]) {\n      return false\n    }\n  }\n  return true\n}\n\nexport const useDomRect = (target: Ref<HTMLElement | undefined>) => {\n  const domRect = ref<DOMRect | null>(null)\n\n  let prev = {}\n  useRequestAnimationFrame(() => {\n    const el = unwrapEl(target.value)\n    if (!el) { return }\n    const rect = el.getBoundingClientRect()\n    if (!isDomRectEqual(rect, prev)) {\n      domRect.value = rect\n    }\n    prev = rect\n  })\n\n  watch(target, (newVal) => {\n    const el = unwrapEl(newVal)\n    if (el) {\n      domRect.value = el.getBoundingClientRect()\n    } else {\n      domRect.value = null\n    }\n  })\n\n  return {\n    domRect,\n  }\n}\n"],"mappings":";;;AAIA,MAAMA,IAAA,GAAO,CAAC,KAAK,KAAK,SAAS,UAAU,OAAO,QAAQ,SAAS,QAAQ;AAC3E,MAAMC,cAAA,GAAiBA,CAACC,CAAA,EAAQC,CAAA,KAAW;EACzC,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIJ,IAAA,CAAKK,MAAA,EAAQD,CAAA,IAAK;IAChC,IAAAF,CAAA,CAAEF,IAAA,CAAKI,CAAC,CAAC,MAAMD,CAAA,CAAEH,IAAA,CAAKI,CAAC,CAAC,GAAG;MACtB;IACT;EACF;EACO;AACT;AAEa,MAAAE,UAAA,GAAcC,MAAA,IAAyC;EAC5D,MAAAC,OAAA,GAAUC,GAAA,CAAoB,IAAI;EAExC,IAAIC,IAAA,GAAO;EACXC,wBAAA,CAAyB,MAAM;IACvB,MAAAC,EAAA,GAAKC,QAAA,CAASN,MAAA,CAAOO,KAAK;IAChC,IAAI,CAACF,EAAA,EAAI;MAAE;IAAO;IACZ,MAAAG,IAAA,GAAOH,EAAA,CAAGI,qBAAA;IAChB,IAAI,CAACf,cAAA,CAAec,IAAA,EAAML,IAAI,GAAG;MAC/BF,OAAA,CAAQM,KAAA,GAAQC,IAAA;IAClB;IACOL,IAAA,GAAAK,IAAA;EAAA,CACR;EAEKE,KAAA,CAAAV,MAAA,EAASW,MAAA,IAAW;IAClB,MAAAN,EAAA,GAAKC,QAAA,CAASK,MAAM;IAC1B,IAAIN,EAAA,EAAI;MACEJ,OAAA,CAAAM,KAAA,GAAQF,EAAA,CAAGI,qBAAA;IAAsB,OACpC;MACLR,OAAA,CAAQM,KAAA,GAAQ;IAClB;EAAA,CACD;EAEM;IACLN;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}