{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { defineComponent, shallowRef, ref, toRefs, computed, watch, nextTick } from \"vue\";\nimport { o as omit } from \"../../../vendor-fff696df.mjs\";\nimport { u as useSyncProp } from \"../va-date-picker/hooks/sync-prop-db535634.mjs\";\nimport { u as useRangeModelValueGuard } from \"./hooks/range-model-value-guard-abbc918d.mjs\";\nimport { u as useDateParser } from \"./hooks/input-text-parser-e9cb6594.mjs\";\nimport { i as isDates, a as isSingleDate, b as isRange } from \"../va-date-picker/utils/date-utils-62af9561.mjs\";\nimport { _ as _VaDatePicker } from \"../va-date-picker/VaDatePicker-aed3f9ae.mjs\";\nimport { V as VaDropdown } from \"../va-dropdown/index-2edb30e9.mjs\";\nimport { V as VaIcon } from \"../va-icon/index-0ebbc0f2.mjs\";\nimport { V as VaDropdownContent } from \"../va-dropdown/components/VaDropdownContent/index-d67c0ae9.mjs\";\nimport { V as VaInputWrapper } from \"../va-input/components/VaInputWrapper/VaInputWrapper-89658c86.mjs\";\nimport { u as useParsable } from \"../../composables/useParsable-6103c13e.mjs\";\nimport { e as extractComponentProps, a as extractComponentEmits } from \"../../utils/component-options/extract-component-options-6b96d215.mjs\";\nimport { u as useClearableProps, a as useClearableEmits, b as useClearable } from \"../../composables/useClearable-6c80b820.mjs\";\nimport { u as useValidationProps, a as useValidationEmits, b as useValidation } from \"../../composables/useValidation-a7c1fccc.mjs\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset-0dfbd395.mjs\";\nimport { a as useFocusEmits, u as useFocus } from \"../../composables/useFocus-4393f76a.mjs\";\nimport { u as useStatefulEmits, b as useStateful } from \"../../composables/useStateful-50e4a6b9.mjs\";\nimport { f as filterComponentProps } from \"../../utils/component-options/filter-props-9727421a.mjs\";\nimport { u as useTranslation } from \"../../composables/useTranslation-acf7d88d.mjs\";\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper, [\"focused\", \"maxLength\", \"counterValue\"]);\nconst VaDatePickerProps = extractComponentProps(_VaDatePicker);\nconst VaDropdownProps = extractComponentProps(VaDropdown, [\"innerAnchorSelector\", \"stateful\", \"keyboardNavigation\", \"modelValue\"]);\nconst _sfc_main = defineComponent({\n  name: \"VaDateInput\",\n  components: {\n    VaDropdown,\n    VaDropdownContent,\n    VaDatePicker: _VaDatePicker,\n    VaInputWrapper,\n    VaIcon\n  },\n  props: {\n    ...VaDropdownProps,\n    ...useClearableProps,\n    ...VaInputWrapperProps,\n    ...VaDatePickerProps,\n    ...useValidationProps,\n    ...useComponentPresetProp,\n    clearValue: {\n      type: Date,\n      default: void 0\n    },\n    modelValue: {\n      type: [Date, Array, Object, String, Number]\n    },\n    resetOnClose: {\n      type: Boolean,\n      default: true\n    },\n    closeOnContentClick: {\n      type: Boolean,\n      default: false\n    },\n    offset: {\n      ...VaDropdownProps.offset,\n      default: () => [2, 0]\n    },\n    isOpen: {\n      type: Boolean,\n      default: void 0\n    },\n    format: {\n      type: Function\n    },\n    formatDate: {\n      type: Function,\n      default: d => d.toLocaleDateString()\n    },\n    parse: {\n      type: Function\n    },\n    parseDate: {\n      type: Function\n    },\n    parseValue: {\n      type: Function\n    },\n    delimiter: {\n      type: String,\n      default: \", \"\n    },\n    rangeDelimiter: {\n      type: String,\n      default: \" ~ \"\n    },\n    manualInput: {\n      type: Boolean,\n      default: false\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    },\n    leftIcon: {\n      type: Boolean,\n      default: false\n    },\n    icon: {\n      type: String,\n      default: \"va-calendar\"\n    },\n    ariaToggleDropdownLabel: {\n      type: String,\n      default: \"$t:toggleDropdown\"\n    },\n    ariaResetLabel: {\n      type: String,\n      default: \"$t:resetDate\"\n    },\n    ariaSelectedDateLabel: {\n      type: String,\n      default: \"$t:selectedDate\"\n    }\n  },\n  emits: [...useFocusEmits, ...extractComponentEmits(_VaDatePicker), ...useClearableEmits, ...useValidationEmits, ...useStatefulEmits, \"update:is-open\", \"update:text\"],\n  inheritAttrs: false,\n  setup(props, {\n    emit,\n    slots,\n    attrs\n  }) {\n    const input = shallowRef();\n    const datePicker = ref();\n    const {\n      isOpen,\n      resetOnClose\n    } = toRefs(props);\n    const {\n      valueComputed: statefulValue\n    } = useStateful(props, emit);\n    const {\n      syncProp: isOpenSync\n    } = useSyncProp(isOpen, \"is-open\", emit, false);\n    const {\n      isFocused,\n      focus,\n      blur,\n      onFocus: focusListener,\n      onBlur: blurListener\n    } = useFocus(input);\n    const isRangeModelValueGuardDisabled = computed(() => !resetOnClose.value);\n    const {\n      valueComputed,\n      reset: resetInvalidRange\n    } = useRangeModelValueGuard(statefulValue, isRangeModelValueGuardDisabled, props.parseValue);\n    watch(isOpenSync, isOpened => {\n      if (!isOpened && !isRangeModelValueGuardDisabled.value) {\n        resetInvalidRange();\n      }\n    });\n    const dateOrNothing = date => date ? props.formatDate(date) : \"...\";\n    const {\n      parseDateInputValue,\n      isValid\n    } = useDateParser(props);\n    watch(valueComputed, () => {\n      isValid.value = true;\n    });\n    const modelValueToString = value => {\n      if (props.format) {\n        return props.format(valueComputed.value);\n      }\n      if (isDates(value)) {\n        return value.map(d => props.formatDate(d)).join(props.delimiter);\n      }\n      if (isSingleDate(value)) {\n        return props.formatDate(value);\n      }\n      if (isRange(value)) {\n        return dateOrNothing(value.start) + props.rangeDelimiter + dateOrNothing(value.end);\n      }\n      throw new Error(\"VaDatePicker: Invalid model value. Value should be Date, Date[] or { start: Date, end: Date | null }\");\n    };\n    const {\n      text,\n      value: valueWithoutText\n    } = useParsable(valueComputed, parseDateInputValue, modelValueToString);\n    const valueText = computed(() => {\n      if (!isValid.value) {\n        return \"\";\n      }\n      if (!valueComputed.value) {\n        if (!props.clearValue) {\n          return \"\";\n        }\n        return modelValueToString(props.clearValue);\n      }\n      return text.value;\n    });\n    const onInputTextChanged = ({\n      target\n    }) => {\n      if (props.disabled) {\n        return;\n      }\n      const parsedValue = parseDateInputValue(target.value);\n      if (isValid.value) {\n        valueComputed.value = parsedValue;\n      }\n    };\n    const reset = () => withoutValidation(() => {\n      statefulValue.value = props.clearValue;\n      emit(\"clear\");\n      resetValidation();\n    });\n    const hideAndFocus = () => {\n      isOpenSync.value = false;\n      focus();\n    };\n    const focusDatePicker = () => {\n      nextTick(() => {\n        var _a;\n        return (_a = datePicker.value) == null ? void 0 : _a.focusCurrentPicker();\n      });\n    };\n    const focusInputOrPicker = () => {\n      isOpenSync.value ? focusDatePicker() : focus();\n    };\n    const checkProhibitedDropdownOpening = e => {\n      if (isOpenSync.value) {\n        return false;\n      }\n      if (props.disabled || props.readonly) {\n        return true;\n      }\n      return props.manualInput && (e == null ? void 0 : e.code) !== \"Space\";\n    };\n    const toggleDropdown = event => {\n      if (checkProhibitedDropdownOpening(event instanceof KeyboardEvent ? event : void 0)) {\n        return;\n      }\n      isOpenSync.value = !isOpenSync.value;\n      nextTick(focusInputOrPicker);\n    };\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) {\n        return;\n      }\n      isOpenSync.value = true;\n      nextTick(focusDatePicker);\n    };\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners,\n      validationAriaAttributes,\n      withoutValidation,\n      resetValidation\n    } = useValidation(props, emit, {\n      reset,\n      focus,\n      value: valueComputed\n    });\n    const hasError = computed(() => !isValid.value && valueComputed.value !== props.clearValue || computedError.value);\n    const filterSlots = computed(() => {\n      const slotsWithIcons = [props.leftIcon && \"prependInner\", (!props.leftIcon || props.clearable) && \"icon\"];\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot));\n    });\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur\n    } = useClearable(props, valueComputed);\n    const cursorStyleComputed = computed(() => {\n      if (props.disabled) {\n        return {};\n      }\n      if (props.manualInput) {\n        return {\n          cursor: \"text\"\n        };\n      }\n      return {\n        cursor: \"pointer\"\n      };\n    });\n    const iconTabindexComputed = computed(() => props.disabled || props.readonly ? -1 : 0);\n    const iconProps = computed(() => ({\n      role: \"button\",\n      ariaHidden: false,\n      size: \"small\",\n      name: props.icon,\n      color: props.color,\n      tabindex: iconTabindexComputed.value\n    }));\n    const filteredWrapperProps = filterComponentProps(VaInputWrapperProps);\n    const computedInputWrapperProps = computed(() => ({\n      ...filteredWrapperProps.value,\n      focused: isFocused.value,\n      error: hasError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput\n    }));\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        if (props.disabled) {\n          return;\n        }\n        focusListener();\n        if (props.readonly) {\n          return;\n        }\n        onFocus();\n        listeners.onFocus();\n      },\n      blur: () => {\n        if (props.disabled) {\n          return;\n        }\n        blurListener();\n        if (props.readonly) {\n          return;\n        }\n        onBlur();\n        listeners.onBlur();\n      }\n    }));\n    const {\n      tp\n    } = useTranslation();\n    const inputAttributesComputed = computed(() => ({\n      readonly: props.readonly || !props.manualInput,\n      disabled: props.disabled,\n      tabindex: props.disabled ? -1 : 0,\n      value: valueText.value,\n      ariaLabel: props.label || tp(props.ariaSelectedDateLabel),\n      ariaRequired: props.requiredMark,\n      ariaDisabled: props.disabled,\n      ariaReadOnly: props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit(attrs, [\"class\", \"style\"])\n    }));\n    const filteredProps = filterComponentProps(VaDropdownProps);\n    const dropdownPropsComputed = computed(() => ({\n      ...filteredProps.value,\n      stateful: false,\n      closeOnAnchorClick: false,\n      keyboardNavigation: true,\n      innerAnchorSelector: \".va-input-wrapper__field\"\n    }));\n    return {\n      tp,\n      datePicker,\n      valueText,\n      valueWithoutText,\n      valueComputed,\n      isOpenSync,\n      onInputTextChanged,\n      isFocused,\n      input,\n      inputWrapperProps: computedInputWrapperProps,\n      inputListeners: computedInputListeners,\n      inputAttributesComputed,\n      datePickerProps: filterComponentProps(VaDatePickerProps),\n      dropdownPropsComputed,\n      filterSlots,\n      canBeCleared,\n      clearIconProps,\n      iconProps,\n      cursorStyleComputed,\n      hideAndFocus,\n      toggleDropdown,\n      showDropdown,\n      focusInputOrPicker,\n      focusDatePicker,\n      reset,\n      focus,\n      blur\n    };\n  }\n});\nexport { _sfc_main as _ };\nimport '../../../VaDateInput.css';","map":{"version":3,"names":["VaInputWrapperProps","extractComponentProps","VaInputWrapper","VaDatePickerProps","_VaDatePicker","VaDropdownProps","VaDropdown","_sfc_main","defineComponent","name","components","VaDropdownContent","VaDatePicker","VaIcon","props","useClearableProps","useValidationProps","useComponentPresetProp","clearValue","type","Date","default","modelValue","Array","Object","String","Number","resetOnClose","Boolean","closeOnContentClick","offset","isOpen","format","Function","formatDate","d","toLocaleDateString","parse","parseDate","parseValue","delimiter","rangeDelimiter","manualInput","color","leftIcon","icon","ariaToggleDropdownLabel","ariaResetLabel","ariaSelectedDateLabel","emits","useFocusEmits","extractComponentEmits","useClearableEmits","useValidationEmits","useStatefulEmits","inheritAttrs","setup","emit","slots","attrs","input","shallowRef","datePicker","ref","toRefs","valueComputed","statefulValue","useStateful","syncProp","isOpenSync","useSyncProp","isFocused","focus","blur","onFocus","focusListener","onBlur","blurListener","useFocus","isRangeModelValueGuardDisabled","computed","value","reset","resetInvalidRange","useRangeModelValueGuard","watch","isOpened","dateOrNothing","date","parseDateInputValue","isValid","useDateParser","modelValueToString","isDates","map","join","isSingleDate","isRange","start","end","Error","text","valueWithoutText","useParsable","valueText","onInputTextChanged","target","disabled","parsedValue","withoutValidation","resetValidation","hideAndFocus","focusDatePicker","nextTick","_a","focusCurrentPicker","focusInputOrPicker","checkProhibitedDropdownOpening","e","readonly","code","toggleDropdown","event","KeyboardEvent","showDropdown","computedError","computedErrorMessages","listeners","validationAriaAttributes","useValidation","hasError","filterSlots","slotsWithIcons","clearable","keys","filter","slot","includes","canBeCleared","clearIconProps","useClearable","cursorStyleComputed","cursor","iconTabindexComputed","iconProps","role","ariaHidden","size","tabindex","filteredWrapperProps","filterComponentProps","computedInputWrapperProps","focused","error","errorMessages","computedInputListeners","tp","useTranslation","inputAttributesComputed","ariaLabel","label","ariaRequired","requiredMark","ariaDisabled","ariaReadOnly","omit","filteredProps","dropdownPropsComputed","stateful","closeOnAnchorClick","keyboardNavigation","innerAnchorSelector","inputWrapperProps","inputListeners","datePickerProps"],"sources":["../../../../../src/components/va-date-input/VaDateInput.vue"],"sourcesContent":["<template>\n  <va-dropdown\n    v-model=\"isOpenSync\"\n    class=\"va-date-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    v-bind=\"dropdownPropsComputed\"\n    @open=\"focusDatePicker\"\n    @close=\"focus\"\n  >\n    <template #anchor>\n      <slot name=\"input\" v-bind=\"{ valueText, inputAttributes: inputAttributesComputed, inputWrapperProps, inputListeners }\">\n        <va-input-wrapper\n          class=\"va-date-input__anchor\"\n          :style=\"cursorStyleComputed\"\n          v-bind=\"inputWrapperProps\"\n          @click.stop=\"toggleDropdown\"\n        >\n          <template #default>\n            <input\n              ref=\"input\"\n              class=\"va-date-input__input\"\n              v-bind=\"inputAttributesComputed\"\n              v-on=\"inputListeners\"\n              @change=\"onInputTextChanged\"\n            />\n          </template>\n\n          <template\n            v-for=\"name in filterSlots\"\n            :key=\"name\"\n            v-slot:[name]=\"slotScope\"\n          >\n            <slot :name=\"name\" v-bind=\"slotScope\" />\n          </template>\n\n          <template #prependInner=\"slotScope\" v-if=\"$slots.prependInner || $props.leftIcon\">\n            <slot name=\"prependInner\" v-bind=\"slotScope\" />\n            <va-icon\n              v-if=\"$props.leftIcon\"\n              :aria-label=\"tp($props.ariaToggleDropdownLabel)\"\n              v-bind=\"iconProps\"\n              @click.stop=\"showDropdown\"\n              @keydown.enter.stop=\"showDropdown\"\n              @keydown.space.stop=\"showDropdown\"\n            />\n          </template>\n\n          <template #icon>\n            <va-icon\n              v-if=\"canBeCleared\"\n              :aria-label=\"tp($props.ariaResetLabel)\"\n              v-bind=\"{ ...iconProps, ...clearIconProps }\"\n              @click.stop=\"reset\"\n              @keydown.enter.stop=\"reset\"\n              @keydown.space.stop=\"reset\"\n            />\n            <va-icon\n              v-else-if=\"!$props.leftIcon && $props.icon\"\n              :aria-label=\"tp($props.ariaToggleDropdownLabel)\"\n              v-bind=\"iconProps\"\n              @click.stop=\"showDropdown\"\n              @keydown.enter.stop=\"showDropdown\"\n              @keydown.space.stop=\"showDropdown\"\n            />\n          </template>\n        </va-input-wrapper>\n      </slot>\n    </template>\n\n    <va-dropdown-content class=\"va-date-input__dropdown-content\">\n      <va-date-picker\n        ref=\"datePicker\"\n        v-bind=\"datePickerProps\"\n        v-model=\"valueWithoutText\"\n        @click:day=\"$emit('click:day', $event)\"\n        @click:month=\"$emit('click:month', $event)\"\n        @click:year=\"$emit('click:year', $event)\"\n        @hover:day=\"$emit('hover:day', $event)\"\n        @hover:month=\"$emit('hover:month', $event)\"\n        @hover:year=\"$emit('hover:year', $event)\"\n        @update:view=\"$emit('update:view', $event)\"\n      >\n        <template\n          v-for=\"(_, name) in $slots\"\n          :key=\"name\"\n          v-slot:[name]=\"bind\"\n        >\n          <slot :name=\"name\" v-bind=\"bind\" />\n        </template>\n      </va-date-picker>\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  PropType,\n  toRefs,\n  watch,\n  ref,\n  shallowRef,\n  nextTick,\n  WritableComputedRef,\n} from 'vue'\nimport omit from 'lodash/omit'\n\nimport { filterComponentProps, extractComponentProps, extractComponentEmits } from '../../utils/component-options'\nimport {\n  useComponentPresetProp,\n  useClearable, useClearableEmits, useClearableProps,\n  useValidation, useValidationEmits, useValidationProps, ValidationProps,\n  useStateful, useStatefulEmits,\n  useParsable,\n  useFocus, useFocusEmits, useTranslation,\n} from '../../composables'\nimport { useSyncProp } from '../va-date-picker/hooks/sync-prop'\nimport { useRangeModelValueGuard } from './hooks/range-model-value-guard'\nimport { useDateParser } from './hooks/input-text-parser'\nimport { parseModelValue } from './hooks/model-value-parser'\n\nimport { isRange, isSingleDate, isDates } from '../va-date-picker/utils/date-utils'\n\nimport type { DateInputModelValue, DateInputValue } from './types'\n\nimport VaDatePicker from '../va-date-picker/VaDatePicker.vue'\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\nimport { VaInputWrapper } from '../va-input'\nimport { VaIcon } from '../va-icon'\n\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper, ['focused', 'maxLength', 'counterValue'])\nconst VaDatePickerProps = extractComponentProps(VaDatePicker)\nconst VaDropdownProps = extractComponentProps(VaDropdown,\n  ['innerAnchorSelector', 'stateful', 'keyboardNavigation', 'modelValue'],\n)\n\nexport default defineComponent({\n  name: 'VaDateInput',\n\n  components: {\n    VaDropdown,\n    VaDropdownContent,\n    VaDatePicker,\n    VaInputWrapper,\n    VaIcon,\n  },\n\n  props: {\n    ...VaDropdownProps,\n    ...useClearableProps,\n    ...VaInputWrapperProps,\n    ...VaDatePickerProps,\n    ...useValidationProps as ValidationProps<DateInputModelValue>,\n    ...useComponentPresetProp,\n\n    clearValue: { type: Date as PropType<DateInputModelValue>, default: undefined },\n    modelValue: { type: [Date, Array, Object, String, Number] as PropType<DateInputModelValue> },\n\n    resetOnClose: { type: Boolean, default: true },\n    closeOnContentClick: { type: Boolean, default: false },\n    offset: { ...VaDropdownProps.offset, default: () => [2, 0] },\n    isOpen: { type: Boolean, default: undefined },\n\n    format: { type: Function as PropType<(date: DateInputModelValue) => string> },\n    formatDate: { type: Function as PropType<(date: Date) => string>, default: (d: Date) => d.toLocaleDateString() },\n    parse: { type: Function as PropType<(input: string) => DateInputValue> },\n    parseDate: { type: Function as PropType<(input: string) => Date> },\n    parseValue: { type: Function as PropType<typeof parseModelValue> },\n\n    delimiter: { type: String, default: ', ' },\n    rangeDelimiter: { type: String, default: ' ~ ' },\n    manualInput: { type: Boolean, default: false },\n\n    color: { type: String, default: 'primary' },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'va-calendar' },\n\n    ariaToggleDropdownLabel: { type: String, default: '$t:toggleDropdown' },\n    ariaResetLabel: { type: String, default: '$t:resetDate' },\n    ariaSelectedDateLabel: { type: String, default: '$t:selectedDate' },\n  },\n\n  emits: [\n    ...useFocusEmits,\n    ...extractComponentEmits(VaDatePicker),\n    ...useClearableEmits,\n    ...useValidationEmits,\n    ...useStatefulEmits,\n    'update:is-open',\n    'update:text',\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, slots, attrs }) {\n    const input = shallowRef<HTMLInputElement>()\n    const datePicker = ref<typeof VaDatePicker>()\n\n    const { isOpen, resetOnClose } = toRefs(props)\n    const { valueComputed: statefulValue }: { valueComputed: WritableComputedRef<DateInputModelValue> } = useStateful(props, emit)\n    const { syncProp: isOpenSync } = useSyncProp(isOpen, 'is-open', emit, false)\n\n    const { isFocused, focus, blur, onFocus: focusListener, onBlur: blurListener } = useFocus(input)\n\n    const isRangeModelValueGuardDisabled = computed(() => !resetOnClose.value)\n\n    const {\n      valueComputed,\n      reset: resetInvalidRange,\n    } = useRangeModelValueGuard(statefulValue, isRangeModelValueGuardDisabled, props.parseValue)\n\n    watch(isOpenSync, (isOpened) => {\n      if (!isOpened && !isRangeModelValueGuardDisabled.value) { resetInvalidRange() }\n    })\n\n    const dateOrNothing = (date: Date | undefined | null) => date ? props.formatDate(date) : '...'\n\n    const { parseDateInputValue, isValid } = useDateParser(props)\n\n    watch(valueComputed, () => {\n      isValid.value = true\n    })\n\n    const modelValueToString = (value: DateInputModelValue): string => {\n      if (props.format) {\n        return props.format(valueComputed.value)\n      }\n\n      if (isDates(value)) {\n        return value.map((d) => props.formatDate(d)).join(props.delimiter)\n      }\n      if (isSingleDate(value)) {\n        return props.formatDate(value)\n      }\n      if (isRange(value)) {\n        return dateOrNothing(value.start) + props.rangeDelimiter + dateOrNothing(value.end)\n      }\n\n      throw new Error('VaDatePicker: Invalid model value. Value should be Date, Date[] or { start: Date, end: Date | null }')\n    }\n\n    const {\n      text,\n      value: valueWithoutText,\n    } = useParsable(valueComputed, parseDateInputValue, modelValueToString)\n\n    const valueText = computed(() => {\n      if (!isValid.value) {\n        return ''\n      }\n\n      if (!valueComputed.value) {\n        if (!props.clearValue) { return '' }\n        return modelValueToString(props.clearValue)\n      }\n\n      return text.value\n    })\n\n    const onInputTextChanged = ({ target }: Event) => {\n      if (props.disabled) { return }\n\n      const parsedValue = parseDateInputValue((target as HTMLInputElement).value)\n\n      if (isValid.value) {\n        valueComputed.value = parsedValue\n      }\n    }\n\n    const reset = () => withoutValidation(() => {\n      statefulValue.value = props.clearValue\n      emit('clear')\n      resetValidation()\n    })\n\n    const hideAndFocus = (): void => {\n      isOpenSync.value = false\n      focus()\n    }\n\n    const focusDatePicker = (): void => {\n      nextTick(() => datePicker.value?.focusCurrentPicker())\n    }\n\n    const focusInputOrPicker = () => {\n      isOpenSync.value ? focusDatePicker() : focus()\n    }\n\n    const checkProhibitedDropdownOpening = (e?: KeyboardEvent) => {\n      if (isOpenSync.value) { return false }\n      if (props.disabled || props.readonly) { return true }\n      return props.manualInput && e?.code !== 'Space'\n    }\n\n    const toggleDropdown = (event: Event | KeyboardEvent) => {\n      if (checkProhibitedDropdownOpening(event instanceof KeyboardEvent ? event : undefined)) { return }\n\n      isOpenSync.value = !isOpenSync.value\n      nextTick(focusInputOrPicker)\n    }\n\n    // icon interaction\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n\n      isOpenSync.value = true\n      nextTick(focusDatePicker)\n    }\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners,\n      validationAriaAttributes,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus, value: valueComputed })\n\n    const hasError = computed(() => (!isValid.value && valueComputed.value !== props.clearValue) || computedError.value)\n\n    const filterSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueComputed)\n\n    const cursorStyleComputed = computed(() => {\n      if (props.disabled) { return {} }\n      if (props.manualInput) { return { cursor: 'text' } }\n      return { cursor: 'pointer' }\n    })\n\n    const iconTabindexComputed = computed(() => props.disabled || props.readonly ? -1 : 0)\n\n    const iconProps = computed(() => ({\n      role: 'button',\n      ariaHidden: false,\n      size: 'small',\n      name: props.icon,\n      color: props.color,\n      tabindex: iconTabindexComputed.value,\n    }))\n\n    const filteredWrapperProps = filterComponentProps(VaInputWrapperProps)\n    const computedInputWrapperProps = computed(() => ({\n      ...filteredWrapperProps.value,\n      focused: isFocused.value,\n      error: hasError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput,\n    }))\n\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        if (props.disabled) { return }\n\n        focusListener()\n\n        if (props.readonly) { return }\n        onFocus()\n        listeners.onFocus()\n      },\n      blur: () => {\n        if (props.disabled) { return }\n\n        blurListener()\n\n        if (props.readonly) { return }\n        onBlur()\n        listeners.onBlur()\n      },\n    }))\n\n    const { tp } = useTranslation()\n\n    const inputAttributesComputed = computed(() => ({\n      readonly: props.readonly || !props.manualInput,\n      disabled: props.disabled,\n      tabindex: props.disabled ? -1 : 0,\n      value: valueText.value,\n      ariaLabel: props.label || tp(props.ariaSelectedDateLabel),\n      ariaRequired: props.requiredMark,\n      ariaDisabled: props.disabled,\n      ariaReadOnly: props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit(attrs, ['class', 'style']),\n    }))\n\n    const filteredProps = filterComponentProps(VaDropdownProps)\n    const dropdownPropsComputed = computed(() => ({\n      ...filteredProps.value,\n      stateful: false,\n      closeOnAnchorClick: false,\n      keyboardNavigation: true,\n      innerAnchorSelector: '.va-input-wrapper__field',\n    }))\n\n    return {\n      tp,\n      datePicker,\n      valueText,\n      valueWithoutText,\n      valueComputed,\n      isOpenSync,\n      onInputTextChanged,\n\n      isFocused,\n\n      input,\n      inputWrapperProps: computedInputWrapperProps,\n      inputListeners: computedInputListeners,\n      inputAttributesComputed,\n      datePickerProps: filterComponentProps(VaDatePickerProps),\n      dropdownPropsComputed,\n\n      filterSlots,\n      canBeCleared,\n      clearIconProps,\n      iconProps,\n      cursorStyleComputed,\n\n      hideAndFocus,\n      toggleDropdown,\n      showDropdown,\n      focusInputOrPicker,\n      focusDatePicker,\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n\n.va-date-input {\n  --va-date-picker-cell-size: 28px;\n\n  min-width: var(--va-date-input-min-width);\n  font-family: var(--va-font-family);\n\n  &__anchor {\n    flex: 1;\n  }\n\n  &__input {\n    &:read-only {\n      cursor: pointer;\n    }\n  }\n\n  &__dropdown-content {\n    display: flex;\n    justify-content: center;\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}