{"ast":null,"code":"import { defineComponent, shallowRef, toRefs, computed, onMounted, watch } from \"vue\";\nimport { c as createYearDate } from \"../../utils/date-utils-62af9561.mjs\";\nimport { u as useGridKeyboardNavigation } from \"../../hooks/grid-keyboard-navigation-48c0f4a7.mjs\";\nimport { u as useDatePicker } from \"../../hooks/use-picker-9ed9190b.mjs\";\nimport { V as VaDatePickerCell } from \"../VaDatePickerCell-af3b2fb6.mjs\";\nconst _sfc_main = defineComponent({\n  name: \"VaYearPicker\",\n  components: {\n    VaDatePickerCell\n  },\n  props: {\n    modelValue: {\n      type: [Date, Array, Object]\n    },\n    allowedYears: {\n      type: Function,\n      default: void 0\n    },\n    highlightToday: {\n      type: Boolean,\n      default: true\n    },\n    startYear: {\n      type: Number,\n      default: 1970\n    },\n    mode: {\n      type: String,\n      default: \"auto\"\n    },\n    view: {\n      type: Object,\n      default: () => ({\n        type: \"year\"\n      })\n    },\n    endYear: {\n      type: Number,\n      default: () => ( /* @__PURE__ */new Date()).getFullYear() + 50\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    }\n  },\n  emits: [\"update:modelValue\", \"hover:year\", \"click:year\"],\n  setup(props, {\n    emit\n  }) {\n    const rootNode = shallowRef();\n    const {\n      view\n    } = toRefs(props);\n    const generateYearsArray = (start, end) => {\n      const yearsCount = end - start + 1;\n      return Array.from(Array(yearsCount).keys()).map(i => createYearDate(start + i));\n    };\n    const years = computed(() => generateYearsArray(props.startYear, props.endYear));\n    const scrollIntoYearIndex = index => {\n      if (!rootNode.value) {\n        return;\n      }\n      const scrollHeight = rootNode.value.scrollHeight;\n      const rootNodeHeight = rootNode.value.offsetHeight;\n      const currentYearOffset = scrollHeight / years.value.length * index;\n      const cellSize = scrollHeight / years.value.length;\n      const relativeScrollPosition = currentYearOffset - rootNode.value.scrollTop;\n      if (relativeScrollPosition < 0) {\n        rootNode.value.scrollTo({\n          top: currentYearOffset\n        });\n      } else if (relativeScrollPosition > rootNodeHeight) {\n        rootNode.value.scrollTo({\n          top: currentYearOffset - rootNodeHeight + cellSize\n        });\n      }\n    };\n    const scrollIntoYearIndexCenter = index => {\n      if (!rootNode.value) {\n        return;\n      }\n      const scrollHeight = rootNode.value.scrollHeight;\n      const rootNodeHeight = rootNode.value.offsetHeight;\n      const currentYearOffset = scrollHeight / years.value.length * index;\n      rootNode.value.scrollTo({\n        top: currentYearOffset - rootNodeHeight / 2\n      });\n    };\n    onMounted(() => {\n      const currentYearIndex = years.value.findIndex(date => date.getFullYear() === view.value.year);\n      scrollIntoYearIndexCenter(currentYearIndex);\n    });\n    const {\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange\n    } = useDatePicker(\"year\", years, props, emit);\n    const isYearDisabled = year => props.allowedYears === void 0 ? false : !props.allowedYears(year);\n    const {\n      focusedCellIndex,\n      containerAttributes\n    } = useGridKeyboardNavigation({\n      rowSize: 1,\n      start: 0,\n      end: years.value.length,\n      onFocusIndex: computed(() => years.value.findIndex(date => date.getFullYear() === view.value.year)),\n      onSelected: selectedIndex => onClick(years.value[selectedIndex])\n    });\n    watch(focusedCellIndex, index => index !== -1 && scrollIntoYearIndex(index));\n    watch(focusedCellIndex, index => {\n      hoveredIndex.value = index;\n    });\n    watch(hoveredIndex, index => {\n      focusedCellIndex.value = index;\n    });\n    return {\n      hoveredIndex,\n      years,\n      rootNode,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n      isYearDisabled,\n      focusedCellIndex,\n      containerAttributes\n    };\n  }\n});\nexport { _sfc_main as _ };\nimport '../../../../../VaYearPicker.css';","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","VaDatePickerCell","props","modelValue","type","Date","Array","Object","allowedYears","Function","default","highlightToday","Boolean","startYear","Number","mode","String","view","endYear","getFullYear","readonly","color","emits","setup","emit","rootNode","shallowRef","toRefs","generateYearsArray","start","end","yearsCount","from","keys","map","i","createYearDate","years","computed","scrollIntoYearIndex","index","value","scrollHeight","rootNodeHeight","offsetHeight","currentYearOffset","length","cellSize","relativeScrollPosition","scrollTop","scrollTo","top","scrollIntoYearIndexCenter","onMounted","currentYearIndex","findIndex","date","year","hoveredIndex","onClick","isToday","isSelected","isInRange","useDatePicker","isYearDisabled","focusedCellIndex","containerAttributes","useGridKeyboardNavigation","rowSize","onFocusIndex","onSelected","selectedIndex","watch"],"sources":["../../../../../../../src/components/va-date-picker/components/VaYearPicker/VaYearPicker.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"rootNode\"\n    class=\"va-year-picker\"\n    v-bind=\"containerAttributes\"\n    @keydown.space.prevent\n  >\n    <va-date-picker-cell\n      v-for=\"(year, index) in years\"\n      :key=\"year.toString()\"\n      :in-range=\"isInRange(year)\"\n      :selected=\"isSelected(year)\"\n      :disabled=\"isYearDisabled(year)\"\n      :today=\"isToday(year)\"\n      :focused=\"focusedCellIndex === index\"\n      :highlight-today=\"highlightToday\"\n      :readonly=\"$props.readonly\"\n      :color=\"color\"\n      @click=\"onClick(year); focusedCellIndex = index\"\n      @mouseenter=\"hoveredIndex = index\"\n      @mouseleave=\"hoveredIndex = -1\"\n    >\n      {{ year.getFullYear() }}\n    </va-date-picker-cell>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, toRefs, onMounted, computed, watch, shallowRef } from 'vue'\n\nimport { createYearDate } from '../../utils/date-utils'\nimport { useGridKeyboardNavigation } from '../../hooks/grid-keyboard-navigation'\nimport { useDatePicker } from '../../hooks/use-picker'\n\nimport { DatePickerMode, DatePickerModelValue, DatePickerView } from '../../types'\n\nimport VaDatePickerCell from '../VaDatePickerCell.vue'\n\nexport default defineComponent({\n  name: 'VaYearPicker',\n  components: { VaDatePickerCell },\n\n  props: {\n    modelValue: { type: [Date, Array, Object] as PropType<DatePickerModelValue> },\n    allowedYears: { type: Function as PropType<(date: Date) => boolean>, default: undefined },\n    highlightToday: { type: Boolean, default: true },\n    startYear: { type: Number, default: 1970 },\n    mode: { type: String as PropType<DatePickerMode>, default: 'auto' },\n    view: { type: Object as PropType<DatePickerView>, default: () => ({ type: 'year' }) },\n    endYear: { type: Number, default: () => new Date().getFullYear() + 50 },\n    readonly: { type: Boolean, default: false },\n    color: { type: String, default: 'primary' },\n  },\n\n  emits: ['update:modelValue', 'hover:year', 'click:year'],\n\n  setup (props, { emit }) {\n    const rootNode = shallowRef<HTMLElement>()\n\n    const { view } = toRefs(props)\n\n    const generateYearsArray = (start: number, end: number) => {\n      const yearsCount = end - start + 1\n      return Array.from(Array(yearsCount).keys())\n        .map((i) => createYearDate(start + i))\n    }\n\n    const years = computed(() => generateYearsArray(props.startYear, props.endYear))\n\n    const scrollIntoYearIndex = (index: number) => {\n      if (!rootNode.value) { return }\n\n      const scrollHeight = rootNode.value.scrollHeight\n      const rootNodeHeight = rootNode.value.offsetHeight\n      const currentYearOffset = scrollHeight / years.value.length * index\n      const cellSize = scrollHeight / years.value.length\n      const relativeScrollPosition = currentYearOffset - rootNode.value.scrollTop\n\n      if (relativeScrollPosition < 0) {\n        // First element in view\n        rootNode.value.scrollTo({ top: currentYearOffset })\n      } else if (relativeScrollPosition > rootNodeHeight) {\n        // Last element in view\n        rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight + cellSize })\n      }\n    }\n\n    const scrollIntoYearIndexCenter = (index: number) => {\n      if (!rootNode.value) { return }\n\n      const scrollHeight = rootNode.value.scrollHeight\n      const rootNodeHeight = rootNode.value.offsetHeight\n      const currentYearOffset = scrollHeight / years.value.length * index\n\n      rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight / 2 })\n    }\n\n    onMounted(() => {\n      const currentYearIndex = years.value.findIndex((date) => date.getFullYear() === view.value.year)\n\n      scrollIntoYearIndexCenter(currentYearIndex)\n    })\n\n    const {\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n    } = useDatePicker('year', years, props, emit)\n\n    const isYearDisabled = (year: Date) => props.allowedYears === undefined ? false : !props.allowedYears(year)\n\n    const {\n      focusedCellIndex, containerAttributes,\n    } = useGridKeyboardNavigation({\n      rowSize: 1,\n      start: 0,\n      end: years.value.length,\n      onFocusIndex: computed(() => years.value.findIndex((date) => date.getFullYear() === view.value.year)),\n      onSelected: (selectedIndex) => onClick(years.value[selectedIndex]),\n    })\n\n    watch(focusedCellIndex, (index) => index !== -1 && scrollIntoYearIndex(index))\n    watch(focusedCellIndex, (index) => { hoveredIndex.value = index })\n    watch(hoveredIndex, (index) => { focusedCellIndex.value = index })\n\n    return {\n      hoveredIndex,\n      years,\n      rootNode,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n      isYearDisabled,\n      focusedCellIndex,\n      containerAttributes,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-year-picker {\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n  grid-gap: var(--va-date-picker-cell-gap);\n  max-height: 100%;\n  position: relative;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}