{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { shallowRef, computed, ref, getCurrentInstance, onMounted, watch } from \"vue\";\nimport { w as warn } from \"../../utils/console-42c8e8cc.mjs\";\nimport { u as useEvent } from \"../../composables/useEvent-d1ae925d.mjs\";\nimport { u as useParsableMeasure } from \"../../composables/useParsableMeasure-df21fd20.mjs\";\nconst {\n  isParsablePositiveMeasure,\n  parseSizeValue\n} = useParsableMeasure();\nconst validateSizeProp = (v, propName) => {\n  const isProperValue = isParsablePositiveMeasure(v);\n  !isProperValue && warn(`[va-virtual-scroller] ${propName} should be number or parsable int greater or equal to 0. Provided: ${v}.`);\n  return isProperValue;\n};\nconst useVirtualScrollerSizesProps = {\n  horizontal: {\n    type: Boolean,\n    default: false\n  },\n  itemSize: {\n    type: [Number, String],\n    default: 0,\n    validator: v => {\n      return validateSizeProp(v, \"itemSize\");\n    }\n  },\n  wrapperSize: {\n    type: [Number, String],\n    default: 100,\n    validator: v => {\n      return v === \"auto\" || validateSizeProp(v, \"wrapperSize\");\n    }\n  }\n};\nconst useVirtualScrollerSizes = (props, scrollPosition) => {\n  const list = shallowRef();\n  const wrapper = shallowRef();\n  const clientSizeMeasure = computed(() => props.horizontal ? \"clientWidth\" : \"clientHeight\");\n  const wrapperSize = computed(() => {\n    var _a;\n    if (props.wrapperSize === \"auto\") {\n      return ((_a = wrapper.value) == null ? void 0 : _a[clientSizeMeasure.value]) || 0;\n    }\n    return parseSizeValue(props.wrapperSize, pageFontSize);\n  });\n  const pageFontSize = ref(16);\n  const handleWindowResize = () => {\n    pageFontSize.value = parseFloat(getComputedStyle(document.documentElement).fontSize);\n    calcAverageItemsSize();\n  };\n  useEvent(\"resize\", handleWindowResize, true);\n  const itemSizeCalculated = ref(0);\n  const calcAverageItemsSize = () => {\n    if (!list.value) {\n      return;\n    }\n    const sizes = [];\n    const itemsList = list.value.children;\n    const itemsAmount = itemsList.length;\n    for (let i = 0; i < itemsAmount; i++) {\n      const currentChild = list.value.children.item(i);\n      currentChild && sizes.push(currentChild[clientSizeMeasure.value]);\n    }\n    itemSizeCalculated.value = itemsAmount ? Math.trunc(sizes.reduce((acc, el) => acc + el, 0) / (itemsAmount - 1)) : 0;\n  };\n  const instance = getCurrentInstance();\n  onMounted(() => {\n    var _a, _b;\n    if (!list.value) {\n      list.value = (_b = (_a = instance == null ? void 0 : instance.parent) == null ? void 0 : _a.refs) == null ? void 0 : _b.list;\n    }\n    calcAverageItemsSize();\n  });\n  watch(scrollPosition, calcAverageItemsSize);\n  watch(wrapperSize, calcAverageItemsSize);\n  let oldItemSize = 0;\n  const itemSize = computed(() => {\n    const sizeParsed = parseSizeValue(props.itemSize, pageFontSize);\n    const result = Math.max(sizeParsed, itemSizeCalculated.value, 1);\n    const diff = Math.abs(oldItemSize / result * 100 - 100);\n    if (diff > 5 || oldItemSize === 0) {\n      oldItemSize = result;\n      return result;\n    }\n    return oldItemSize;\n  });\n  return {\n    list,\n    wrapper,\n    itemSize,\n    wrapperSize\n  };\n};\nexport { useVirtualScrollerSizes as a, useVirtualScrollerSizesProps as u };","map":{"version":3,"names":["isParsablePositiveMeasure","parseSizeValue","useParsableMeasure","validateSizeProp","v","propName","isProperValue","warn","useVirtualScrollerSizesProps","horizontal","type","Boolean","default","itemSize","Number","String","validator","wrapperSize","useVirtualScrollerSizes","props","scrollPosition","list","shallowRef","wrapper","clientSizeMeasure","computed","_a","value","pageFontSize","ref","handleWindowResize","parseFloat","getComputedStyle","document","documentElement","fontSize","calcAverageItemsSize","useEvent","itemSizeCalculated","sizes","itemsList","children","itemsAmount","length","i","currentChild","item","push","Math","trunc","reduce","acc","el","instance","getCurrentInstance","onMounted","_b","parent","refs","watch","oldItemSize","sizeParsed","result","max","diff","abs"],"sources":["../../../../../src/components/va-virtual-scroller/useVirtualScrollerSizes.ts"],"sourcesContent":["import {\n  PropType,\n  ExtractPropTypes,\n  ref,\n  Ref,\n  shallowRef,\n  computed,\n  watch,\n  onMounted,\n  getCurrentInstance,\n} from 'vue'\n\nimport { useEvent, useParsableMeasure } from '../../composables'\n\nimport { warn } from '../../utils/console'\n\nconst { isParsablePositiveMeasure, parseSizeValue } = useParsableMeasure()\n\nconst validateSizeProp = (v: number | string, propName: string) => {\n  const isProperValue = isParsablePositiveMeasure(v)\n\n  !isProperValue &&\n  warn(`[va-virtual-scroller] ${propName} should be number or parsable int greater or equal to 0. Provided: ${v}.`)\n\n  return isProperValue\n}\n\nexport const useVirtualScrollerSizesProps = {\n  horizontal: { type: Boolean, default: false },\n  itemSize: {\n    type: [Number, String] as PropType<string | number>,\n    default: 0,\n    validator: (v: number | string) => { return validateSizeProp(v, 'itemSize') },\n  },\n  wrapperSize: {\n    type: [Number, String] as PropType<number | string | 'auto'>,\n    default: 100,\n    validator: (v: number | string | 'auto') => {\n      return v === 'auto' || validateSizeProp(v, 'wrapperSize')\n    },\n  },\n}\n\nexport const useVirtualScrollerSizes = (\n  props: ExtractPropTypes<typeof useVirtualScrollerSizesProps>,\n  scrollPosition: Ref<number>,\n) => {\n  const list = shallowRef<HTMLElement>()\n  const wrapper = shallowRef<HTMLElement>()\n\n  const clientSizeMeasure = computed(() => props.horizontal ? 'clientWidth' : 'clientHeight')\n\n  const wrapperSize = computed(() => {\n    if (props.wrapperSize === 'auto') {\n      return wrapper.value?.[clientSizeMeasure.value] || 0\n    }\n\n    return parseSizeValue(props.wrapperSize, pageFontSize)\n  })\n\n  const pageFontSize = ref(16)\n  const handleWindowResize = () => {\n    pageFontSize.value = parseFloat(getComputedStyle(document.documentElement).fontSize)\n\n    calcAverageItemsSize()\n  }\n  useEvent('resize', handleWindowResize, true)\n\n  const itemSizeCalculated = ref(0)\n  const calcAverageItemsSize = () => {\n    if (!list.value) { return }\n\n    const sizes: number[] = []\n    const itemsList = list.value.children\n    const itemsAmount = itemsList.length\n\n    for (let i = 0; i < itemsAmount; i++) {\n      const currentChild = list.value.children.item(i)\n      currentChild && sizes.push(currentChild[clientSizeMeasure.value])\n    }\n\n    itemSizeCalculated.value = itemsAmount\n      ? Math.trunc(sizes.reduce((acc, el) => acc + el, 0) / (itemsAmount - 1))\n      : 0\n  }\n\n  const instance = getCurrentInstance()\n  onMounted(() => {\n    if (!list.value) { list.value = instance?.parent?.refs?.list as HTMLElement | undefined }\n    calcAverageItemsSize()\n  })\n  watch(scrollPosition, calcAverageItemsSize)\n  watch(wrapperSize, calcAverageItemsSize)\n\n  let oldItemSize = 0\n  const itemSize = computed(() => {\n    const sizeParsed = parseSizeValue(props.itemSize, pageFontSize)\n\n    const result = Math.max(sizeParsed, itemSizeCalculated.value, 1)\n    const diff = Math.abs(((oldItemSize / result) * 100) - 100)\n\n    /**\n     * 5 - empirically derived number, some kind of debounce but without freezes.\n     * While recalculating rendered items average size, if difference is too small, this can cause list 'shaking' because of algorithm:\n     * `rendering items -> calculating their size -> rebuilding list total size -> items offset -> rendering items`\n     * This smoothing is intended to prevent such cases.\n     */\n    if (diff > 5 || oldItemSize === 0) {\n      oldItemSize = result\n      return result\n    }\n\n    return oldItemSize\n  })\n\n  return { list, wrapper, itemSize, wrapperSize }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}