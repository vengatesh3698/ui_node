{"ast":null,"code":"import { defineComponent, computed, onMounted } from \"vue\";\nimport { p as pick } from \"../../../vendor-fff696df.mjs\";\nimport { i as isDev } from \"../../utils/env-da4fbb25.mjs\";\nimport { V as VaCheckbox } from \"../va-checkbox/index-18feaacf.mjs\";\nimport { V as VaRadio } from \"../va-radio/index-ba729b29.mjs\";\nimport { V as VaSwitch } from \"../va-switch/index-5956d3f5.mjs\";\nimport { V as VaMessageListWrapper } from \"../va-input/components/VaMessageListWrapper-ba148e2c.mjs\";\nimport { u as useArrayRefs } from \"../../composables/useArrayRefs-26d94ed7.mjs\";\nimport { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from \"../../composables/useStateful-50e4a6b9.mjs\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset-0dfbd395.mjs\";\nimport { u as useSelectableListProps, a as useSelectableList } from \"../../composables/useSelectableList-a02a95a9.mjs\";\nimport { u as useValidationProps, b as useValidation } from \"../../composables/useValidation-a7c1fccc.mjs\";\nconst _sfc_main = defineComponent({\n  name: \"VaOptionList\",\n  components: {\n    VaRadio,\n    VaCheckbox,\n    VaSwitch,\n    VaMessageListWrapper\n  },\n  emits: [...useStatefulEmits, \"clear\"],\n  props: {\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...useStatefulProps,\n    type: {\n      type: String,\n      default: \"checkbox\",\n      validator: type => [\"radio\", \"checkbox\", \"switch\"].includes(type)\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    defaultValue: {\n      type: [String, Number, Boolean, Object, Array]\n    },\n    name: {\n      type: String,\n      default: \"\"\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    },\n    leftLabel: {\n      type: Boolean,\n      default: false\n    },\n    modelValue: {\n      type: [String, Number, Boolean, Object, Array]\n    }\n  },\n  setup(props, {\n    emit\n  }) {\n    const {\n      valueComputed\n    } = useStateful(props, emit, \"modelValue\", {\n      defaultValue: props.defaultValue\n    });\n    const {\n      getValue,\n      getText,\n      getTrackBy,\n      getDisabled\n    } = useSelectableList(props);\n    const {\n      itemRefs,\n      setItemRef\n    } = useArrayRefs();\n    const isRadio = computed(() => props.type === \"radio\");\n    const selectedValue = computed({\n      get() {\n        const value = isRadio.value ? null : [];\n        return valueComputed.value || value;\n      },\n      set(value) {\n        if (props.readonly) {\n          return;\n        }\n        if (isRadio.value && !Array.isArray(value)) {\n          valueComputed.value = value ? getValue(value) : value;\n        } else {\n          valueComputed.value = Array.isArray(value) ? value.map(getValue) : [value ? getValue(value) : value];\n        }\n      }\n    });\n    const isDisabled = option => props.disabled || getDisabled(option);\n    const reset = () => withoutValidation(() => {\n      valueComputed.value = null;\n      emit(\"clear\");\n      resetValidation();\n    });\n    const focus = () => {\n      const firstActiveEl = Array.isArray(itemRefs.value) && itemRefs.value.find(el => !el.disabled);\n      if (firstActiveEl && typeof firstActiveEl.focus === \"function\") {\n        firstActiveEl.focus();\n      }\n    };\n    const {\n      computedError,\n      computedErrorMessages,\n      withoutValidation,\n      resetValidation\n    } = useValidation(props, emit, {\n      reset,\n      focus,\n      value: valueComputed\n    });\n    const computedProps = computed(() => pick(props, [\"name\", \"color\", \"readonly\", \"leftLabel\"]));\n    onMounted(() => {\n      if (isDev && props.type !== \"radio\" && !Array.isArray(props.modelValue)) {\n        console.warn(`Prop 'modelValue = ${props.modelValue}' has not a proper type!\n For component property 'type = ${props.type}' it must be of type 'array'.`);\n      }\n    });\n    return {\n      selectedValue,\n      computedError,\n      computedErrorMessages,\n      getValue,\n      getText,\n      getTrackBy,\n      isDisabled,\n      reset,\n      focus,\n      setItemRef,\n      computedProps\n    };\n  }\n});\nexport { _sfc_main as _ };\nimport '../../../VaOptionList.css';","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","VaRadio","VaCheckbox","VaSwitch","VaMessageListWrapper","emits","useStatefulEmits","props","useComponentPresetProp","useSelectableListProps","useValidationProps","useStatefulProps","type","String","default","validator","includes","disabled","Boolean","readonly","defaultValue","Number","Object","Array","color","leftLabel","modelValue","setup","emit","valueComputed","useStateful","getValue","getText","getTrackBy","getDisabled","useSelectableList","itemRefs","setItemRef","useArrayRefs","isRadio","computed","selectedValue","get","value","set","isArray","map","isDisabled","option","reset","withoutValidation","resetValidation","focus","firstActiveEl","find","el","computedError","computedErrorMessages","useValidation","computedProps","pick","onMounted","isDev","console","warn"],"sources":["../../../../../src/components/va-option-list/VaOptionList.vue"],"sourcesContent":["<template>\n  <VaMessageListWrapper\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"$props.errorCount\"\n  >\n    <ul class=\"va-option-list__list\">\n      <li\n        v-for=\"option in $props.options\"\n        :key=\"getTrackBy(option)\"\n      >\n        <slot v-bind=\"{ option, selectedValue, isDisabled, getText, getValue }\">\n          <va-radio\n            v-if=\"$props.type === 'radio'\"\n            :ref=\"setItemRef\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :option=\"getValue(option)\"\n            v-bind=\"computedProps\"\n          />\n          <va-checkbox\n            v-else-if=\"$props.type === 'checkbox'\"\n            :ref=\"setItemRef\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :array-value=\"getValue(option)\"\n            v-bind=\"computedProps\"\n          />\n          <va-switch\n            v-else\n            :ref=\"setItemRef\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :array-value=\"getValue(option)\"\n            v-bind=\"computedProps\"\n          />\n        </slot>\n      </li>\n    </ul>\n  </VaMessageListWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, onMounted } from 'vue'\nimport pick from 'lodash/pick.js'\n\nimport {\n  useComponentPresetProp,\n  useSelectableList, useSelectableListProps, SelectableOption,\n  useValidation, useValidationProps,\n  useStateful, useStatefulProps, useStatefulEmits,\n  useArrayRefs,\n} from '../../composables'\n\nimport { isDev } from '../../utils/env'\n\nimport { VaMessageListWrapper } from '../va-input'\nimport { VaCheckbox } from '../va-checkbox'\nimport { VaRadio } from '../va-radio'\nimport { VaSwitch } from '../va-switch'\n\ntype OptionListValue = SelectableOption | SelectableOption[] | null\n\nexport default defineComponent({\n  name: 'VaOptionList',\n  components: {\n    VaRadio,\n    VaCheckbox,\n    VaSwitch,\n    VaMessageListWrapper,\n  },\n  emits: [...useStatefulEmits, 'clear'],\n  props: {\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...useStatefulProps,\n    type: {\n      type: String as PropType<'radio' | 'checkbox' | 'switch'>,\n      default: 'checkbox',\n      validator: (type: any) => ['radio', 'checkbox', 'switch'].includes(type),\n    },\n    disabled: ({ type: Boolean, default: false }),\n    readonly: ({ type: Boolean, default: false }),\n    defaultValue: ({ type: [String, Number, Boolean, Object, Array] as PropType<OptionListValue | null> }),\n    name: ({ type: String, default: '' }),\n    color: ({ type: String, default: 'primary' }),\n    leftLabel: ({ type: Boolean, default: false }),\n    modelValue: ({ type: [String, Number, Boolean, Object, Array] as PropType<OptionListValue | null> }),\n  },\n\n  setup (props, { emit }) {\n    const { valueComputed } = useStateful(props, emit, 'modelValue', { defaultValue: props.defaultValue })\n\n    const { getValue, getText, getTrackBy, getDisabled } = useSelectableList(props)\n\n    const { itemRefs, setItemRef } = useArrayRefs()\n\n    const isRadio = computed(() => props.type === 'radio')\n\n    const selectedValue = computed({\n      get () {\n        const value = isRadio.value ? null : []\n\n        return valueComputed.value || value as OptionListValue\n      },\n      set (value: OptionListValue) {\n        if (props.readonly) { return }\n\n        if (isRadio.value && !Array.isArray(value)) {\n          valueComputed.value = value ? getValue(value) : value\n        } else {\n          valueComputed.value = Array.isArray(value)\n            ? value.map(getValue)\n            : [value ? getValue(value) : value]\n        }\n      },\n    })\n\n    const isDisabled = (option: SelectableOption) => props.disabled || getDisabled(option)\n\n    const reset = () => withoutValidation(() => {\n      valueComputed.value = null\n      emit('clear')\n      resetValidation()\n    })\n\n    const focus = () => {\n      const firstActiveEl = Array.isArray(itemRefs.value) && itemRefs.value.find(el => !(el as HTMLInputElement).disabled)\n\n      if (firstActiveEl && typeof firstActiveEl.focus === 'function') {\n        firstActiveEl.focus()\n      }\n    }\n\n    const {\n      computedError,\n      computedErrorMessages,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus, value: valueComputed })\n\n    const computedProps = computed(() => pick(props, ['name', 'color', 'readonly', 'leftLabel']))\n\n    onMounted(() => {\n      if (isDev && props.type !== 'radio' && !Array.isArray(props.modelValue)) {\n        console.warn(`Prop 'modelValue = ${props.modelValue}' has not a proper type!\\n For component property 'type = ${props.type}' it must be of type 'array'.`)\n      }\n    })\n\n    return {\n      selectedValue,\n      computedError,\n      computedErrorMessages,\n      getValue,\n      getText,\n      getTrackBy,\n      isDisabled,\n      reset,\n      focus,\n      setItemRef,\n      computedProps,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import 'variables';\n\n.va-option-list {\n  &__list {\n    line-height: var(--va-option-list-line-height);\n    margin: 0;\n    padding: 0;\n    list-style: none;\n    vertical-align: baseline;\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}