{"ast":null,"code":"import { _ as _sfc_main } from \"./VaCheckbox.vue_vue_type_script_lang-61dcccc4.mjs\";\nimport { resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementVNode, normalizeStyle, withModifiers, mergeProps, toHandlers, withDirectives, createVNode, vShow, createElementBlock, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from \"vue\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper-cc2b3d55.mjs\";\nconst VaCheckbox_vue_vue_type_style_index_0_lang = \"\";\nconst _hoisted_1 = [\"id\", \"indeterminate\", \"value\", \"checked\"];\nconst _hoisted_2 = [\"for\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_icon = resolveComponent(\"va-icon\");\n  const _component_VaMessageListWrapper = resolveComponent(\"VaMessageListWrapper\");\n  return openBlock(), createBlock(_component_VaMessageListWrapper, {\n    class: normalizeClass([\"va-checkbox\", _ctx.computedClass]),\n    disabled: _ctx.disabled,\n    success: _ctx.success,\n    messages: _ctx.messages,\n    error: _ctx.computedError,\n    \"error-messages\": _ctx.computedErrorMessages,\n    \"error-count\": _ctx.errorCount\n  }, {\n    default: withCtx(() => [createElementVNode(\"div\", {\n      ref: \"container\",\n      class: \"va-checkbox__input-container\",\n      onClick: _cache[6] || (_cache[6] = (...args) => _ctx.toggleSelection && _ctx.toggleSelection(...args)),\n      onBlur: _cache[7] || (_cache[7] = (...args) => _ctx.onBlur && _ctx.onBlur(...args))\n    }, [createElementVNode(\"div\", {\n      class: \"va-checkbox__square\",\n      style: normalizeStyle(_ctx.inputStyle),\n      onSelectstart: _cache[4] || (_cache[4] = withModifiers(() => {}, [\"prevent\"]))\n    }, [createElementVNode(\"input\", mergeProps({\n      ref: \"input\",\n      type: \"checkbox\",\n      class: \"va-checkbox__input\",\n      id: _ctx.computedId,\n      indeterminate: _ctx.indeterminate,\n      value: _ctx.label,\n      checked: _ctx.isActive\n    }, _ctx.inputAttributesComputed, toHandlers(_ctx.keyboardFocusListeners, true), {\n      onFocus: _cache[0] || (_cache[0] = (...args) => _ctx.onFocus && _ctx.onFocus(...args)),\n      onBlur: _cache[1] || (_cache[1] = (...args) => _ctx.onBlur && _ctx.onBlur(...args)),\n      onClick: _cache[2] || (_cache[2] = withModifiers(() => {}, [\"stop\", \"prevent\"])),\n      onKeypress: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.toggleSelection && _ctx.toggleSelection(...args), [\"prevent\"]))\n    }), null, 16, _hoisted_1), withDirectives(createVNode(_component_va_icon, {\n      class: \"va-checkbox__icon\",\n      size: \"20px\",\n      name: _ctx.computedIconName,\n      color: _ctx.textColorComputed\n    }, null, 8, [\"name\", \"color\"]), [[vShow, _ctx.isActive]])], 36), _ctx.label || _ctx.$slots.label ? (openBlock(), createElementBlock(\"label\", {\n      key: 0,\n      ref: \"label\",\n      class: \"va-checkbox__label\",\n      for: _ctx.computedId,\n      style: normalizeStyle(_ctx.labelStyle),\n      onBlur: _cache[5] || (_cache[5] = (...args) => _ctx.onBlur && _ctx.onBlur(...args))\n    }, [renderSlot(_ctx.$slots, \"label\", {}, () => [createTextVNode(toDisplayString(_ctx.label), 1)])], 44, _hoisted_2)) : createCommentVNode(\"\", true)], 544)]),\n    _: 3\n  }, 8, [\"class\", \"disabled\", \"success\", \"messages\", \"error\", \"error-messages\", \"error-count\"]);\n}\nconst _VaCheckbox = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { _VaCheckbox as _ };","map":{"version":3,"names":["_component_VaMessageListWrapper","resolveComponent","openBlock","createBlock","class","normalizeClass","_ctx","computedClass","disabled","success","messages","error","computedError","computedErrorMessages","errorCount","default","withCtx","createElementVNode","ref","onClick","_cache","args","toggleSelection","onBlur","style","normalizeStyle","inputStyle","onSelectstart","withModifiers","mergeProps","type","id","computedId","indeterminate","value","label","checked","isActive","inputAttributesComputed","toHandlers","keyboardFocusListeners","onFocus","_hoisted_1","withDirectives","createVNode","_component_va_icon","size","name","computedIconName","color","textColorComputed","vShow","$slots","createElementBlock","key","for","labelStyle","renderSlot"],"sources":["../../../../../src/components/va-checkbox/VaCheckbox.vue"],"sourcesContent":["<template>\n  <VaMessageListWrapper\n    class=\"va-checkbox\"\n    :class=\"computedClass\"\n    :disabled=\"disabled\"\n    :success=\"success\"\n    :messages=\"messages\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n  >\n    <div\n      ref=\"container\"\n      class=\"va-checkbox__input-container\"\n      @click=\"toggleSelection\"\n      @blur=\"onBlur\"\n    >\n      <div\n        class=\"va-checkbox__square\"\n        :style=\"inputStyle\"\n        @selectstart.prevent\n      >\n        <input\n          ref=\"input\"\n          type=\"checkbox\"\n          class=\"va-checkbox__input\"\n          :id=\"computedId\"\n          :indeterminate=\"indeterminate\"\n          :value=\"label\"\n          :checked=\"isActive\"\n          v-bind=\"inputAttributesComputed\"\n          v-on=\"keyboardFocusListeners\"\n          @focus=\"onFocus\"\n          @blur=\"onBlur\"\n          @click.stop.prevent\n          @keypress.prevent=\"toggleSelection\"\n        >\n        <va-icon\n          v-show=\"isActive\"\n          class=\"va-checkbox__icon\"\n          size=\"20px\"\n          :name=\"computedIconName\"\n          :color=\"textColorComputed\"\n        />\n      </div>\n      <label\n        v-if=\"label || $slots.label\"\n        ref=\"label\"\n        class=\"va-checkbox__label\"\n        :for=\"computedId\"\n        :style=\"labelStyle\"\n        @blur=\"onBlur\"\n      >\n        <slot name=\"label\">{{ label }}</slot>\n      </label>\n    </div>\n  </VaMessageListWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType, shallowRef } from 'vue'\n\nimport { generateUniqueId } from '../../utils/uuid'\nimport {\n  useComponentPresetProp,\n  useKeyboardOnlyFocus,\n  useColors, useTextColor,\n  useSelectable, useSelectableProps, useSelectableEmits, Elements,\n} from '../../composables'\n\nimport { VaMessageListWrapper } from '../va-input'\nimport { VaIcon } from '../va-icon/'\n\nconst VaCheckboxValueType = [Boolean, Array, String, Object] as PropType<boolean | null | string | number | Record<any, unknown> | unknown[]>\n\nexport default defineComponent({\n  name: 'VaCheckbox',\n  components: { VaMessageListWrapper, VaIcon },\n  emits: useSelectableEmits,\n  props: {\n    ...useSelectableProps,\n    ...useComponentPresetProp,\n    modelValue: { type: VaCheckboxValueType, default: false },\n    color: { type: String, default: 'primary' },\n    checkedIcon: { type: String, default: 'va-check' },\n    indeterminate: { type: Boolean, default: false },\n    indeterminateValue: { type: VaCheckboxValueType, default: null },\n    indeterminateIcon: { type: String, default: 'remove' },\n    id: { type: String, default: '' },\n    name: { type: String, default: '' },\n    ariaLabel: { type: String, default: undefined },\n  },\n  setup (props, { emit }) {\n    const elements: Elements = {\n      container: shallowRef<HTMLElement>(),\n      input: shallowRef<HTMLElement>(),\n      label: shallowRef<HTMLElement>(),\n    }\n\n    const {\n      isChecked,\n      computedError,\n      isIndeterminate,\n      computedErrorMessages,\n      validationAriaAttributes,\n      toggleSelection,\n      onBlur,\n      onFocus,\n    } = useSelectable(props, emit, elements)\n    const { getColor } = useColors()\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\n    const { textColorComputed } = useTextColor()\n\n    const isActive = computed(() => isChecked.value || isIndeterminate.value)\n\n    const computedClass = computed(() => ({\n      'va-checkbox--selected': isChecked.value,\n      'va-checkbox--readonly': props.readonly,\n      'va-checkbox--disabled': props.disabled,\n      'va-checkbox--indeterminate': props.indeterminate,\n      'va-checkbox--error': computedError.value,\n      'va-checkbox--left-label': props.leftLabel,\n      'va-checkbox--on-keyboard-focus': hasKeyboardFocus.value,\n    }))\n\n    const labelStyle = computed(() => {\n      return {\n        color: computedError.value ? getColor('danger') : '',\n        padding: !props.label\n          ? ''\n          : props.leftLabel\n            ? '0 0.5rem 0 0'\n            : '0 0 0 0.5rem',\n      }\n    })\n\n    const inputStyle = computed(() => {\n      const style = {\n        background: isActive.value ? getColor(props.color) : '',\n        borderColor: isActive.value ? getColor(props.color) : '',\n      }\n\n      if (computedError.value) {\n        style.borderColor = getColor('danger')\n      }\n\n      return style\n    })\n\n    const computedIconName = computed(() => props.indeterminate && isIndeterminate.value\n      ? props.indeterminateIcon\n      : props.checkedIcon,\n    )\n\n    const uniqueId = computed(generateUniqueId)\n    const computedId = computed(() => props.id || uniqueId.value)\n    const computedName = computed(() => props.name || uniqueId.value)\n    const inputAttributesComputed = computed(() => ({\n      name: computedName.value,\n      disabled: props.disabled,\n      readonly: props.readonly,\n      tabindex: props.disabled ? -1 : 0,\n      'aria-label': props.ariaLabel,\n      'aria-disabled': props.disabled,\n      'aria-readOnly': props.readonly,\n      'aria-checked': isActive.value,\n      ...validationAriaAttributes.value,\n    }))\n\n    return {\n      isActive,\n      computedClass,\n      labelStyle,\n      inputStyle,\n      computedIconName,\n      textColorComputed,\n      computedError,\n      computedErrorMessages,\n      keyboardFocusListeners,\n      toggleSelection,\n      onBlur,\n      onFocus,\n      inputAttributesComputed,\n      computedId,\n      computedName,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-checkbox {\n  display: var(--va-checkbox-display);\n  max-width: fit-content;\n  font-family: var(--va-font-family);\n\n  &__input-container {\n    align-items: center;\n    display: flex;\n    padding: var(--va-checkbox-input-padding);\n    cursor: var(--va-checkbox-input-cursor);\n    font-size: var(--va-checkbox-font-size);\n    line-height: var(--va-checkbox-line-height);\n\n    @at-root {\n      .va-checkbox--disabled & {\n        @include va-disabled();\n\n        cursor: var(--va-checkbox-disabled-cursor);\n      }\n\n      .va-checkbox--readonly & {\n        cursor: var(--va-checkbox-readonly-cursor);\n      }\n\n      .va-checkbox--left-label & {\n        flex-direction: row-reverse;\n      }\n    }\n  }\n\n  #{&}__square {\n    @include flex-center();\n\n    width: var(--va-checkbox-square-width);\n    min-width: var(--va-checkbox-square-min-width);\n    height: var(--va-checkbox-square-height);\n    position: relative;\n    background-color: var(--va-checkbox-square-background-color);\n    border: var(--va-checkbox-square-border, var(--va-control-border));\n    border-radius: var(--va-checkbox-square-border-radius);\n\n    @at-root {\n      .va-checkbox--on-keyboard-focus#{&} {\n        transition: all, 0.6s, ease-in;\n        outline: 2px solid var(--va-focus);\n      }\n    }\n  }\n\n  &__input {\n    @include visually-hidden;\n  }\n\n  &__label {\n    display: var(--va-checkbox-label-display);\n    position: relative;\n  }\n\n  &__icon {\n    pointer-events: none;\n    position: absolute;\n  }\n\n  &--selected {\n    .va-checkbox {\n      &__icon {\n        color: var(--va-checkbox-selected-icon-color);\n      }\n    }\n  }\n\n  &--indeterminate {\n    .va-checkbox {\n      &__icon {\n        color: var(--va-checkbox-indeterminate-icon-color);\n      }\n    }\n  }\n}\n</style>\n"],"mappings":";;;;;;;;EAwDyB,MAAAA,+BAAA,GAAAC,gBAAA;EApDpB,OAAAC,SAAA,IAAkBC,WAAA,CAAAH,+BAAA;IAClBI,KAAA,EAAOC,cAAA,CAAS,gBAAAC,IAAA,CAAAC,aAAA;IAChBC,QAAA,EAAUF,IAAA,CAAAE,QAAA;IACVC,OAAA,EAAOH,IAAA,CAAAG,OAAA;IACPC,QAAA,EAAAJ,IAAA,CAAAI,QAAA;IACAC,KAAA,EAAAL,IAAA,CAAAM,aAAA;IAAA,kBAAAN,IAAA,CAAAO,qBAAA;IA8CK,eAAAP,IAAA,CAAAQ;EAAA;IAAAC,OAAA,EA3CAC,OAAA,CAAW,OACTC,kBAAA;MACLC,GAAA;MACAd,KAAA,EAAI;MAAAe,OAAA,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAAf,IAAA,CAAAgB,eAAA,IAAAhB,IAAA,CAAAgB,eAAA,IAAAD,IAAA;MAELE,MAAA,EA2BMH,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAAf,IAAA,CAAAiB,MAAA,IAAAjB,IAAA,CAAAiB,MAAA,IAAAF,IAAA;IAAA,IAAAJ,kBAAA,CAzBE,OAAE;MACPb,KAAA;MAAAoB,KAAA,EAAAC,cAAA,CAAAnB,IAAA,CAAAoB,UAAA;MAEDC,aAAA,EAAAP,MAAA,CAcC,OAdDA,MAAA,CAcC,KAAAQ,aAAA;IAAA,IAZgBX,kBAAA,UAAAY,UAAA;MACfX,GAAA,EAAK;MACJY,IAAA,EAAI;MACJ1B,KAAA;MACA2B,EAAA,EAAOzB,IAAA,CAAA0B,UAAA;MACPC,aAAA,EAAS3B,IAAA,CAAA2B,aAAA;MACFC,KAAA,EAAA5B,IAAA,CAAA6B,KAAA;MAEPC,OAAA,EAAK9B,IAAA,CAAA+B;IAAA,GACL/B,IAAA,CAAIgC,uBAAA,EAAEC,UAAA,CAAAjC,IAAA,CAAAkC,sBAAA;MACNC,OAAA,EAAKrB,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAAf,IAAA,CAANmC,OAAA,IAAmBnC,IAAA,CAAAmC,OAAA,IAAApB,IAAA;MAClBE,MAAA,EAAAH,MAAA,CAAQ,CAAU,MAAAA,MAAA,UAAAC,IAAA,KAAAf,IAAA,CAAAiB,MAAA,IAAAjB,IAAA,CAAAiB,MAAA,IAAAF,IAAA;MAAAF,OAAA,EAAAC,MAAA,QAAAA,MAAA,MAAAQ,aAAA;yBAErB,CAME,MAAAR,MAAA,MAAAQ,aAAA,KAAAP,IAAA,KAAAf,IAAA,CAAAgB,eAAA,IAAAhB,IAAA,CAAAgB,eAAA,IAAAD,IAAA;IAAA,IAJA,MAAM,IAAAqB,UAAA,GACKC,cAAA,CAAAC,WAAA,CAAAC,kBAAA;MACVzC,KAAA,EAAM;MACN0C,IAAA,EAAK;MAAAC,IAAA,EAAAzC,IAAA,CAAA0C,gBAAA;MAJEC,KAAA,EAAA3C,IAAA,CAAA4C;IAAA,kCAAAC,KAAA,EAAA7C,IAAA,CAAA+B,QAAA,EAQJ,SAAA/B,IAAA,CAAA6B,KAAA,IAAA7B,IAAA,CAAA8C,MAAA,CAAAjB,KAAA,IAAAjC,SAAA,CACK,GAAAmD,kBAAA;MACXC,GAAA,EAAK;MACJpC,GAAA,EAAK;MACLd,KAAA,EAAK;MACLmD,GAAA,EAAIjD,IAAA,CAAA0B,UAAA;MAAAR,KAAA,EAAAC,cAAA,CAAAnB,IAAA,CAAAkD,UAAA;MAELjC,MAAA,EAAAH,MAAA,CAAqC,OAAAA,MAAA,UAArCC,IAAA,KAAqCf,IAAA,CAAAiB,MAAA,IAAAjB,IAAA,CAAAiB,MAAA,IAAAF,IAAA;IAAA,IAAAoC,UAAA,CAAAnD,IAAA,CAAA8C,MAAA,sB"},"metadata":{},"sourceType":"module","externalDependencies":[]}