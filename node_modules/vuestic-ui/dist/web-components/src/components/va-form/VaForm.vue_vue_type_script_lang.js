import { defineComponent, watch, computed } from "vue";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { a as useLocalConfigProvider } from "../../composables/useLocalConfig.js";
import { u as useFormParent } from "../../composables/useForm/useFormParent.js";
const props = { stateful: true };
const statefulConfig = {
  VaInput: props,
  VaSelect: props,
  VaCheckbox: props,
  VaRadio: props,
  VaDatePicker: props,
  VaTimePicker: props,
  VaColorPicker: props,
  VaSlider: props,
  VaSwitch: props,
  VaFileUpload: props,
  VaRating: props,
  VaDateInput: props,
  VaTimeInput: props
};
const _sfc_main = defineComponent({
  name: "VaForm",
  props: {
    ...useComponentPresetProp,
    autofocus: { type: Boolean, default: false },
    immediate: { type: Boolean, default: false },
    tag: { type: String, default: "div" },
    trigger: { type: String, default: "blur" },
    modelValue: { type: Boolean, default: true },
    hideErrors: { type: Boolean, default: false },
    hideErrorMessages: { type: Boolean, default: false },
    hideLoading: { type: Boolean, default: false },
    stateful: { type: Boolean, default: false }
  },
  emits: ["update:modelValue"],
  setup(props2, { emit }) {
    const context = useFormParent(props2);
    watch(context.isValid, (value) => {
      emit("update:modelValue", value);
    });
    watch(() => props2.autofocus, (value) => {
      if (value) {
        context.focus();
      }
    }, { immediate: true });
    watch(context.fields, (newVal) => {
      if (newVal.length && props2.immediate) {
        context.validate();
      }
    }, { immediate: true });
    useLocalConfigProvider(computed(() => {
      if (!props2.stateful) {
        return {};
      }
      return statefulConfig;
    }));
    return {
      ...context,
      context
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaForm.vue_vue_type_script_lang.js.map
