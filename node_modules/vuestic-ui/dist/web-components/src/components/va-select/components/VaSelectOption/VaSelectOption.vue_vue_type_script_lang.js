import { defineComponent, computed } from "vue";
import { V as VaIcon } from "../../../va-icon/index.js";
import { i as isNilValue } from "../../../../utils/isNilValue.js";
import { a as useColorProps, u as useColors } from "../../../../composables/useColors.js";
import { u as useBem } from "../../../../composables/useBem.js";
const _sfc_main = defineComponent({
  name: "VaSelectOption",
  components: { VaIcon },
  props: {
    ...useColorProps,
    disabled: { type: Boolean, default: false },
    option: { type: [Number, String, Boolean, Object], default: () => ({}) },
    getText: { type: Function, required: true },
    getTrackBy: { type: Function, required: true },
    currentOption: { type: [String, Number, Boolean, Object], default: null },
    getSelectedState: { type: Function, required: true },
    search: { type: String, default: "" },
    highlightMatchedText: { type: Boolean, default: true },
    inputFocused: { type: Boolean, default: false },
    minSearchChars: { type: Number, default: 0 }
  },
  setup(props) {
    const { getColor, getHoverColor } = useColors();
    const optionIcon = computed(() => typeof props.option === "object" ? props.option.icon : void 0);
    const optionIconColor = computed(() => getColor(props.color));
    const optionText = computed(() => props.getText(props.option));
    const optionTextSplitted = computed(() => {
      const defaultSplit = { start: optionText.value, searchedSubString: "", end: "" };
      if (!optionText.value || !props.search || !props.highlightMatchedText || props.search.length < props.minSearchChars) {
        return defaultSplit;
      }
      const substringStartIndex = optionText.value.toLowerCase().indexOf(props.search.toLowerCase());
      if (substringStartIndex < 0) {
        return defaultSplit;
      }
      const start = optionText.value.slice(0, substringStartIndex);
      const searchedSubString = optionText.value.slice(substringStartIndex, substringStartIndex + props.search.length);
      const end = optionText.value.slice(substringStartIndex + props.search.length);
      return { start, searchedSubString, end };
    });
    const isSelected = computed(() => props.getSelectedState(props.option));
    const isFocused = computed(() => {
      if (isNilValue(props.currentOption)) {
        return false;
      }
      if (typeof props.option === "string") {
        return props.option === props.currentOption;
      }
      return props.getTrackBy(props.currentOption) === props.getTrackBy(props.option);
    });
    const optionClass = useBem("va-select-option", () => ({
      selected: isSelected.value
    }));
    const optionStyle = computed(() => ({
      color: isSelected.value ? getColor(props.color) : "inherit",
      backgroundColor: isFocused.value ? getHoverColor(getColor(props.color)) : "transparent",
      cursor: props.disabled ? "default" : void 0,
      opacity: props.disabled ? "var(--va-select-option-list-option-disabled-opacity)" : void 0
    }));
    return {
      getColor,
      optionIcon,
      isSelected,
      optionStyle,
      optionClass,
      optionIconColor,
      optionTextSplitted
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaSelectOption.vue_vue_type_script_lang.js.map
