import { defineComponent, ref, computed, toRefs, watch } from "vue";
import { V as VaBadge } from "../../../va-badge/index.js";
import { V as VaIcon } from "../../../va-icon/index.js";
import { u as useFormFieldProps } from "../../../../composables/useFormField.js";
const _sfc_main = defineComponent({
  name: "VaSelectContent",
  components: { VaBadge, VaIcon },
  props: {
    ...useFormFieldProps,
    value: { type: Array, required: true },
    valueString: { type: String },
    placeholder: { type: String, default: "" },
    tabindex: { type: [String, Number], default: 0 },
    hiddenSelectedOptionsAmount: { type: Number, default: 0 },
    isAllOptionsShown: { type: Boolean, default: false },
    autocomplete: { type: Boolean, default: false },
    focused: { type: Boolean, default: false },
    multiple: { type: Boolean, default: false },
    getText: { type: Function, required: true },
    autocompleteInputValue: { type: String, default: "" }
  },
  emits: ["toggle-hidden", "autocomplete-input", "focus-prev", "focus-next", "select-option", "delete-last-selected"],
  setup(props, { emit }) {
    const autocompleteInput = ref();
    const isPlaceholder = computed(() => props.placeholder && !props.valueString);
    const toggleHiddenOptionsState = () => emit("toggle-hidden");
    const { value, focused } = toRefs(props);
    const autocompleteInputValueComputed = computed({
      get: () => props.autocompleteInputValue,
      set: (v) => emit("autocomplete-input", v)
    });
    watch(focused, (newValue) => {
      var _a, _b;
      if (!props.autocomplete || !newValue) {
        return;
      }
      if (autocompleteInputValueComputed.value) {
        (_a = autocompleteInput.value) == null ? void 0 : _a.setSelectionRange(0, autocompleteInputValueComputed.value.length);
      } else {
        (_b = autocompleteInput.value) == null ? void 0 : _b.focus();
      }
    });
    const handleBackspace = (e) => {
      if (props.multiple && value.value.length && e.key === "Backspace" && !autocompleteInputValueComputed.value) {
        emit("delete-last-selected");
      }
    };
    return {
      isPlaceholder,
      toggleHiddenOptionsState,
      autocompleteInputValueComputed,
      autocompleteInput,
      handleBackspace
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaSelectContent.vue_vue_type_script_lang.js.map
