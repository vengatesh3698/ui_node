import { defineComponent, ref, computed, watch } from "vue";
import { p as pick } from "../../../vendor.js";
import { u as useVirtualScrollerSizesProps, a as useVirtualScrollerSizes } from "./useVirtualScrollerSizes.js";
import { u as useTrackByProps, a as useTrackBy } from "../../composables/useTrackBy.js";
import { u as useEvent } from "../../composables/useEvent.js";
import { u as useBem } from "../../composables/useBem.js";
const _sfc_main = defineComponent({
  name: "VaVirtualScroller",
  props: {
    ...useTrackByProps,
    ...useVirtualScrollerSizesProps,
    items: { type: Array, default: () => [] },
    bench: { type: Number, default: 10, validator: (v) => v >= 0 },
    disabled: { type: Boolean, default: false },
    table: { type: Boolean, default: false }
  },
  emits: ["scroll:bottom"],
  setup: (props, { emit }) => {
    const listScrollPosition = ref(0);
    const scrollDirection = computed(() => props.horizontal ? "scrollLeft" : "scrollTop");
    const handleScroll = () => {
      if (!wrapper.value) {
        return;
      }
      listScrollPosition.value = wrapper.value[scrollDirection.value];
    };
    if (!props.disabled) {
      useEvent("scroll", handleScroll, true);
    }
    const { list, wrapper, itemSize, wrapperSize } = useVirtualScrollerSizes(props, listScrollPosition);
    const { getKey } = useTrackBy(props);
    const uniqueKey = (item, index, defaultValue) => getKey(item, index, defaultValue);
    watch(listScrollPosition, (newValue) => {
      if (newValue + wrapperSize.value === containerSize.value) {
        emit("scroll:bottom");
      }
    });
    const renderStartIndex = computed(() => {
      return Math.max(0, Math.floor(listScrollPosition.value / itemSize.value) - props.bench);
    });
    const renderItemsAmount = computed(() => {
      var _a;
      if (!((_a = props.items) == null ? void 0 : _a.length)) {
        return 0;
      }
      return props.disabled ? props.items.length : Math.min(props.items.length - renderStartIndex.value, Math.ceil(wrapperSize.value / itemSize.value) + props.bench * 2);
    });
    const renderEndIndex = computed(() => renderStartIndex.value + renderItemsAmount.value);
    const renderBuffer = computed(() => {
      var _a;
      if (!((_a = props.items) == null ? void 0 : _a.length)) {
        return [];
      }
      return props.items.slice(renderStartIndex.value, renderEndIndex.value);
    });
    const sizeAttribute = computed(() => props.horizontal ? "width" : "height");
    const isDisabledVirtualTable = computed(() => props.table && props.disabled);
    const wrapperStyleComputed = computed(() => ({
      [sizeAttribute.value]: isDisabledVirtualTable.value || !wrapperSize.value ? void 0 : `${wrapperSize.value}px`
    }));
    const wrapperClassComputed = useBem("va-virtual-scroller", () => ({
      ...pick(props, ["horizontal"])
    }));
    const containerSize = computed(() => {
      var _a;
      return (((_a = props.items) == null ? void 0 : _a.length) ?? 0) * itemSize.value;
    });
    const containerStyleComputed = computed(() => ({
      [sizeAttribute.value]: isDisabledVirtualTable.value ? void 0 : `${containerSize.value}px`
    }));
    const currentListOffset = computed(() => renderStartIndex.value * itemSize.value);
    const listStyleComputed = computed(() => ({
      transform: `translate${props.horizontal ? "X" : "Y"}(${currentListOffset.value}px)`
    }));
    const scrollToAttribute = computed(() => props.horizontal ? "left" : "top");
    const virtualScrollTo = (index) => {
      var _a;
      if (!index && index !== 0) {
        return;
      }
      (_a = wrapper.value) == null ? void 0 : _a.scrollTo({ [scrollToAttribute.value]: index * itemSize.value });
    };
    return {
      containerStyleComputed,
      wrapperStyleComputed,
      wrapperClassComputed,
      listStyleComputed,
      currentListOffset,
      renderStartIndex,
      virtualScrollTo,
      renderBuffer,
      uniqueKey,
      wrapper,
      list
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaVirtualScroller.vue_vue_type_script_lang.js.map
