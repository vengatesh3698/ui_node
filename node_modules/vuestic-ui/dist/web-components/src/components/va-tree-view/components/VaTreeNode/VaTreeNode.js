import { _ as _sfc_main } from "./VaTreeNode.vue_vue_type_script_lang.js";
import { resolveComponent, openBlock, createElementBlock, normalizeClass, withKeys, withModifiers, createElementVNode, renderSlot, normalizeProps, guardReactiveProps, createVNode, createCommentVNode, createTextVNode, toDisplayString, withDirectives, Fragment, renderList, createBlock, createSlots, withCtx, vShow } from "vue";
import { _ as _export_sfc } from "../../../../../plugin-vue_export-helper.js";
const _style_0 = ':root,\n:host {\n  --va-tree-node-contents-gap: 8px;\n  --va-tree-node-padding: 6px;\n  --va-tree-node-border-radius: 4px;\n  --va-tree-node-indent: 28px;\n  --va-tree-node-content-item-flex: 0 0 var(--va-tree-node-indent);\n  --va-tree-node-content-body-item-flex: 1;\n  --va-tree-node-interactive-bg-opacity: 0.1;\n  --va-tree-node-children-background: linear-gradient(#adb3b9 33%, rgba(255, 255, 255, 0) 0%) 15px/1px 3px repeat-y transparent;\n}\n.va-tree-node-root {\n  display: flex;\n  padding: var(--va-tree-node-padding);\n  position: relative;\n}\n.va-tree-node-root::before {\n  content: "";\n  background-color: var(--va-primary);\n  border-radius: var(--va-tree-node-border-radius);\n  bottom: 0;\n  left: 0;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n.va-tree-node-root:hover::before {\n  opacity: var(--va-tree-node-interactive-bg-opacity);\n}\n.va-tree-node-content {\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: center;\n  width: 100%;\n}\n.va-tree-node-content__item {\n  flex: var(--va-tree-node-content-item-flex);\n  min-width: var(--va-tree-node-indent);\n  line-height: 1;\n}\n.va-tree-node-content__item--leaf {\n  cursor: pointer;\n}\n.va-tree-node-content__body {\n  flex: var(--va-tree-node-content-body-item-flex);\n  width: 100%;\n}\n.va-tree-node-content--indent {\n  margin-left: var(--va-tree-node-indent);\n}\n.va-tree-node-content--clickable {\n  cursor: pointer;\n}\n.va-tree-node-children {\n  display: none;\n  background: var(--va-tree-node-children-background);\n  padding-left: var(--va-tree-node-indent);\n  width: 100%;\n}\n.va-tree-node-children--expanded {\n  display: block;\n}\n.va-tree-node__checkbox {\n  --va-checkbox-input-padding: 0;\n}\n.va-tree-node--disabled {\n  cursor: default;\n  opacity: 0.4;\n  pointer-events: none;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n}\n.va-tree-node--disabled .va-tree-node-content__item--leaf {\n  cursor: pointer;\n  pointer-events: all;\n}\n.va-tree-node:focus-visible > .va-tree-node-root {\n  outline: 2px solid var(--va-focus) !important;\n  border-radius: 2px;\n}\n.va-tree-node:focus-visible > .va-tree-node-root::before {\n  opacity: var(--va-tree-node-interactive-bg-opacity);\n}';
const _hoisted_1 = ["role", "aria-expanded", "aria-disabled", "aria-checked", "tabindex"];
const _hoisted_2 = { class: "va-tree-node-root" };
const _hoisted_3 = {
  key: 2,
  class: "va-tree-node-content__item"
};
const _hoisted_4 = ["aria-hidden"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  const _component_va_checkbox = resolveComponent("va-checkbox");
  const _component_va_tree_node = resolveComponent("va-tree-node", true);
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-tree-node", _ctx.treeNodeClassComputed]),
    role: _ctx.roleComputed,
    "aria-expanded": _ctx.isExpandedComputed,
    "aria-disabled": _ctx.$props.node.disabled,
    "aria-checked": !!_ctx.$props.node.checked,
    tabindex: _ctx.tabIndexComputed,
    onKeydown: [
      _cache[4] || (_cache[4] = withKeys(withModifiers(($event) => _ctx.handleKeyboardNavigation($event, _ctx.$props.node), ["stop", "prevent"]), ["up"])),
      _cache[5] || (_cache[5] = withKeys(withModifiers(($event) => _ctx.handleKeyboardNavigation($event, _ctx.$props.node), ["stop", "prevent"]), ["right"])),
      _cache[6] || (_cache[6] = withKeys(withModifiers(($event) => _ctx.handleKeyboardNavigation($event, _ctx.$props.node), ["stop", "prevent"]), ["down"])),
      _cache[7] || (_cache[7] = withKeys(withModifiers(($event) => _ctx.handleKeyboardNavigation($event, _ctx.$props.node), ["stop", "prevent"]), ["left"])),
      _cache[8] || (_cache[8] = withKeys(withModifiers(($event) => _ctx.handleKeyboardNavigation($event, _ctx.$props.node), ["stop", "prevent"]), ["space"])),
      _cache[9] || (_cache[9] = withKeys(withModifiers(($event) => _ctx.handleKeyboardNavigation($event, _ctx.$props.node), ["stop", "prevent"]), ["esc"]))
    ]
  }, [
    createElementVNode("div", _hoisted_2, [
      createElementVNode("div", {
        class: normalizeClass(["va-tree-node-content", _ctx.indentClassComputed]),
        onClick: _cache[3] || (_cache[3] = ($event) => _ctx.onNodeClick("node"))
      }, [
        _ctx.$props.node.hasChildren ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "va-tree-node-content__item va-tree-node-content__item--leaf",
          onClick: _cache[0] || (_cache[0] = withModifiers(($event) => _ctx.onNodeClick("leaf"), ["stop"]))
        }, [
          renderSlot(_ctx.$slots, "icon-toggle", normalizeProps(guardReactiveProps(_ctx.$props.node)), () => [
            createVNode(_component_va_icon, {
              name: _ctx.isExpandedComputed ? "keyboard_arrow_down" : "keyboard_arrow_right",
              size: "20px"
            }, null, 8, ["name"])
          ])
        ])) : createCommentVNode("", true),
        _ctx.selectable ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: "va-tree-node-content__item",
          onClick: _cache[2] || (_cache[2] = withModifiers(() => {
          }, ["stop"]))
        }, [
          renderSlot(_ctx.$slots, "checkbox", normalizeProps(guardReactiveProps(_ctx.$props.node)), () => [
            createVNode(_component_va_checkbox, {
              "model-value": _ctx.$props.node.checked,
              color: _ctx.colorComputed,
              indeterminate: "",
              "onUpdate:modelValue": _cache[1] || (_cache[1] = (v) => _ctx.toggleCheckbox(_ctx.$props.node, v)),
              class: "va-tree-node__checkbox"
            }, null, 8, ["model-value", "color"])
          ])
        ])) : createCommentVNode("", true),
        _ctx.iconComputed ? (openBlock(), createElementBlock("div", _hoisted_3, [
          renderSlot(_ctx.$slots, "icon", normalizeProps(guardReactiveProps(_ctx.$props.node)), () => [
            createVNode(_component_va_icon, {
              name: _ctx.iconComputed,
              size: "small"
            }, null, 8, ["name"])
          ])
        ])) : createCommentVNode("", true),
        createElementVNode("div", {
          class: normalizeClass(["va-tree-node-content__body", _ctx.cursorClassComputed])
        }, [
          renderSlot(_ctx.$slots, "content", normalizeProps(guardReactiveProps(_ctx.$props.node)), () => [
            createTextVNode(toDisplayString(_ctx.labelComputed), 1)
          ])
        ], 2)
      ], 2)
    ]),
    withDirectives(createElementVNode("div", {
      "aria-hidden": !_ctx.$props.node.expanded,
      class: normalizeClass(["va-tree-node-children", _ctx.expandedClassComputed])
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.node.children, (childNode) => {
        return openBlock(), createBlock(_component_va_tree_node, {
          key: _ctx.getTrackBy(childNode),
          node: childNode
        }, createSlots({ _: 2 }, [
          renderList(_ctx.$slots, (_, name) => {
            return {
              name,
              fn: withCtx((slotScope) => [
                renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotScope)))
              ])
            };
          })
        ]), 1032, ["node"]);
      }), 128))
    ], 10, _hoisted_4), [
      [vShow, _ctx.$props.node.hasChildren]
    ])
  ], 42, _hoisted_1);
}
const _VaTreeNode = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [_style_0]]]);
export {
  _VaTreeNode as _
};
//# sourceMappingURL=VaTreeNode.js.map
