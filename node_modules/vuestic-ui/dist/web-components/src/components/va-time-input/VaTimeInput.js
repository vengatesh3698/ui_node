import { _ as _sfc_main } from "./VaTimeInput.vue_vue_type_script_lang.js";
import { resolveComponent, openBlock, createBlock, mergeProps, withCtx, createVNode, withModifiers, createSlots, createElementVNode, toHandlers, withKeys, createCommentVNode, renderList, renderSlot, normalizeProps, guardReactiveProps } from "vue";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
const _style_0 = ":root,\n:host {\n  --va-time-input-min-width: var(--va-form-element-min-width);\n}\n.va-time-input {\n  min-width: var(--va-time-input-min-width);\n}\n.va-time-input__anchor {\n  flex: 1;\n}";
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  const _component_va_input_wrapper = resolveComponent("va-input-wrapper");
  const _component_va_time_picker = resolveComponent("va-time-picker");
  const _component_va_dropdown_content = resolveComponent("va-dropdown-content");
  const _component_va_dropdown = resolveComponent("va-dropdown");
  return openBlock(), createBlock(_component_va_dropdown, mergeProps({
    modelValue: _ctx.doShowDropdown,
    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.doShowDropdown = $event),
    class: ["va-time-input", _ctx.$attrs.class],
    style: _ctx.$attrs.style
  }, _ctx.dropdownPropsComputed), {
    anchor: withCtx(() => [
      createVNode(_component_va_input_wrapper, mergeProps({
        class: "va-time-input__anchor",
        style: _ctx.cursorStyleComputed
      }, _ctx.computedInputWrapperProps, {
        onClick: withModifiers(_ctx.toggleDropdown, ["stop"])
      }), createSlots({
        default: withCtx(() => [
          createElementVNode("input", mergeProps({
            ref: "input",
            class: "va-time-input__input"
          }, _ctx.inputAttributesComputed, toHandlers(_ctx.computedInputListeners, true), {
            onChange: _cache[0] || (_cache[0] = (...args) => _ctx.onInputTextChanged && _ctx.onInputTextChanged(...args))
          }), null, 16)
        ]),
        icon: withCtx(() => [
          _ctx.canBeClearedComputed ? (openBlock(), createBlock(_component_va_icon, mergeProps({ key: 0 }, { ..._ctx.iconProps, ..._ctx.clearIconProps }, {
            "aria-label": _ctx.tp(_ctx.$props.ariaResetLabel),
            onClick: withModifiers(_ctx.reset, ["stop"]),
            onKeydown: [
              withKeys(withModifiers(_ctx.reset, ["stop"]), ["enter"]),
              withKeys(withModifiers(_ctx.reset, ["stop"]), ["space"])
            ]
          }), null, 16, ["aria-label", "onClick", "onKeydown"])) : !_ctx.$props.leftIcon && _ctx.$props.icon ? (openBlock(), createBlock(_component_va_icon, mergeProps({
            key: 1,
            "aria-label": _ctx.tp(_ctx.$props.ariaToggleDropdownLabel),
            onClick: withModifiers(_ctx.showDropdown, ["stop"]),
            onKeydown: [
              withKeys(withModifiers(_ctx.showDropdown, ["stop"]), ["enter"]),
              withKeys(withModifiers(_ctx.showDropdown, ["stop"]), ["space"])
            ]
          }, _ctx.iconProps), null, 16, ["aria-label", "onClick", "onKeydown"])) : createCommentVNode("", true)
        ]),
        _: 2
      }, [
        renderList(_ctx.filteredSlots, (name) => {
          return {
            name,
            fn: withCtx((slotScope) => [
              renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps({ ...slotScope, toggleDropdown: _ctx.toggleDropdown, showDropdown: _ctx.showDropdown, hideDropdown: _ctx.hideDropdown, isOpen: _ctx.isOpenSync, focus: _ctx.focus })))
            ])
          };
        }),
        _ctx.$slots.prependInner || _ctx.$props.leftIcon ? {
          name: "prependInner",
          fn: withCtx((slotScope) => [
            renderSlot(_ctx.$slots, "prependInner", normalizeProps(guardReactiveProps({ ...slotScope, toggleDropdown: _ctx.toggleDropdown, showDropdown: _ctx.showDropdown, hideDropdown: _ctx.hideDropdown, isOpen: _ctx.isOpenSync, focus: _ctx.focus }))),
            _ctx.$props.leftIcon ? (openBlock(), createBlock(_component_va_icon, mergeProps({
              key: 0,
              "aria-label": _ctx.tp(_ctx.$props.ariaToggleDropdownLabel)
            }, _ctx.iconProps, {
              onClick: withModifiers(_ctx.showDropdown, ["stop"]),
              onKeydown: [
                withKeys(withModifiers(_ctx.showDropdown, ["stop"]), ["enter"]),
                withKeys(withModifiers(_ctx.showDropdown, ["stop"]), ["space"])
              ]
            }), null, 16, ["aria-label", "onClick", "onKeydown"])) : createCommentVNode("", true)
          ]),
          key: "0"
        } : void 0
      ]), 1040, ["style", "onClick"])
    ]),
    default: withCtx(() => [
      createVNode(_component_va_dropdown_content, {
        "no-padding": "",
        onKeydown: withKeys(withModifiers(_ctx.hideDropdown, ["prevent"]), ["esc"]),
        onKeypress: withKeys(withModifiers(_ctx.hideDropdown, ["prevent"]), ["enter"])
      }, {
        default: withCtx(() => [
          createVNode(_component_va_time_picker, mergeProps({ ref: "timePicker" }, _ctx.timePickerProps, {
            modelValue: _ctx.valueComputed,
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.valueComputed = $event)
          }), null, 16, ["modelValue"])
        ]),
        _: 1
      }, 8, ["onKeydown", "onKeypress"])
    ]),
    _: 3
  }, 16, ["modelValue", "class", "style"]);
}
const _VaTimeInput = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [_style_0]]]);
export {
  _VaTimeInput as _
};
//# sourceMappingURL=VaTimeInput.js.map
