import { defineComponent, computed, shallowRef } from "vue";
import { u as useCarousel } from "./hooks/useCarousel.js";
import { u as useCarouselAnimation } from "./hooks/useCarouselAnimation.js";
import { u as useCarouselColor } from "./hooks/useCarouselColors.js";
import { V as VaImage } from "../va-image/index.js";
import { V as VaButton } from "../va-button/index.js";
import { V as VaHover } from "../va-hover/index.js";
import { u as useSwipeProps, a as useSwipe } from "../../composables/useSwipe.js";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.js";
import { a as useStatefulProps, u as useStatefulEmits, b as useStateful } from "../../composables/useStateful.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.js";
import { u as useTranslation } from "../../composables/useTranslation.js";
const VaImageProps = extractComponentProps(VaImage, ["src", "alt"]);
const _sfc_main = defineComponent({
  name: "VaCarousel",
  components: { VaImage, VaButton, VaHover },
  props: {
    ...useSwipeProps,
    ...useStatefulProps,
    ...useComponentPresetProp,
    ...VaImageProps,
    modelValue: { type: Number, default: 0 },
    items: { type: Array, required: true },
    // Animations
    autoscroll: { type: Boolean, default: false },
    autoscrollInterval: { type: Number, default: 1e3 },
    autoscrollPauseDuration: { type: Number, default: 2e3 },
    infinite: { type: Boolean, default: false },
    fadeKeyframe: { type: String, default: "va-carousel-fade-appear 1s" },
    // Visual
    arrows: { type: Boolean, default: true },
    indicators: { type: Boolean, default: true },
    indicatorTrigger: {
      type: String,
      default: "click",
      validator: (value) => ["click", "hover"].includes(value)
    },
    vertical: { type: Boolean, default: false },
    height: { type: String, default: "300px" },
    effect: {
      type: String,
      default: "transition",
      validator: (value) => ["fade", "transition"].includes(value)
    },
    color: { type: String, default: "primary" },
    ratio: { type: Number },
    ariaLabel: { type: String, default: "$t:carousel" },
    ariaPreviousLabel: { type: String, default: "$t:goPreviousSlide" },
    ariaNextLabel: { type: String, default: "$t:goNextSlide" },
    ariaGoToSlideLabel: { type: String, default: "$t:goSlide" },
    ariaSlideOfLabel: { type: String, default: "$t:slideOf" }
  },
  emits: [...useStatefulEmits],
  setup(props, { emit }) {
    const { valueComputed: currentSlide } = useStateful(props, emit, "modelValue", { defaultValue: 0 });
    const {
      goTo,
      next,
      prev,
      doShowNextButton,
      doShowPrevButton
    } = useCarousel(props, currentSlide);
    const { withPause, computedSlidesStyle, slides } = useCarouselAnimation(props, currentSlide);
    const isObjectSlides = computed(() => {
      return props.items.length && props.items.every((el) => !!el && typeof el === "object" && !!(el == null ? void 0 : el.src));
    });
    const isCurrentSlide = (index) => index === currentSlide.value;
    const slideStyleComputed = computed(() => ({
      animation: props.effect === "fade" ? "fadeKeyframe" : void 0
    }));
    const slidesContainer = shallowRef();
    const onSwipe = (state) => {
      switch (state.direction) {
        case "right":
        case "up":
          doShowPrevButton.value && prev();
          break;
        case "left":
        case "down":
          doShowNextButton.value && next();
      }
    };
    useSwipe(props, slidesContainer, onSwipe);
    return {
      vaImageProps: filterComponentProps(VaImageProps),
      doShowNextButton,
      doShowPrevButton,
      computedSlidesStyle,
      slideStyleComputed,
      goTo: withPause(goTo),
      prev: withPause(prev),
      next: withPause(next),
      slides,
      isObjectSlides,
      isCurrentSlide,
      ...useCarouselColor(),
      ...useTranslation(),
      slidesContainer
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaCarousel.vue_vue_type_script_lang.js.map
