import { computed, toRef } from "vue";
import { u as useElementBackground } from "../../composables/useElementBackground/useElementBackground.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
const useAlertStyles = (props) => {
  const { getColor, getTextColor, getBoxShadowColorFromBg } = useColors();
  const { background } = useElementBackground();
  const isTransparentBackground = computed(() => Boolean(props.outline || props.border));
  const { textColorComputed } = useTextColor(toRef(props, "color"), isTransparentBackground);
  const colorComputed = computed(() => getColor(props.color));
  const alertStyle = computed(() => {
    let background2 = colorComputed.value;
    let boxShadow = "none";
    if (props.outline) {
      background2 = "transparent";
    }
    if (props.border) {
      background2 = "var(--va-background-primary)";
      boxShadow = "var(--va-alert-box-shadow)";
    }
    return {
      border: props.outline ? `1px solid ${colorComputed.value}` : "",
      padding: props.dense ? "var(--va-alert-padding-y-dense) var(--va-alert-padding-x)" : "",
      backgroundColor: background2,
      boxShadow
    };
  });
  const contentStyle = computed(() => {
    return {
      alignItems: props.center ? "center" : "",
      color: props.border || props.outline ? getColor(getTextColor(background.value), void 0, true) : textColorComputed.value
    };
  });
  const titleStyle = computed(() => {
    return { color: textColorComputed.value };
  });
  const borderStyle = computed(() => ({
    backgroundColor: props.borderColor ? getColor(props.borderColor) : colorComputed.value
  }));
  return {
    alertStyle,
    contentStyle,
    titleStyle,
    borderStyle
  };
};
export {
  useAlertStyles as u
};
//# sourceMappingURL=useAlertStyles.js.map
