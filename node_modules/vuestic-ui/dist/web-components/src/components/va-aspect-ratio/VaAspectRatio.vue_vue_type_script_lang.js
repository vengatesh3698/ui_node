import { defineComponent, computed, useCssVars } from "vue";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
const __default__ = defineComponent({
  name: "VaAspectRatio",
  props: {
    ...useComponentPresetProp,
    ratio: {
      type: [Number, String],
      default: "auto",
      validator: (v) => {
        if (typeof v === "number") {
          return v > 0;
        }
        return v === "auto";
      }
    },
    contentHeight: { type: Number, default: 1 },
    contentWidth: { type: Number, default: 1 },
    maxWidth: {
      type: Number,
      default: 0,
      validator: (v) => v >= 0
    }
  },
  setup(props) {
    const aspectRatio = computed(() => {
      if (props.ratio === "auto" && props.contentHeight === 1 && props.contentWidth === 1) {
        return 0;
      }
      if (!isNaN(+props.ratio)) {
        return props.ratio;
      }
      return props.contentWidth / props.contentHeight;
    });
    const stylesComputed = computed(() => {
      if (!aspectRatio.value) {
        return;
      }
      return { paddingBottom: `${1 / aspectRatio.value * 100}%` };
    });
    const maxWidthComputed = computed(() => props.maxWidth ? `${props.maxWidth}px` : void 0);
    return { stylesComputed, maxWidthComputed };
  }
});
const __injectCSSVars__ = () => {
  useCssVars((_ctx) => ({
    "709b1e12": _ctx.maxWidthComputed
  }));
};
const __setup__ = __default__.setup;
__default__.setup = __setup__ ? (props, ctx) => {
  __injectCSSVars__();
  return __setup__(props, ctx);
} : __injectCSSVars__;
export {
  __default__ as _
};
//# sourceMappingURL=VaAspectRatio.vue_vue_type_script_lang.js.map
