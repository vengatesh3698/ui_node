{"version":3,"file":"VaTimePicker.js","sources":["../../../../../src/components/va-time-picker/VaTimePicker.vue"],"sourcesContent":["<template>\n  <div\n    class=\"va-time-picker\"\n    :class=\"computedClasses\"\n    :style=\"computedStyles\"\n  >\n    <VaTimePickerColumn\n      v-for=\"(column, idx) in columns\" :key=\"idx\"\n      :ref=\"setItemRef\"\n      :items=\"column.items\"\n      :tabindex=\"disabled ? -1 : 0\"\n      :cell-height=\"$props.cellHeight\"\n      v-model:activeItemIndex=\"column.activeItem.value\"\n      @keydown.right.stop.prevent=\"focusNext()\"\n      @keydown.tab.exact.stop.prevent=\"focusNext()\"\n      @keydown.left.stop.prevent=\"focusPrev()\"\n      @keydown.shift.tab.stop.prevent=\"focusPrev()\"\n      @focus=\"activeColumnIndex = idx\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, computed, PropType } from 'vue'\nimport { useTimePicker } from './hooks/useTimePicker'\n\nimport { VaTimePickerColumn } from './components/VaTimePickerColumn'\n\nimport {\n  useComponentPresetProp,\n  useStatefulProps,\n  useStatefulEmits,\n  useStateful,\n  useFormFieldProps,\n  useFormField,\n  useArrayRefs,\n  useCSSVariables,\n} from '../../composables'\n\nexport default defineComponent({\n  name: 'VaTimePicker',\n\n  components: { VaTimePickerColumn },\n\n  props: {\n    ...useStatefulProps,\n    ...useFormFieldProps,\n    ...useComponentPresetProp,\n    modelValue: { type: Date, required: false },\n    ampm: { type: Boolean, default: false },\n    hidePeriodSwitch: { type: Boolean, default: false },\n    periodUpdatesModelValue: { type: Boolean, default: true }, // Update model value when switching period automatically\n    view: { type: String as PropType<'hours' | 'minutes' | 'seconds'>, default: 'minutes' },\n    hoursFilter: { type: Function as PropType<(h: number) => boolean> },\n    minutesFilter: { type: Function as PropType<(h: number) => boolean> },\n    secondsFilter: { type: Function as PropType<(h: number) => boolean> },\n    framed: { type: Boolean, default: false },\n    cellHeight: { type: Number, default: 30 },\n    visibleCellsCount: { type: Number, default: 7 },\n  },\n\n  emits: [...useStatefulEmits],\n\n  setup (props, { emit }) {\n    const { valueComputed } = useStateful(props, emit)\n    const { columns, isPM } = useTimePicker(props, valueComputed)\n\n    const { setItemRef, itemRefs: pickers } = useArrayRefs()\n\n    const activeColumnIndex = ref<number>()\n\n    const focus = (idx = 0): void => {\n      pickers.value[idx]?.focus()\n    }\n\n    const blur = (idx?: number): void => {\n      idx ? pickers.value[idx]?.blur() : pickers.value.forEach((el) => el?.blur())\n    }\n\n    const { computedClasses: computedFormClasses } = useFormField('va-time-picker', props)\n\n    const focusNext = () => {\n      const nextIndex = (activeColumnIndex?.value || 0) + 1\n\n      activeColumnIndex.value = nextIndex % columns.value.length\n      focus(activeColumnIndex.value)\n    }\n\n    const focusPrev = () => {\n      const nextIndex = (activeColumnIndex?.value || 0) - 1 + columns.value.length\n\n      activeColumnIndex.value = nextIndex % columns.value.length\n      focus(activeColumnIndex.value)\n    }\n\n    const computedClasses = computed(() => ({\n      ...computedFormClasses,\n      'va-time-picker--framed': props.framed,\n    }))\n\n    const computedStyles = useCSSVariables('va-time-picker', () => {\n      const gapHeight = (props.visibleCellsCount - 1) / 2 * props.cellHeight\n\n      return {\n        height: `${props.cellHeight * props.visibleCellsCount}px`,\n        'cell-height': `${props.cellHeight}px`,\n        'column-gap-height': `${gapHeight}px`,\n      }\n    })\n\n    return {\n      columns,\n      computedStyles,\n      computedClasses,\n      isPM,\n      pickers,\n      setItemRef,\n\n      focusNext,\n      focusPrev,\n      activeColumnIndex,\n\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import './_variables.scss';\n\n@mixin after-overlay {\n  position: relative;\n\n  &::after {\n    content: '';\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    z-index: 1;\n  }\n}\n\n.va-time-picker {\n  display: var(--va-time-picker-display);\n  justify-content: center;\n  overflow: hidden;\n  height: var(--va-time-picker-height);\n  font-family: var(--va-font-family);\n\n  &--readonly {\n    @include after-overlay();\n  }\n\n  &--disabled {\n    @include after-overlay();\n\n    opacity: var(--va-time-picker-disabled-opacity);\n  }\n\n  &--framed {\n    position: relative;\n\n    &::before {\n      content: \"\";\n      height: var(--va-time-picker-cell-height);\n      width: 100%;\n      position: absolute;\n      top: 50%;\n      left: 0;\n      transform: translateY(-50%);\n      border-top: 1px solid var(--va-divider);\n      border-bottom: 1px solid var(--va-divider);\n      z-index: 0;\n    }\n  }\n}\n</style>\n"],"names":["_resolveComponent","_openBlock","_createElementBlock","_normalizeClass","_Fragment","_renderList","_withKeys","_withModifiers"],"mappings":";;;;;wCACEA,iBAkBM,oBAAA;AAfE,SAAAC,UAAA,GAAAC,mBAAE,OAAc;AAAA,IAAA,OAAAC,eAAA,CAAA,kBAAA,KAAA,eAAA,CAAA;AAAA,0BAEtB,KAYE,cAAA;AAAA,EAAA,GAAA;AAAA,KAX0CF,UAAA,IAAA,GAAAC,mBAAAE,UAAA,MAAAC,WAAA,KAAA,SAAA,CAAA,QAAA,QAAA;;QACzC,KAAK;AAAA,QACL,SAAO;AAAA,QACP,KAAU,KAAA;AAAA,QACV,OAAW,OAAA;AAAA,QACJ,eAAe,WAAS,KAAA;AAAA,QAAA,eAAA,KAAA,OAAA;AAAA,QAC/B,iBAAO,OAAA,WAAA;AAAA,QAAqB,4BAAA,CAAA,WAAA,OAAA,WAAA,QAAA;AAAA,QAAA,WAAA;AAAA,uEAED,KAAS,UAAA,GAAA,CAAA,QAAA,SAAA,CAAA,GAAA,CAAA,OAAA,CAAA;AAAA,UAAA,OAAA,CAAA,MAAA,OAAA,CAAA,IAAAC,SAAAC,cAAA,CAAA,WACJ,KAAS,UAAA,GAAA,CAAA,SAAA,QAAA,SAAA,CAAA,GAAA,CAAA,KAAA,CAAA;AAAA,UAAA,OAAA,CAAA,MAAA,OAAA,CAAA,IAAAD,SAAAC,cAAA,CAAA,WAAA,KAAA,UAAA,GAAA,CAAA,QAAA,SAAA,CAAA,GAAA,CAAA,MAAA,CAAA;AAAA,UACzC,OAAK,cAAE,CAAuB,IAAAD,SAAAC,cAAA,CAAA,WAAA,KAAA,UAAA,GAAA,CAAA,SAAA,QAAA,SAAA,CAAA,GAAA,CAAA,KAAA,CAAA;AAAA,QAAA;AAAA;;;;;;"}