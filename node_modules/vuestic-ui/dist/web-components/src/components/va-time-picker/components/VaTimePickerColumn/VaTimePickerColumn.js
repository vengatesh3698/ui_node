import { _ as _sfc_main } from "./VaTimePickerColumn.vue_vue_type_script_lang.js";
import { resolveComponent, openBlock, createElementBlock, withKeys, withModifiers, normalizeStyle, Fragment, renderList, createBlock, withCtx, createElementVNode, normalizeClass, renderSlot, normalizeProps, guardReactiveProps, createTextVNode, toDisplayString } from "vue";
import { _ as _export_sfc } from "../../../../../plugin-vue_export-helper.js";
const _style_0 = '.va-time-picker-column {\n  --va-time-picker-column-gap-height: 50px;\n  --va-time-picker-column-border-right: 1px solid var(--va-background-element);\n  --va-time-picker-cell-height: 30px;\n  --va-time-picker-cell-width: 40px;\n  --va-time-picker-cell-cursor: pointer;\n  --va-time-picker-cell-active-background: var(--va-primary);\n  --va-time-picker-cell-active-color: var(--va-primary);\n  --va-time-picker-cell-background-color-hover: transparent;\n  --va-time-picker-cell-active-background-opacity: 0.05;\n  --va-time-picker-cell-active-background-opacity-hover: 0.1;\n}\n.va-time-picker-column {\n  overflow-y: scroll;\n  -ms-overflow-style: none; /* IE and Edge */\n  scrollbar-width: none; /* Firefox */\n  height: 100%;\n  border-right: var(--va-time-picker-column-border-right);\n}\n.va-time-picker-column::-webkit-scrollbar { /* WebKit */\n  display: none;\n}\n.va-time-picker-column::before, .va-time-picker-column::after {\n  content: "";\n  display: block;\n  height: var(--va-time-picker-column-gap-height);\n  width: 100%;\n}\n.va-time-picker-column:last-child {\n  border-right: 0;\n}\n.va-time-picker-column .va-time-picker-cell {\n  height: var(--va-time-picker-cell-height);\n  line-height: var(--va-time-picker-cell-height);\n  width: var(--va-time-picker-cell-width);\n  text-align: center;\n  cursor: var(--va-time-picker-cell-cursor);\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n}\n.va-time-picker-column .va-time-picker-cell--active {\n  position: relative;\n  color: var(--va-time-picker-cell-active-color);\n  z-index: 0;\n}\n.va-time-picker-column .va-time-picker-cell--active::before {\n  background: var(--va-time-picker-cell-active-background);\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  right: 0;\n  content: "";\n  z-index: -1;\n  opacity: var(--va-time-picker-cell-active-background-opacity);\n}\n.va-time-picker-column .va-time-picker-cell:hover {\n  background: var(--va-time-picker-cell-background-color-hover);\n}\n.va-time-picker-column:focus-visible {\n  outline: none;\n}\n.va-time-picker-column:focus-visible .va-time-picker-cell--active {\n  outline: 2px solid var(--va-focus) !important;\n  border-radius: 4px;\n  outline-offset: -2px;\n}';
const _hoisted_1 = ["onClick"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_VaTimePickerColumnCell = resolveComponent("VaTimePickerColumnCell");
  return openBlock(), createElementBlock("div", {
    ref: "rootElement",
    tabindex: "0",
    class: "va-time-picker-column",
    onKeydown: [
      _cache[0] || (_cache[0] = withKeys(withModifiers(($event) => _ctx.makeActiveNext(), ["stop", "prevent"]), ["down"])),
      _cache[1] || (_cache[1] = withKeys(withModifiers(($event) => _ctx.makeActiveNext(5), ["stop", "prevent"]), ["space"])),
      _cache[2] || (_cache[2] = withKeys(withModifiers(($event) => _ctx.makeActivePrev(), ["stop", "prevent"]), ["up"]))
    ],
    style: normalizeStyle(_ctx.styleComputed)
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, (item, index) => {
      return openBlock(), createBlock(_component_VaTimePickerColumnCell, {
        key: item,
        onScrollPassive: _ctx.onScroll,
        onTouchmovePassive: _ctx.onScroll,
        onMousewheelPassive: _ctx.onScroll
      }, {
        default: withCtx(() => [
          createElementVNode("div", {
            class: normalizeClass(["va-time-picker-cell", { "va-time-picker-cell--active": index === _ctx.$props.activeItemIndex }]),
            onClick: ($event) => _ctx.onCellClick(index)
          }, [
            renderSlot(_ctx.$slots, "cell", normalizeProps(guardReactiveProps({ item, index, activeItemIndex: _ctx.activeItemIndex, items: _ctx.items, formattedItem: _ctx.formatCell(item) })), () => [
              createTextVNode(toDisplayString(_ctx.formatCell(item)), 1)
            ])
          ], 10, _hoisted_1)
        ]),
        _: 2
      }, 1032, ["onScrollPassive", "onTouchmovePassive", "onMousewheelPassive"]);
    }), 128))
  ], 36);
}
const _VaTimePickerColumn = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [_style_0]]]);
export {
  _VaTimePickerColumn as _
};
//# sourceMappingURL=VaTimePickerColumn.js.map
