import { _ as _sfc_main } from "./VaColorPalette.vue_vue_type_script_lang.js";
import { resolveComponent, openBlock, createElementBlock, Fragment, renderList, createBlock } from "vue";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
const _style_0 = ".va-color-palette {\n  display: flex;\n  padding-left: 0;\n  margin: 0;\n}\n.va-color-palette > * {\n  margin-right: 0.25rem;\n}\n.va-color-palette > *:last-child {\n  margin-right: 0;\n}";
const _hoisted_1 = ["aria-label"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_color_indicator = resolveComponent("va-color-indicator");
  return openBlock(), createElementBlock("ul", {
    class: "va-color-palette",
    role: "listbox",
    "aria-label": _ctx.tp(_ctx.$props.ariaLabel)
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.palette, (color, index) => {
      return openBlock(), createBlock(_component_va_color_indicator, {
        key: index,
        role: "option",
        "aria-label": _ctx.tp(_ctx.$props.ariaIndicatorLabel, { color }),
        "aria-selected": _ctx.isSelected(color),
        tabindex: "0",
        modelValue: _ctx.isSelected(color),
        color,
        square: _ctx.indicator === "square",
        "onUpdate:modelValue": ($event) => _ctx.valueComputed = color
      }, null, 8, ["aria-label", "aria-selected", "modelValue", "color", "square", "onUpdate:modelValue"]);
    }), 128))
  ], 8, _hoisted_1);
}
const _VaColorPalette = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [_style_0]]]);
export {
  _VaColorPalette as _
};
//# sourceMappingURL=VaColorPalette.js.map
