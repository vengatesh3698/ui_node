import { defineComponent, shallowRef, watch, nextTick, computed, useCssVars } from "vue";
import { V as VaIcon } from "../va-icon/index.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useTranslation } from "../../composables/useTranslation.js";
import { u as useBem } from "../../composables/useBem.js";
const __default__ = defineComponent({
  name: "VaStepperStepButton",
  components: { VaIcon },
  props: {
    modelValue: { type: Number, required: true },
    step: {
      type: Object,
      required: true
    },
    color: { type: String, required: true },
    stepIndex: { type: Number, required: true },
    navigationDisabled: { type: Boolean, required: true },
    nextDisabled: { type: Boolean, required: true },
    focus: { type: Object, required: true },
    stepControls: { type: Object, required: true }
  },
  emits: ["update:modelValue"],
  setup(props) {
    const stepElement = shallowRef();
    const { getColor } = useColors();
    const stepperColor = getColor(props.color);
    const isNextStepDisabled = (index) => props.nextDisabled && index > props.modelValue;
    const { t } = useTranslation();
    const computedClass = useBem("va-stepper__step-button", () => ({
      active: props.modelValue >= props.stepIndex,
      disabled: props.step.disabled || isNextStepDisabled(props.stepIndex),
      "navigation-disabled": props.navigationDisabled
    }));
    watch(() => props.focus, () => {
      if (props.focus.trigger) {
        nextTick(() => {
          var _a;
          return (_a = stepElement.value) == null ? void 0 : _a.focus();
        });
      }
    }, { deep: true });
    return {
      stepElement,
      isNextStepDisabled,
      stepperColor,
      getColor,
      computedClass,
      ariaAttributesComputed: computed(() => ({
        tabindex: props.focus.stepIndex === props.stepIndex && !props.navigationDisabled ? 0 : void 0,
        "aria-disabled": props.step.disabled || isNextStepDisabled(props.stepIndex) ? true : void 0,
        "aria-current": props.modelValue === props.stepIndex ? t("step") : void 0
      }))
    };
  }
});
const __injectCSSVars__ = () => {
  useCssVars((_ctx) => ({
    "04125dfc": _ctx.stepperColor
  }));
};
const __setup__ = __default__.setup;
__default__.setup = __setup__ ? (props, ctx) => {
  __injectCSSVars__();
  return __setup__(props, ctx);
} : __injectCSSVars__;
export {
  __default__ as _
};
//# sourceMappingURL=VaStepperStepButton.vue_vue_type_script_lang.js.map
