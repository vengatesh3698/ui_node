import { _ as _sfc_main } from "./VaCounter.vue_vue_type_script_lang.js";
import { resolveComponent, openBlock, createBlock, mergeProps, withKeys, withModifiers, createSlots, withCtx, createElementBlock, createCommentVNode, createElementVNode, normalizeStyle, renderSlot, normalizeProps, guardReactiveProps, createVNode } from "vue";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
const _style_0 = ":root,\n:host {\n  --va-counter-button-inner-padding: 6px;\n  --va-counter-button-outer-padding: 8px;\n}\n.va-counter.va-input-wrapper {\n  min-width: unset;\n  flex: none;\n}\n.va-counter.va-input-wrapper .va-input-wrapper__field {\n  width: unset;\n}\n.va-counter .va-input-wrapper__field > *,\n.va-counter .va-input-wrapper__container > * {\n  margin-right: 0;\n}\n.va-counter.va-counter--input-square .va-input-wrapper__field {\n  border-radius: 0;\n  border-left: none;\n  border-right: none;\n}\n.va-counter.va-counter--input-square .va-counter__prepend-wrapper {\n  z-index: 1;\n}\n.va-counter.va-counter--input-square .va-counter__prepend-wrapper .va-counter__button-decrease {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.va-counter.va-counter--input-square .va-counter__prepend-wrapper .va-counter__button-decrease:not(.va-button--square) {\n  width: unset;\n}\n.va-counter.va-counter--input-square .va-counter__prepend-wrapper .va-counter__button-decrease:not(.va-button--square) .va-button__content {\n  padding-right: var(--va-counter-button-inner-padding);\n  padding-left: var(--va-counter-button-outer-padding);\n}\n.va-counter.va-counter--input-square .va-counter__append-wrapper {\n  z-index: 1;\n}\n.va-counter.va-counter--input-square .va-counter__append-wrapper .va-counter__button-increase {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.va-counter.va-counter--input-square .va-counter__append-wrapper .va-counter__button-increase:not(.va-button--square) {\n  width: unset;\n}\n.va-counter.va-counter--input-square .va-counter__append-wrapper .va-counter__button-increase:not(.va-button--square) .va-button__content {\n  padding-left: var(--va-counter-button-inner-padding);\n  padding-right: var(--va-counter-button-outer-padding);\n}\n.va-counter .va-counter__prepend-wrapper .va-counter__button-decrease .va-button__content,\n.va-counter .va-counter__prepend-wrapper .va-counter__button-increase .va-button__content,\n.va-counter .va-counter__append-wrapper .va-counter__button-decrease .va-button__content,\n.va-counter .va-counter__append-wrapper .va-counter__button-increase .va-button__content {\n  padding: unset;\n}\n.va-counter .va-counter__content-wrapper {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n}\n.va-counter .va-counter__content-wrapper:focus-visible {\n  outline: none;\n}\n.va-counter .va-input__content__input {\n  text-align: center;\n}\n.va-counter .va-input__content__input::-webkit-outer-spin-button, .va-counter .va-input__content__input::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n.va-counter .va-input__content__input[type=number] {\n  -moz-appearance: textfield;\n}\n.va-counter .va-input-wrapper__field {\n  align-items: stretch;\n  padding: 0;\n}\n.va-counter .va-input-wrapper__field .va-input-wrapper__text,\n.va-counter .va-input-wrapper__field .va-input__container {\n  padding-right: 0;\n}\n.va-counter__prepend-inner, .va-counter__append-inner {\n  display: flex;\n  align-items: stretch;\n  height: 100%;\n  margin: 0 0.5rem;\n}";
const _hoisted_1 = {
  ref: "input",
  tabindex: "0",
  class: "va-counter__content-wrapper"
};
const _hoisted_2 = ["value"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_input_wrapper = resolveComponent("va-input-wrapper");
  return openBlock(), createBlock(_component_va_input_wrapper, mergeProps({ class: "va-counter" }, { ..._ctx.fieldListeners, ..._ctx.inputWrapperPropsComputed }, {
    class: _ctx.classComputed,
    style: _ctx.styleComputed,
    focused: _ctx.isFocused,
    onKeydown: [
      withKeys(withModifiers(_ctx.increaseCount, ["prevent"]), ["up"]),
      withKeys(withModifiers(_ctx.increaseCount, ["prevent"]), ["right"]),
      withKeys(withModifiers(_ctx.decreaseCount, ["prevent"]), ["down"]),
      withKeys(withModifiers(_ctx.decreaseCount, ["prevent"]), ["left"])
    ]
  }), createSlots({
    default: withCtx(() => [
      !_ctx.$slots.content ? (openBlock(), createElementBlock("input", mergeProps({
        key: 0,
        ref: "input",
        class: "va-input__content__input",
        type: "number",
        inputmode: "decimal"
      }, { ..._ctx.inputAttributesComputed, ..._ctx.inputListeners }, {
        value: _ctx.valueComputed,
        onInput: _cache[4] || (_cache[4] = (...args) => _ctx.setCountInput && _ctx.setCountInput(...args)),
        onChange: _cache[5] || (_cache[5] = (...args) => _ctx.setCountChange && _ctx.setCountChange(...args))
      }), null, 16, _hoisted_2)) : createCommentVNode("", true)
    ]),
    _: 2
  }, [
    _ctx.$props.buttons ? {
      name: "prepend",
      fn: withCtx((slotScope) => [
        createElementVNode("div", {
          class: "va-counter__prepend-wrapper",
          style: normalizeStyle({ marginRight: _ctx.marginComputed }),
          onMousedown: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.focus && _ctx.focus(...args), ["prevent"]))
        }, [
          renderSlot(_ctx.$slots, "decreaseAction", normalizeProps(guardReactiveProps({ ...slotScope, decreaseCount: _ctx.decreaseCount })), () => [
            createVNode(_component_va_button, mergeProps({
              class: "va-counter__button-decrease",
              "aria-label": _ctx.tp(_ctx.$props.ariaDecreaseLabel)
            }, _ctx.decreaseButtonProps, { ref: "decreaseButtonRef" }), null, 16, ["aria-label"])
          ])
        ], 36)
      ]),
      key: "0"
    } : {
      name: "prependInner",
      fn: withCtx((slotScope) => [
        createElementVNode("div", {
          class: "va-counter__prepend-inner",
          onMousedown: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.focus && _ctx.focus(...args), ["prevent"]))
        }, [
          renderSlot(_ctx.$slots, "decreaseAction", normalizeProps(guardReactiveProps({ ...slotScope, decreaseCount: _ctx.decreaseCount })), () => [
            createVNode(_component_va_button, mergeProps(_ctx.decreaseIconProps, { ref: "decreaseButtonRef" }), null, 16)
          ])
        ], 32)
      ]),
      key: "1"
    },
    _ctx.$props.buttons ? {
      name: "append",
      fn: withCtx((slotScope) => [
        createElementVNode("div", {
          class: "va-counter__append-wrapper",
          style: normalizeStyle({ marginLeft: _ctx.marginComputed }),
          onMousedown: _cache[2] || (_cache[2] = withModifiers((...args) => _ctx.focus && _ctx.focus(...args), ["prevent"]))
        }, [
          renderSlot(_ctx.$slots, "increaseAction", normalizeProps(guardReactiveProps({ ...slotScope, increaseCount: _ctx.increaseCount })), () => [
            createVNode(_component_va_button, mergeProps({
              class: "va-counter__button-increase",
              "aria-label": _ctx.tp(_ctx.$props.ariaIncreaseLabel)
            }, _ctx.increaseButtonProps, { ref: "increaseButtonRef" }), null, 16, ["aria-label"])
          ])
        ], 36)
      ]),
      key: "2"
    } : {
      name: "appendInner",
      fn: withCtx((slotScope) => [
        createElementVNode("div", {
          class: "va-counter__append-inner",
          onMousedown: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.focus && _ctx.focus(...args), ["prevent"]))
        }, [
          renderSlot(_ctx.$slots, "increaseAction", normalizeProps(guardReactiveProps({ ...slotScope, increaseCount: _ctx.increaseCount })), () => [
            createVNode(_component_va_button, mergeProps(_ctx.increaseIconProps, { ref: "increaseButtonRef" }), null, 16)
          ])
        ], 32)
      ]),
      key: "3"
    },
    _ctx.$slots.content ? {
      name: "default",
      fn: withCtx((slotScope) => [
        createElementVNode("div", _hoisted_1, [
          renderSlot(_ctx.$slots, "content", normalizeProps(guardReactiveProps({ ...slotScope, value: Number(_ctx.valueComputed) })))
        ], 512)
      ]),
      key: "4"
    } : void 0
  ]), 1040, ["class", "style", "focused", "onKeydown"]);
}
const _VaCounter = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [_style_0]]]);
export {
  _VaCounter as _
};
//# sourceMappingURL=VaCounter.js.map
