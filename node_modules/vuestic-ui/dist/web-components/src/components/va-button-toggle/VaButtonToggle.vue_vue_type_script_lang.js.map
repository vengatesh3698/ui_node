{"version":3,"file":"VaButtonToggle.vue_vue_type_script_lang.js","sources":["../../../../../src/components/va-button-toggle/VaButtonToggle.vue"],"sourcesContent":["<template>\n  <va-button-group\n    class=\"va-button-toggle\"\n    v-bind=\"buttonGroupPropsComputed\"\n  >\n    <va-button\n      v-for=\"option in options\"\n      :key=\"getTrackBy(option)\"\n      :aria-pressed=\"isToggled(option)\"\n      v-bind.prop=\"getButtonProps(option)\"\n      @click=\"changeValue(option)\"\n    >\n      {{ getText(option) }}\n    </va-button>\n  </va-button-group>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\nimport omit from 'lodash/omit.js'\n\nimport { extractComponentProps } from '../../utils/component-options'\n\nimport { useComponentPresetProp, useColors, useSelectableList, useSelectableListProps } from '../../composables'\n\nimport { VaButton } from '../va-button'\nimport { VaButtonGroup } from '../va-button-group'\n\nimport type { ButtonOption } from './types'\nimport type { StringOrFunction } from '../../composables'\n\nconst VaButtonGroupProps = extractComponentProps(VaButtonGroup)\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    ...VaButtonGroupProps,\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    modelValue: { type: [String, Number, Boolean], default: '' },\n    options: {\n      type: Array as PropType<ButtonOption[]>,\n      required: true,\n    },\n    activeButtonTextColor: { type: String },\n    toggleColor: { type: String, default: '' },\n\n    textBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'label' },\n    valueBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'value' },\n  },\n\n  setup (props, { emit }) {\n    const { getText, getTrackBy } = useSelectableList(props)\n    const { getColor, shiftHSLAColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n\n    const isToggled = (value: any) => getTrackBy(value) === props.modelValue\n\n    const activeButtonColor = computed(() => {\n      if (props.toggleColor) { return getColor(props.toggleColor) }\n      return shiftHSLAColor(colorComputed.value, { l: props.plain ? -16 : -6 })\n    })\n\n    const activeButtonBackgroundOpacityComputed = computed(() => {\n      if (!props.preset || props.preset === 'default') { return {} }\n      return { backgroundOpacity: props.pressedOpacity }\n    })\n\n    const activeButtonPropsComputed = computed(() => ({\n      color: activeButtonColor.value,\n      textColor: props.activeButtonTextColor,\n      ...activeButtonBackgroundOpacityComputed.value,\n    }))\n\n    const getButtonProps = (option: ButtonOption = {} as ButtonOption) => {\n      const iconsProps = { icon: option.icon, iconRight: option.iconRight }\n\n      if (!isToggled(option)) { return iconsProps }\n      return {\n        ...(isToggled(option) && activeButtonPropsComputed.value),\n        ...iconsProps,\n      }\n    }\n\n    const buttonGroupPropsComputed = computed(() =>\n      omit(props, ['modelValue', 'options', 'activeButtonTextColor', 'toggleColor']),\n    )\n\n    const changeValue = (value: any) => emit('update:modelValue', getTrackBy(value))\n\n    return {\n      buttonGroupPropsComputed,\n      getButtonProps,\n      changeValue,\n      isToggled,\n      getText,\n      getTrackBy,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import '../../styles/resources';\n\n.va-button-toggle {\n  .va-button {\n    @include keyboard-focus-outline($offset: -2px);\n\n    height: auto;\n  }\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;AA+BA,MAAM,qBAAqB,sBAAsB,aAAa;AAE9D,MAAA,YAAe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,YAAY;AAAA,IACV;AAAA,IACA;AAAA,EACF;AAAA,EACA,OAAO,CAAC,mBAAmB;AAAA,EAC3B,OAAO;AAAA,IACL,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,YAAY,EAAE,MAAM,CAAC,QAAQ,QAAQ,OAAO,GAAG,SAAS,GAAG;AAAA,IAC3D,SAAS;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,uBAAuB,EAAE,MAAM,OAAO;AAAA,IACtC,aAAa,EAAE,MAAM,QAAQ,SAAS,GAAG;AAAA,IAEzC,QAAQ,EAAE,MAAM,CAAC,QAAQ,QAAQ,GAAiC,SAAS,QAAQ;AAAA,IACnF,SAAS,EAAE,MAAM,CAAC,QAAQ,QAAQ,GAAiC,SAAS,QAAQ;AAAA,EACtF;AAAA,EAEA,MAAO,OAAO,EAAE,QAAQ;AACtB,UAAM,EAAE,SAAS,WAAW,IAAI,kBAAkB,KAAK;AACvD,UAAM,EAAE,UAAU,eAAe,IAAI,UAAU;AAC/C,UAAM,gBAAgB,SAAS,MAAM,SAAS,MAAM,KAAK,CAAC;AAE1D,UAAM,YAAY,CAAC,UAAe,WAAW,KAAK,MAAM,MAAM;AAExD,UAAA,oBAAoB,SAAS,MAAM;AACvC,UAAI,MAAM,aAAa;AAAS,eAAA,SAAS,MAAM,WAAW;AAAA,MAAE;AACrD,aAAA,eAAe,cAAc,OAAO,EAAE,GAAG,MAAM,QAAQ,MAAM,GAAI,CAAA;AAAA,IAAA,CACzE;AAEK,UAAA,wCAAwC,SAAS,MAAM;AAC3D,UAAI,CAAC,MAAM,UAAU,MAAM,WAAW,WAAW;AAAE,eAAO;MAAG;AACtD,aAAA,EAAE,mBAAmB,MAAM;IAAe,CAClD;AAEK,UAAA,4BAA4B,SAAS,OAAO;AAAA,MAChD,OAAO,kBAAkB;AAAA,MACzB,WAAW,MAAM;AAAA,MACjB,GAAG,sCAAsC;AAAA,IACzC,EAAA;AAEF,UAAM,iBAAiB,CAAC,SAAuB,OAAuB;AACpE,YAAM,aAAa,EAAE,MAAM,OAAO,MAAM,WAAW,OAAO;AAEtD,UAAA,CAAC,UAAU,MAAM,GAAG;AAAS,eAAA;AAAA,MAAW;AACrC,aAAA;AAAA,QACL,GAAI,UAAU,MAAM,KAAK,0BAA0B;AAAA,QACnD,GAAG;AAAA,MAAA;AAAA,IACL;AAGF,UAAM,2BAA2B;AAAA,MAAS,MACxC,KAAK,OAAO,CAAC,cAAc,WAAW,yBAAyB,aAAa,CAAC;AAAA,IAAA;AAG/E,UAAM,cAAc,CAAC,UAAe,KAAK,qBAAqB,WAAW,KAAK,CAAC;AAExE,WAAA;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAAA,EAEJ;AACF,CAAC;"}