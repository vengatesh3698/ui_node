{"version":3,"file":"VaYearPicker.js","sources":["../../../../../../../src/components/va-date-picker/components/VaYearPicker/VaYearPicker.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"rootNode\"\n    class=\"va-year-picker\"\n    v-bind=\"containerAttributes\"\n    @keydown.space.prevent\n  >\n    <va-date-picker-cell\n      v-for=\"(year, index) in years\"\n      :key=\"year.toString()\"\n      :in-range=\"isInRange(year)\"\n      :selected=\"isSelected(year)\"\n      :disabled=\"isYearDisabled(year)\"\n      :today=\"isToday(year)\"\n      :focused=\"focusedCellIndex === index\"\n      :highlight-today=\"highlightToday\"\n      :readonly=\"$props.readonly\"\n      :color=\"color\"\n      @click=\"onClick(year); focusedCellIndex = index\"\n      @mouseenter=\"hoveredIndex = index\"\n      @mouseleave=\"hoveredIndex = -1\"\n    >\n      {{ year.getFullYear() }}\n    </va-date-picker-cell>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, toRefs, onMounted, computed, watch, shallowRef } from 'vue'\n\nimport { createYearDate } from '../../utils/date-utils'\nimport { useGridKeyboardNavigation } from '../../hooks/grid-keyboard-navigation'\nimport { useDatePicker } from '../../hooks/use-picker'\n\nimport { DatePickerMode, DatePickerModelValue, DatePickerView } from '../../types'\n\nimport VaDatePickerCell from '../VaDatePickerCell.vue'\n\nexport default defineComponent({\n  name: 'VaYearPicker',\n  components: { VaDatePickerCell },\n\n  props: {\n    modelValue: { type: [Date, Array, Object] as PropType<DatePickerModelValue> },\n    allowedYears: { type: Function as PropType<(date: Date) => boolean>, default: undefined },\n    highlightToday: { type: Boolean, default: true },\n    startYear: { type: Number, default: 1970 },\n    mode: { type: String as PropType<DatePickerMode>, default: 'auto' },\n    view: { type: Object as PropType<DatePickerView>, default: () => ({ type: 'year' }) },\n    endYear: { type: Number, default: () => new Date().getFullYear() + 50 },\n    readonly: { type: Boolean, default: false },\n    color: { type: String, default: 'primary' },\n  },\n\n  emits: ['update:modelValue', 'hover:year', 'click:year'],\n\n  setup (props, { emit }) {\n    const rootNode = shallowRef<HTMLElement>()\n\n    const { view } = toRefs(props)\n\n    const generateYearsArray = (start: number, end: number) => {\n      const yearsCount = end - start + 1\n      return Array.from(Array(yearsCount).keys())\n        .map((i) => createYearDate(start + i))\n    }\n\n    const years = computed(() => generateYearsArray(props.startYear, props.endYear))\n\n    const scrollIntoYearIndex = (index: number) => {\n      if (!rootNode.value) { return }\n\n      const scrollHeight = rootNode.value.scrollHeight\n      const rootNodeHeight = rootNode.value.offsetHeight\n      const currentYearOffset = scrollHeight / years.value.length * index\n      const cellSize = scrollHeight / years.value.length\n      const relativeScrollPosition = currentYearOffset - rootNode.value.scrollTop\n\n      if (relativeScrollPosition < 0) {\n        // First element in view\n        rootNode.value.scrollTo({ top: currentYearOffset })\n      } else if (relativeScrollPosition > rootNodeHeight) {\n        // Last element in view\n        rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight + cellSize })\n      }\n    }\n\n    const scrollIntoYearIndexCenter = (index: number) => {\n      if (!rootNode.value) { return }\n\n      const scrollHeight = rootNode.value.scrollHeight\n      const rootNodeHeight = rootNode.value.offsetHeight\n      const currentYearOffset = scrollHeight / years.value.length * index\n\n      rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight / 2 })\n    }\n\n    onMounted(() => {\n      const currentYearIndex = years.value.findIndex((date) => date.getFullYear() === view.value.year)\n\n      scrollIntoYearIndexCenter(currentYearIndex)\n    })\n\n    const {\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n    } = useDatePicker('year', years, props, emit)\n\n    const isYearDisabled = (year: Date) => props.allowedYears === undefined ? false : !props.allowedYears(year)\n\n    const {\n      focusedCellIndex, containerAttributes,\n    } = useGridKeyboardNavigation({\n      rowSize: 1,\n      start: 0,\n      end: years.value.length,\n      onFocusIndex: computed(() => years.value.findIndex((date) => date.getFullYear() === view.value.year)),\n      onSelected: (selectedIndex) => onClick(years.value[selectedIndex]),\n    })\n\n    watch(focusedCellIndex, (index) => index !== -1 && scrollIntoYearIndex(index))\n    watch(focusedCellIndex, (index) => { hoveredIndex.value = index })\n    watch(hoveredIndex, (index) => { focusedCellIndex.value = index })\n\n    return {\n      hoveredIndex,\n      years,\n      rootNode,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n      isYearDisabled,\n      focusedCellIndex,\n      containerAttributes,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-year-picker {\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n  grid-gap: var(--va-date-picker-cell-gap);\n  max-height: 100%;\n  position: relative;\n}\n</style>\n"],"names":["_resolveComponent","_openBlock","_createElementBlock","_mergeProps","_withKeys","_withModifiers","_Fragment","_renderList","_createBlock"],"mappings":";;;;;yCACEA,iBAuBM,qBAAA;AArBC,SAAAC,UAAiB,GAAAC,mBAAA,OAAAC,WAAA;AAAA,IACd,KAAA;AAAA,IACP,OAAA;AAAA,EAAA,GAAA,KAAA,qBAAA;AAAA,IAED,WAAA,OAAA,CAAA,MAAA,OAAA,CAAA,IAAAC,SAgBsBC,cAfI,MAAA;AAAA,IAAhB,GAAA,CAAA,SAAA,CAAA,GAAI,CAAE,OAAK,CAAA;AAAA,EAAA,CAAA,GAAA;AAAA,KACbJ,UAAA,IAAK,GAAQC,mBAAAI,UAAA,MAAAC,WAAA,KAAA,OAAA,CAAA,MAAA,UAAA;AAClB,aAAAN,UAAA,GAAwBO,YAAA,gCAAA;AAAA,QACxB,KAAU,KAAA,SAAA;AAAA,QACV,YAAU,KAAe,UAAA,IAAA;AAAA,QACzB,UAAO,KAAY,WAAA,IAAA;AAAA,QACnB,UAAS,KAAgB,eAAA,IAAA;AAAA,QACzB,OAAiB,KAAA,QAAA,IAAA;AAAA,QACjB,SAAQ,KAAE,qBAAe;AAAA,QACzB,mBAAY,KAAA;AAAA,QACZ,UAAK,KAAE,OAAA;AAAA,QACP,OAAU,KAAA;AAAA,QACV,SAAU,CAAA,WAAA;AAAA,eAAA,QAAA,IAAA;AAAE,eAAA,mBAAA;AAAA,QAAY;AAAA,QAAA,cAAA,CAAA,WAAA,KAAA,eAAA;AAAA,QAED,cAAA,OAAA,CAAA,MAAA,OAAA,CAAA,IAAA,CAAA,WAAA,KAAA,eAAA;AAAA,MAAA,GAAA;AAAA;;;;;;;;;"}