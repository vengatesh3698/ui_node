import { _ as _sfc_main } from "./VaDatePicker.vue_vue_type_script_lang.js";
import { resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createVNode, mergeProps, createSlots, renderList, withCtx, renderSlot, normalizeProps, guardReactiveProps, createElementVNode, createBlock, createCommentVNode } from "vue";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
const _style_0 = ':root,\n:host {\n  /* Font */\n  --va-date-picker-font-style: normal;\n  --va-date-picker-font-weight: 600;\n  --va-date-picker-font-size: 12px;\n  --va-date-picker-line-height: 1.25;\n  --va-date-picker-weekday-font-size: 9px;\n  /* Colors */\n  --va-date-picker-color: var(--va-primary);\n  --va-date-picker-text-color: inherit;\n  /* Sizes */\n  --va-date-picker-cell-size: 32px;\n  --va-date-picker-cell-gap: 2px;\n  --va-date-picker-cell-radius: 4px;\n  /* Selected cell */\n  --va-date-picker-selected-text: var(--va-text-inverted);\n  --va-date-picker-selected-background: var(--va-date-picker-color);\n  /* Today cell */\n  --va-date-picker-today-background: var(--va-date-picker-color);\n  --va-date-picker-today-background-opacity: 0.8;\n  /* Weekend */\n  --va-date-picker-weekends-color: var(--va-danger);\n  /* Focused */\n  --va-date-picker-focused-border-color: var(--va-date-picker-color);\n  /* Opacity */\n  --va-date-picker-cell-opacity: 0.5;\n  --va-date-picker-cell-background-opacity-hover: 0.1;\n  --va-date-picker-cell-background-opacity-in-range: 0.2;\n  --va-date-picker-cell-selected-background-opacity-hover: 0.8;\n}\n.va-date-picker {\n  --va-date-picker-content-height: calc(var(--va-date-picker-cell-size) * 7 + var(--va-date-picker-cell-gap) * 6);\n  width: calc(var(--va-date-picker-cell-size) * 7 + var(--va-date-picker-cell-gap) * 6);\n  font-family: var(--va-font-family);\n  font-style: var(--va-date-picker-font-style);\n  font-weight: var(--va-date-picker-font-weight);\n  font-size: var(--va-date-picker-font-size);\n  line-height: var(--va-date-picker-line-height);\n}\n.va-date-picker__picker-wrapper {\n  height: var(--va-date-picker-content-height);\n}\n.va-date-picker_without-week-days {\n  --va-date-picker-content-height: calc(var(--va-date-picker-cell-size) * 6 + var(--va-date-picker-cell-gap) * 6);\n}\n.va-date-picker_mobile .va-day-picker,\n.va-date-picker_mobile .va-month-picker,\n.va-date-picker_mobile .va-year-picker {\n  height: 100%;\n}\n.va-date-picker_disabled {\n  opacity: 0.4;\n  position: relative;\n}\n.va-date-picker_disabled::before {\n  content: "";\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  z-index: 100;\n}\n.va-date-picker-header {\n  padding-bottom: 0.25rem;\n}';
const _hoisted_1 = { class: "va-date-picker__picker-wrapper" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_date_picker_header = resolveComponent("va-date-picker-header");
  const _component_va_day_picker = resolveComponent("va-day-picker");
  const _component_va_month_picker = resolveComponent("va-month-picker");
  const _component_va_year_picker = resolveComponent("va-year-picker");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-date-picker", _ctx.classComputed]),
    style: normalizeStyle(_ctx.styleComputed)
  }, [
    createVNode(_component_va_date_picker_header, mergeProps(_ctx.headerProps, {
      view: _ctx.syncView,
      "onUpdate:view": _cache[0] || (_cache[0] = ($event) => _ctx.syncView = $event),
      textColor: _ctx.textColorComputed
    }), createSlots({ _: 2 }, [
      renderList(_ctx.$slots, (_, name) => {
        return {
          name,
          fn: withCtx((bind) => [
            renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(bind)))
          ])
        };
      })
    ]), 1040, ["view", "textColor"]),
    createElementVNode("div", _hoisted_1, [
      _ctx.syncView.type === "day" ? (openBlock(), createBlock(_component_va_day_picker, mergeProps({
        key: 0,
        ref: "currentPicker"
      }, _ctx.dayPickerProps, {
        "model-value": _ctx.valueComputed,
        view: _ctx.syncView,
        readonly: _ctx.$props.disabled || _ctx.isPickerReadonly("day"),
        "onUpdate:modelValue": _ctx.onDayModelValueUpdate,
        "onHover:day": _cache[1] || (_cache[1] = (value) => _ctx.$emit("hover:day", value)),
        "onClick:day": _cache[2] || (_cache[2] = (value) => _ctx.$emit("click:day", value))
      }), createSlots({ _: 2 }, [
        renderList(_ctx.$slots, (_, name) => {
          return {
            name,
            fn: withCtx((bind) => [
              renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(bind)))
            ])
          };
        })
      ]), 1040, ["model-value", "view", "readonly", "onUpdate:modelValue"])) : createCommentVNode("", true),
      _ctx.syncView.type === "month" ? (openBlock(), createBlock(_component_va_month_picker, mergeProps({
        key: 1,
        ref: "currentPicker"
      }, _ctx.monthPickerProps, {
        view: _ctx.syncView,
        "model-value": _ctx.valueComputed,
        readonly: _ctx.$props.disabled || _ctx.isPickerReadonly("month"),
        "onUpdate:modelValue": _ctx.onMonthModelValueUpdate,
        "onHover:month": _cache[3] || (_cache[3] = (value) => _ctx.$emit("hover:month", value)),
        "onClick:month": _ctx.onMonthClick
      }), createSlots({ _: 2 }, [
        renderList(_ctx.$slots, (_, name) => {
          return {
            name,
            fn: withCtx((bind) => [
              renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(bind)))
            ])
          };
        })
      ]), 1040, ["view", "model-value", "readonly", "onUpdate:modelValue", "onClick:month"])) : createCommentVNode("", true),
      _ctx.syncView.type === "year" ? (openBlock(), createBlock(_component_va_year_picker, mergeProps({
        key: 2,
        ref: "currentPicker"
      }, _ctx.yearPickerProps, {
        view: _ctx.syncView,
        "model-value": _ctx.valueComputed,
        readonly: _ctx.$props.disabled || _ctx.isPickerReadonly("year"),
        "onHover:year": _cache[4] || (_cache[4] = (value) => _ctx.$emit("hover:year", value)),
        "onUpdate:modelValue": _ctx.onYearModelValueUpdate,
        "onClick:year": _ctx.onYearClick
      }), createSlots({ _: 2 }, [
        renderList(_ctx.$slots, (_, name) => {
          return {
            name,
            fn: withCtx((bind) => [
              renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(bind)))
            ])
          };
        })
      ]), 1040, ["view", "model-value", "readonly", "onUpdate:modelValue", "onClick:year"])) : createCommentVNode("", true)
    ])
  ], 6);
}
const _VaDatePicker = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["styles", [_style_0]]]);
export {
  _VaDatePicker as _
};
//# sourceMappingURL=VaDatePicker.js.map
