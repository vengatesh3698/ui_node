import { computed, shallowRef, onMounted } from "vue";
import { u as useHTMLElement } from "./useHTMLElement.js";
import { u as useCaptureEvent } from "./useCaptureEvent.js";
import { u as useCurrentElement } from "./useCurrentElement.js";
const useActiveElement = () => {
  const activeEl = shallowRef();
  const updateActiveElement = () => {
    activeEl.value = document.activeElement;
  };
  onMounted(updateActiveElement);
  useCaptureEvent("focus", updateActiveElement);
  useCaptureEvent("blur", updateActiveElement);
  return activeEl;
};
const useFocusDeep = (el) => {
  const focused = useActiveElement();
  const current = useCurrentElement(el ? useHTMLElement(el) : void 0);
  let previouslyFocusedElement = null;
  return computed({
    get() {
      var _a;
      if (!focused.value) {
        return false;
      }
      if (focused.value === current.value) {
        return true;
      }
      const isFocused = (_a = current.value) == null ? void 0 : _a.contains(focused.value);
      if (isFocused) {
        previouslyFocusedElement = focused.value;
      }
      return isFocused;
    },
    set(value) {
      var _a;
      let target = previouslyFocusedElement ?? current.value;
      if (!((_a = current.value) == null ? void 0 : _a.contains(target))) {
        target = current.value;
      }
      if (value) {
        target == null ? void 0 : target.focus();
      } else {
        target == null ? void 0 : target.blur();
      }
    }
  });
};
export {
  useFocusDeep as u
};
//# sourceMappingURL=useFocusDeep.js.map
