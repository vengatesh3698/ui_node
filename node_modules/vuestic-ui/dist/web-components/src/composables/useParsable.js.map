{"version":3,"file":"useParsable.js","sources":["../../../../src/composables/useParsable.ts"],"sourcesContent":["import { computed, Ref } from 'vue'\n\ntype Not<P, N> = P extends N ? never : P\n\nexport const useParsable = <Text extends string | number, Original, Value extends Not<Original, Text>>(\n  parsable: Ref<Original>,\n  parse: (t: Text) => Value,\n  format: (v: Value) => Text,\n) => {\n  const text = computed({\n    get () {\n      const value = parsable.value\n      if (typeof value === 'string') {\n        return value as any\n      }\n      return format(value as unknown as Value)\n    },\n    set (v: Text) {\n      if (typeof parsable.value === 'string') {\n        parsable.value = v as any\n      } else {\n        parsable.value = parse(v)\n      }\n    },\n  })\n\n  const value = computed<Value>({\n    get () {\n      if (typeof parsable.value === 'string') {\n        return parse(parsable.value as any)\n      }\n\n      return parsable.value as unknown as Value\n    },\n    set (v: Value) {\n      if (typeof parsable.value === 'string') {\n        parsable.value = format(v as any) as any\n      } else {\n        parsable.value = v\n      }\n    },\n  })\n\n  return {\n    text,\n    value,\n  }\n}\n"],"names":["value"],"mappings":";AAIO,MAAM,cAAc,CACzB,UACA,OACA,WACG;AACH,QAAM,OAAO,SAAS;AAAA,IACpB,MAAO;AACL,YAAMA,SAAQ,SAAS;AACnB,UAAA,OAAOA,WAAU,UAAU;AACtBA,eAAAA;AAAAA,MACT;AACA,aAAO,OAAOA,MAAyB;AAAA,IACzC;AAAA,IACA,IAAK,GAAS;AACR,UAAA,OAAO,SAAS,UAAU,UAAU;AACtC,iBAAS,QAAQ;AAAA,MAAA,OACZ;AACI,iBAAA,QAAQ,MAAM,CAAC;AAAA,MAC1B;AAAA,IACF;AAAA,EAAA,CACD;AAED,QAAM,QAAQ,SAAgB;AAAA,IAC5B,MAAO;AACD,UAAA,OAAO,SAAS,UAAU,UAAU;AAC/B,eAAA,MAAM,SAAS,KAAY;AAAA,MACpC;AAEA,aAAO,SAAS;AAAA,IAClB;AAAA,IACA,IAAK,GAAU;AACT,UAAA,OAAO,SAAS,UAAU,UAAU;AAC7B,iBAAA,QAAQ,OAAO,CAAQ;AAAA,MAAA,OAC3B;AACL,iBAAS,QAAQ;AAAA,MACnB;AAAA,IACF;AAAA,EAAA,CACD;AAEM,SAAA;AAAA,IACL;AAAA,IACA;AAAA,EAAA;AAEJ;"}