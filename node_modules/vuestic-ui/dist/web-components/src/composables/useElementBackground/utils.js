import { g as getWindow } from "../../utils/ssr.js";
import { i as isDev } from "../../utils/env.js";
import { l as isCSSVariable } from "../../services/color/utils.js";
const window = getWindow();
const getCSSVariableNameFromDeclaration = (color) => color.slice(4, -1);
const getElementBackgroundFromCSS = (el) => {
  const color = [...el.ownerDocument.styleSheets].filter((s) => {
    try {
      return s.cssRules;
    } catch {
      return false;
    }
  }).map((s) => [...s.cssRules || []]).flat().reduce((bg, cssRule) => {
    const { selectorText } = cssRule;
    try {
      if (!el.matches(selectorText)) {
        return bg;
      }
    } catch (error) {
      if (isDev) {
        console.warn(error, selectorText);
      }
    }
    if (cssRule instanceof CSSStyleRule) {
      return cssRule.style.background || cssRule.style.backgroundColor || bg;
    }
    return bg;
  }, "").trim();
  if (isCSSVariable(color)) {
    return window == null ? void 0 : window.getComputedStyle(el).getPropertyValue(getCSSVariableNameFromDeclaration(color)).trim();
  }
  return color;
};
const EMPTY_TRANSITION = "all 0s ease 0s";
const getElementBackground = (element) => {
  const computedStyle = window == null ? void 0 : window.getComputedStyle(element);
  if (!computedStyle) {
    return;
  }
  if (computedStyle.transition.trim() !== EMPTY_TRANSITION) {
    return getElementBackgroundFromCSS(element);
  }
  return computedStyle.backgroundColor;
};
export {
  getElementBackground as g
};
//# sourceMappingURL=utils.js.map
