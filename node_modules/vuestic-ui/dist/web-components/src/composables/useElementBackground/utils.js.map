{"version":3,"file":"utils.js","sources":["../../../../../src/composables/useElementBackground/utils.ts"],"sourcesContent":["import { getWindow } from '../../utils/ssr'\nimport { isCSSVariable } from '../useColors'\nimport { isDev } from '../../utils/env'\n\nexport type ColorArray = [number, number, number, number]\n\nconst FLOAT_NUMBERS_REGEX = /\\d+(\\.\\d+)?/g\n\nexport const parseRGBA = (color: string): ColorArray | undefined => color\n  .match(FLOAT_NUMBERS_REGEX)?.map((n) => parseFloat(n ?? 1)) as ColorArray\n\nconst window = getWindow()\n\n/** Remove `var()` from css variable declaration */\nconst getCSSVariableNameFromDeclaration = (color: string) => color.slice(4, -1)\n\n/**\n * Super slow function. Must be covered with cache as much as possible.\n * It actually goes through all CSS and search for value.\n * This is needed to prevent transition delay when changing background color.\n */\nexport const getElementBackgroundFromCSS = (el: HTMLElement) => {\n  const color = [...el.ownerDocument.styleSheets]\n    .filter((s) => {\n      try {\n        // Might be a cross-origin stylesheet\n        return (s as CSSStyleSheet).cssRules\n      } catch {\n        return false\n      }\n    })\n    .map(s => [...s.cssRules || []])\n    .flat()\n    .reduce((bg, cssRule) => {\n      const { selectorText } = (cssRule as CSSPageRule)\n\n      try {\n        if (!el.matches(selectorText)) { return bg }\n      } catch (error) {\n        if (isDev) {\n          console.warn(error, selectorText)\n        }\n      }\n\n      if (cssRule instanceof CSSStyleRule) {\n        return cssRule.style.background || cssRule.style.backgroundColor || bg\n      }\n\n      return bg\n    }, '')\n    .trim()\n\n  if (isCSSVariable(color)) {\n    return window?.getComputedStyle(el)\n      .getPropertyValue(getCSSVariableNameFromDeclaration(color)).trim()\n  }\n\n  return color\n}\n\nconst EMPTY_TRANSITION = 'all 0s ease 0s'\n\nexport const getElementBackground = (element: HTMLElement) => {\n  const computedStyle = window?.getComputedStyle(element)\n\n  if (!computedStyle) { return }\n\n  if (computedStyle.transition.trim() !== EMPTY_TRANSITION) {\n    return getElementBackgroundFromCSS(element)\n  }\n\n  return computedStyle.backgroundColor\n}\n"],"names":[],"mappings":";;;AAWA,MAAM,SAAS,UAAU;AAGzB,MAAM,oCAAoC,CAAC,UAAkB,MAAM,MAAM,GAAG,EAAE;AAOjE,MAAA,8BAA8B,CAAC,OAAoB;AACxD,QAAA,QAAQ,CAAC,GAAG,GAAG,cAAc,WAAW,EAC3C,OAAO,CAAC,MAAM;AACT,QAAA;AAEF,aAAQ,EAAoB;AAAA,IAAA,QAC5B;AACO,aAAA;AAAA,IACT;AAAA,EACD,CAAA,EACA,IAAI,CAAK,MAAA,CAAC,GAAG,EAAE,YAAY,EAAE,CAAC,EAC9B,OACA,OAAO,CAAC,IAAI,YAAY;AACjB,UAAA,EAAE,aAAkB,IAAA;AAEtB,QAAA;AACF,UAAI,CAAC,GAAG,QAAQ,YAAY,GAAG;AAAS,eAAA;AAAA,MAAG;AAAA,aACpC;AACP,UAAI,OAAO;AACD,gBAAA,KAAK,OAAO,YAAY;AAAA,MAClC;AAAA,IACF;AAEA,QAAI,mBAAmB,cAAc;AACnC,aAAO,QAAQ,MAAM,cAAc,QAAQ,MAAM,mBAAmB;AAAA,IACtE;AAEO,WAAA;AAAA,EAAA,GACN,EAAE,EACJ;AAEC,MAAA,cAAc,KAAK,GAAG;AACjB,WAAA,iCAAQ,iBAAiB,IAC7B,iBAAiB,kCAAkC,KAAK,GAAG;AAAA,EAChE;AAEO,SAAA;AACT;AAEA,MAAM,mBAAmB;AAEZ,MAAA,uBAAuB,CAAC,YAAyB;AACtD,QAAA,gBAAgB,iCAAQ,iBAAiB;AAE/C,MAAI,CAAC,eAAe;AAAE;AAAA,EAAO;AAE7B,MAAI,cAAc,WAAW,KAAK,MAAM,kBAAkB;AACxD,WAAO,4BAA4B,OAAO;AAAA,EAC5C;AAEA,SAAO,cAAc;AACvB;"}