import { ref, computed, watch, toRef, nextTick } from "vue";
import { h as flatten, f as isString, g as isFunction } from "../../vendor.js";
import { u as useSyncProp } from "./useSyncProp.js";
import { u as useFocus } from "./useFocus.js";
import { u as useFormChild } from "./useForm/useFormChild.js";
const normalizeValidationRules = (rules = [], callArguments = null) => {
  if (isString(rules)) {
    rules = [rules];
  }
  return rules.map((rule) => isFunction(rule) ? rule(callArguments) : rule);
};
const useValidationProps = {
  name: { type: String, default: void 0 },
  modelValue: { required: false },
  error: { type: Boolean, default: void 0 },
  errorMessages: { type: [Array, String], default: void 0 },
  errorCount: { type: [String, Number], default: 1 },
  rules: { type: Array, default: () => [] },
  success: { type: Boolean, default: false },
  messages: { type: [Array, String], default: () => [] },
  immediateValidation: { type: Boolean, default: false }
};
const useValidationEmits = ["update:error", "update:errorMessages"];
const isPromise = (value) => {
  return typeof value === "object" && typeof value.then === "function";
};
const useValidation = (props, emit, options) => {
  const { reset, focus } = options;
  const { isFocused, onFocus, onBlur } = useFocus();
  const [computedError] = useSyncProp("error", props, emit, false);
  const [computedErrorMessages] = useSyncProp("errorMessages", props, emit, []);
  const isLoading = ref(false);
  const validationAriaAttributes = computed(() => ({
    "aria-invalid": !!computedErrorMessages.value.length,
    "aria-errormessage": typeof computedErrorMessages.value === "string" ? computedErrorMessages.value : computedErrorMessages.value.join(", ")
  }));
  const resetValidation = () => {
    computedError.value = false;
    computedErrorMessages.value = [];
  };
  const processResults = (results) => {
    let error = false;
    let errorMessages = [];
    results.forEach((result) => {
      if (isString(result)) {
        errorMessages = [...errorMessages, result];
        error = true;
      } else if (result === false) {
        error = true;
      }
    });
    computedErrorMessages.value = errorMessages;
    computedError.value = error;
    return !error;
  };
  const validateAsync = async () => {
    if (!props.rules || !props.rules.length) {
      return true;
    }
    const results = normalizeValidationRules(flatten(props.rules), options.value.value);
    const asyncPromiseResults = results.filter((result) => isPromise(result));
    const syncRules = results.filter((result) => !isPromise(result));
    if (!asyncPromiseResults.length) {
      return processResults(syncRules);
    }
    isLoading.value = true;
    return Promise.all(asyncPromiseResults).then((asyncResults) => {
      isLoading.value = false;
      return processResults([...syncRules, ...asyncResults]);
    });
  };
  const validate = () => {
    if (!props.rules || !props.rules.length) {
      return true;
    }
    const rules = flatten(props.rules);
    const results = normalizeValidationRules(rules, options.value.value);
    const asyncPromiseResults = results.filter((result) => isPromise(result));
    const syncRules = results.filter((result) => !isPromise(result));
    const isSyncedError = syncRules.some((result) => isString(result) ? result : result === false);
    if (asyncPromiseResults.length && !isSyncedError) {
      isLoading.value = true;
      Promise.all(asyncPromiseResults).then((asyncResults) => {
        processResults([...syncRules, ...asyncResults]);
        isLoading.value = false;
      });
      return isSyncedError;
    }
    return processResults(syncRules);
  };
  watch(isFocused, (newVal) => !newVal && validate());
  let canValidate = true;
  const withoutValidation = (cb) => {
    canValidate = false;
    cb();
    nextTick(() => {
      canValidate = true;
    });
  };
  watch(
    () => props.modelValue,
    () => {
      if (!canValidate) {
        return;
      }
      return validate();
    },
    { immediate: props.immediateValidation }
  );
  const {
    doShowErrorMessages,
    doShowError,
    doShowLoading
  } = useFormChild({
    isValid: computed(() => !computedError.value),
    isLoading,
    errorMessages: computedErrorMessages,
    validate,
    validateAsync,
    resetValidation,
    focus,
    reset,
    value: computed(() => options.value || props.modelValue),
    name: toRef(props, "name")
  });
  return {
    computedError: computed(() => doShowError.value ? computedError.value : false),
    computedErrorMessages: computed(() => doShowErrorMessages.value ? computedErrorMessages.value : []),
    isLoading: computed(() => doShowLoading.value ? isLoading.value : false),
    listeners: { onFocus, onBlur },
    validate,
    resetValidation,
    withoutValidation,
    validationAriaAttributes
  };
};
export {
  useValidationEmits as a,
  useValidation as b,
  useValidationProps as u
};
//# sourceMappingURL=useValidation.js.map
