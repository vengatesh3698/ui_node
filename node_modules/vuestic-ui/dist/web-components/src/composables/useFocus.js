import { u as unwrapEl } from "../utils/unwrapEl.js";
import { f as focusElement, b as blurElement } from "../utils/focus.js";
import { ref, onMounted, onBeforeUnmount } from "vue";
const useFocusEmits = ["focus", "blur"];
function useFocus(el, emit) {
  const isFocused = ref(false);
  const onFocus = (e) => {
    isFocused.value = true;
    emit == null ? void 0 : emit("focus", e);
  };
  const onBlur = (e) => {
    isFocused.value = false;
    emit == null ? void 0 : emit("blur", e);
  };
  const focus = () => {
    if (!(el == null ? void 0 : el.value)) {
      return;
    }
    focusElement(unwrapEl(el == null ? void 0 : el.value));
  };
  const blur = () => {
    if (!(el == null ? void 0 : el.value)) {
      return;
    }
    blurElement(unwrapEl(el == null ? void 0 : el.value));
  };
  let element;
  onMounted(() => {
    var _a;
    element = ((_a = el == null ? void 0 : el.value) == null ? void 0 : _a.$el) ?? (el == null ? void 0 : el.value);
    if (element) {
      element.addEventListener("focus", onFocus);
      element.addEventListener("blur", onBlur);
    }
  });
  onBeforeUnmount(() => {
    if (element) {
      element.removeEventListener("focus", onFocus);
      element.removeEventListener("blur", onBlur);
    }
  });
  return {
    isFocused,
    onFocus,
    onBlur,
    focus,
    blur
  };
}
export {
  useFocusEmits as a,
  useFocus as u
};
//# sourceMappingURL=useFocus.js.map
