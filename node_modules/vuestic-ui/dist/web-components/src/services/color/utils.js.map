{"version":3,"file":"utils.js","sources":["../../../../../src/services/color/utils.ts"],"sourcesContent":["import kebabCase from 'lodash/kebabCase.js'\nimport camelCase from 'lodash/camelCase.js'\nimport { ColorTranslator } from 'colortranslator'\nimport type { HSLObject, HEXObject, RGBObject } from 'colortranslator'\n\nexport type ColorInput = string | HEXObject | HSLObject | RGBObject\n\nexport const isCSSVariable = (strColor: string): boolean => /var\\(--.+\\)/.test(strColor)\nexport const cssVariableName = (colorName: string) => `--va-${kebabCase(colorName)}`\nexport const normalizeColorName = (colorName: string) => camelCase(colorName)\n\nexport const colorToRgba = (color: ColorInput, opacity: number) => {\n  return new ColorTranslator(color).setA(opacity).RGBA\n}\n\nexport const getColorLightness = (color: ColorInput) => {\n  const { R, G, B } = new ColorTranslator(color)\n  return Math.sqrt(R * R * 0.241 + G * G * 0.691 + B * B * 0.068)\n}\n\nexport const getBoxShadowColor = (color: ColorInput, opacity = 0.4) => {\n  return new ColorTranslator(color).setA(opacity).RGBA\n}\n\nexport const getBoxShadowColorFromBg = (background: ColorInput, opacity = 0.4) => {\n  return new ColorTranslator(background).setA(opacity).RGBA\n}\n\nexport const getHoverColor = (color: ColorInput, opacity = 0.2) => {\n  return new ColorTranslator(color).setA(opacity).RGBA\n}\n\nexport const getFocusColor = (color: ColorInput, opacity = 0.3) => {\n  return new ColorTranslator(color).setA(opacity).RGBA\n}\n\nexport const shiftHSLAColor = (color: ColorInput, offset: { h?: number; s?: number; l?: number; a?: number }) => {\n  const result = new ColorTranslator(color)\n\n  if (offset.h) { result.setH(result.H + offset.h) }\n\n  if (offset.s) { result.setS(result.S + offset.s) }\n\n  if (offset.l) { result.setL(result.L + offset.l) }\n\n  if (offset.a) { result.setA(result.A + offset.a) }\n\n  return result.HSLA\n}\n\nexport const setHSLAColor = (color: ColorInput, newColor: { h?: number; s?: number; l?: number; a?: number }) => {\n  const result = new ColorTranslator(color)\n\n  if (newColor.h !== undefined) { result.setH(newColor.h) }\n\n  if (newColor.s !== undefined) { result.setS(newColor.s) }\n\n  if (newColor.l !== undefined) { result.setL(newColor.l) }\n\n  if (newColor.a !== undefined) { result.setA(newColor.a) }\n\n  return result.HSLA\n}\n\n/**\n * This method guesses second color for gradient based on first one.\n * Calculation method should differ for different colors, so we split color circle\n * in zones.\n *\n * @param color\n */\nexport const shiftGradientColor = (color: ColorInput): string => {\n  const newColor = ColorTranslator.toHSLA(color, false) as HSLObject\n\n  // Gray\n  if (newColor.s < 10) {\n    return shiftHSLAColor(newColor, { h: 2, s: 5, l: 10 })\n  }\n  // Unsaturated (too pale, gray-ish, monotone)\n  // For unsaturated color, hue change does nothing.\n  if (newColor.s < 30) {\n    return shiftHSLAColor(newColor, { s: -14, l: 11 })\n  }\n  // Red\n  if ((newColor.h >= 0 && newColor.h < 44) || (newColor.h >= 285)) {\n    return shiftHSLAColor(newColor, { h: 11, s: 27, l: 8 })\n  }\n  // Yellow\n  if (newColor.h >= 44 && newColor.h < 85) {\n    return shiftHSLAColor(newColor, { h: 3, l: 9 })\n  }\n  // Green\n  if (newColor.h >= 85 && newColor.h < 165) {\n    return shiftHSLAColor(newColor, { h: 16, l: 14 })\n  }\n  // Blue\n  if (newColor.h >= 165 && newColor.h < 285) {\n    return shiftHSLAColor(newColor, { h: -15, s: 3, l: 2 })\n  }\n\n  throw new Error('This method should handle all colors. But it didn\\'t for some reason.')\n}\n\nexport const getGradientBackground = (color: string) => {\n  const colorLeft = shiftGradientColor(color)\n  const colorRight = ColorTranslator.toHSLA(color)\n\n  return `linear-gradient(to right, ${colorLeft}, ${colorRight})`\n}\n\nexport const getStateMaskGradientBackground = (color: string, maskColor: string, maskOpacity: number) => {\n  const mask = colorToRgba(maskColor, maskOpacity)\n\n  return `linear-gradient(0deg, ${mask}, ${mask}), ${color}`\n}\n\n/**\n * Check if color is valid hsl, hsla, rga, rgba or hex color\n * Taken from https://www.regextester.com/103656\n * Check options <or> isCSSVariable(prop) <or> CSS.supports('color', prop) deleted due to problems with SSR and opacity\n * Details are in the discussion: https://github.com/epicmaxco/vuestic-ui/pull/1589\n * @param strColor\n */\nexport const isColor = (strColor: string): boolean => {\n  // Need to use Regex instead of DOM methods because we support SSR\n  const cssColorRegex = /^#([\\da-f]{3}){1,2}$|^#([\\da-f]{4}){1,2}$|(rgb|hsl)a?\\((\\s*-?\\d+%?\\s*,){2}(\\s*-?\\d+%?\\s*,?\\s*\\)?)(,\\s*(0?\\.\\d+)?|1)?\\)/\n\n  return cssColorRegex.test(strColor.toLocaleLowerCase())\n}\n\nexport const applyColors = (color1: ColorInput, color2: ColorInput) => {\n  const c1 = new ColorTranslator(color1)\n  const c2 = new ColorTranslator(color2)\n  const weight = c2.A\n\n  if (weight === 1) { return c2.RGBA }\n  if (weight === 0) { return c1.RGBA }\n\n  c1.setR(Math.round((c1.R) * (1 - weight) + (c2.R) * weight))\n  c1.setG(Math.round((c1.G) * (1 - weight) + (c2.G) * weight))\n  c1.setB(Math.round((c1.B) * (1 - weight) + (c2.B) * weight))\n\n  return c1.RGBA\n}\n"],"names":[],"mappings":"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"}