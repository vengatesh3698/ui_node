import { computed } from "vue";
import { u as useTemplateRef } from "../useTemplateRef.mjs";
const useForm = (ref) => {
  const form = typeof ref === "string" ? useTemplateRef(ref) : ref;
  return {
    isValid: computed(() => {
      var _a;
      return ((_a = form.value) == null ? void 0 : _a.isValid) || false;
    }),
    isLoading: computed(() => {
      var _a;
      return ((_a = form.value) == null ? void 0 : _a.isLoading) || false;
    }),
    fields: computed(() => {
      var _a;
      return ((_a = form.value) == null ? void 0 : _a.fields) ?? [];
    }),
    fieldNames: computed(() => {
      var _a;
      return ((_a = form.value) == null ? void 0 : _a.fieldNames) ?? [];
    }),
    formData: computed(() => {
      var _a;
      return ((_a = form.value) == null ? void 0 : _a.formData) ?? {};
    }),
    errorMessages: computed(() => {
      var _a;
      return ((_a = form.value) == null ? void 0 : _a.errorMessages) || [];
    }),
    errorMessagesNamed: computed(() => {
      var _a;
      return ((_a = form.value) == null ? void 0 : _a.errorMessagesNamed) || {};
    }),
    validate: () => {
      var _a;
      return (_a = form.value) == null ? void 0 : _a.validate();
    },
    reset: () => {
      var _a;
      (_a = form.value) == null ? void 0 : _a.reset();
    },
    resetValidation: () => {
      var _a;
      return (_a = form.value) == null ? void 0 : _a.resetValidation();
    },
    focus: () => {
      var _a;
      return (_a = form.value) == null ? void 0 : _a.focus();
    },
    focusInvalidField: () => {
      var _a;
      return (_a = form.value) == null ? void 0 : _a.focusInvalidField();
    }
  };
};
export {
  useForm as u
};
//# sourceMappingURL=useForm.mjs.map
