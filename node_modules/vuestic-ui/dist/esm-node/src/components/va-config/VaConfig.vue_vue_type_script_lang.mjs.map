{"version":3,"file":"VaConfig.vue_vue_type_script_lang.mjs","sources":["../../../../../src/components/va-config/VaConfig.vue"],"sourcesContent":["<template>\n  <CssVarsRenderer v-if=\"doRenderCssVars\" v-bind=\"$attrs\">\n    <slot />\n  </CssVarsRenderer>\n  <slot v-else />\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, h, Fragment } from 'vue'\nimport { useComponentPresetProp } from '../../composables/useComponentPreset'\nimport { ComponentConfig } from '../../services/component-config'\n\nimport { provideLocalConfig, useLocalConfig } from '../../composables/useLocalConfig'\nimport { useGlobalConfigProvider } from './hooks/useGlobalConfigProvider'\nimport { PartialGlobalConfig } from '../../services/global-config'\nimport { renderSlotNodes } from '../../utils/headless'\nimport { useColors } from '../../composables'\n\nconst CssVarsRenderer = defineComponent({\n  name: 'VaCssVarsRenderer',\n\n  inheritAttrs: false,\n\n  setup (props, { slots, attrs }) {\n    const { colorsToCSSVariable, colors } = useColors()\n\n    const style = computed(() => {\n      return colorsToCSSVariable(colors)\n    })\n\n    return () => h(Fragment, attrs, renderSlotNodes(slots.default, {}, {\n      style: style.value,\n    }) || undefined)\n  },\n})\n\nexport default defineComponent({\n  name: 'VaConfig',\n  components: { CssVarsRenderer },\n  props: {\n    ...useComponentPresetProp,\n    components: { type: Object as PropType<ComponentConfig>, default: () => ({}) },\n    colors: { type: Object as PropType<PartialGlobalConfig['colors']> },\n    i18n: { type: Object as PropType<PartialGlobalConfig['i18n']> },\n  },\n  inheritAttrs: false,\n  setup (props) {\n    const prevChain = useLocalConfig()\n    // We want it to be an array and not a merged object for optimization purposes\n    const nextChain = computed(() => [...prevChain.value, props.components])\n\n    provideLocalConfig(nextChain)\n\n    const newConfig = useGlobalConfigProvider(computed(() => {\n      const config = {} as any\n\n      if (props.colors) {\n        config.colors = props.colors\n      }\n\n      if (props.i18n) {\n        config.i18n = props.i18n\n      }\n\n      return config\n    }))\n\n    const doRenderCssVars = computed(() => {\n      return Boolean(props.colors)\n    })\n\n    return {\n      newConfig,\n      doRenderCssVars,\n    }\n  },\n})\n</script>\n"],"names":[],"mappings":";;;;;;AAkBA,MAAM,kBAAkB,gBAAgB;AAAA,EACtC,MAAM;AAAA,EAEN,cAAc;AAAA,EAEd,MAAO,OAAO,EAAE,OAAO,SAAS;AAC9B,UAAM,EAAE,qBAAqB,OAAO,IAAI,UAAU;AAE5C,UAAA,QAAQ,SAAS,MAAM;AAC3B,aAAO,oBAAoB,MAAM;AAAA,IAAA,CAClC;AAEM,WAAA,MAAM,EAAE,UAAU,OAAO,gBAAgB,MAAM,SAAS,IAAI;AAAA,MACjE,OAAO,MAAM;AAAA,IAAA,CACd,KAAK,MAAS;AAAA,EACjB;AACF,CAAC;AAED,MAAA,YAAe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,YAAY,EAAE,gBAAgB;AAAA,EAC9B,OAAO;AAAA,IACL,GAAG;AAAA,IACH,YAAY,EAAE,MAAM,QAAqC,SAAS,OAAO,CAAI,GAAA;AAAA,IAC7E,QAAQ,EAAE,MAAM,OAAkD;AAAA,IAClE,MAAM,EAAE,MAAM,OAAgD;AAAA,EAChE;AAAA,EACA,cAAc;AAAA,EACd,MAAO,OAAO;AACZ,UAAM,YAAY;AAEZ,UAAA,YAAY,SAAS,MAAM,CAAC,GAAG,UAAU,OAAO,MAAM,UAAU,CAAC;AAEvE,uBAAmB,SAAS;AAEtB,UAAA,YAAY,wBAAwB,SAAS,MAAM;AACvD,YAAM,SAAS,CAAA;AAEf,UAAI,MAAM,QAAQ;AAChB,eAAO,SAAS,MAAM;AAAA,MACxB;AAEA,UAAI,MAAM,MAAM;AACd,eAAO,OAAO,MAAM;AAAA,MACtB;AAEO,aAAA;AAAA,IACR,CAAA,CAAC;AAEI,UAAA,kBAAkB,SAAS,MAAM;AAC9B,aAAA,QAAQ,MAAM,MAAM;AAAA,IAAA,CAC5B;AAEM,WAAA;AAAA,MACL;AAAA,MACA;AAAA,IAAA;AAAA,EAEJ;AACF,CAAC;"}