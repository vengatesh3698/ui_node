import { _ as _sfc_main } from "./VaColorInput.vue_vue_type_script_lang.mjs";
import { resolveComponent, openBlock, createElementBlock, createVNode, withCtx, withKeys, withDirectives, createElementVNode, vModelText } from "vue";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
const VaColorInput_vue_vue_type_style_index_0_lang = "";
const _hoisted_1 = { class: "va-color-input" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_color_indicator = resolveComponent("va-color-indicator");
  const _component_va_input = resolveComponent("va-input");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createVNode(_component_va_input, {
      class: "va-color-input__input",
      placeholder: "input color",
      modelValue: _ctx.valueComputed,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.valueComputed = $event),
      tabindex: _ctx.tabIndexComputed,
      disabled: _ctx.$props.disabled
    }, {
      appendInner: withCtx(() => [
        createVNode(_component_va_color_indicator, {
          class: "va-color-input__dot",
          role: "button",
          "aria-label": _ctx.tp(_ctx.$props.ariaOpenColorPickerLabel),
          "aria-disabled": _ctx.$props.disabled,
          tabindex: _ctx.tabIndexComputed,
          color: _ctx.valueComputed,
          indicator: _ctx.$props.indicator,
          onClick: _ctx.callPickerDialog,
          onKeydown: [
            withKeys(_ctx.callPickerDialog, ["space"]),
            withKeys(_ctx.callPickerDialog, ["enter"])
          ]
        }, null, 8, ["aria-label", "aria-disabled", "tabindex", "color", "indicator", "onClick", "onKeydown"])
      ]),
      _: 1
    }, 8, ["modelValue", "tabindex", "disabled"]),
    withDirectives(createElementVNode("input", {
      ref: "colorPicker",
      type: "color",
      class: "va-color-input__hidden-input",
      "aria-hidden": "true",
      tabindex: "-1",
      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.valueComputed = $event)
    }, null, 512), [
      [vModelText, _ctx.valueComputed]
    ])
  ]);
}
const _VaColorInput = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  _VaColorInput as _
};
//# sourceMappingURL=VaColorInput.mjs.map
