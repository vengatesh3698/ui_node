import { _ as _sfc_main } from "./VaCounter.vue_vue_type_script_lang.mjs";
import { resolveComponent, openBlock, createBlock, mergeProps, withKeys, withModifiers, createSlots, withCtx, createElementBlock, createCommentVNode, createElementVNode, normalizeStyle, renderSlot, normalizeProps, guardReactiveProps, createVNode } from "vue";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
const VaCounter_vue_vue_type_style_index_0_lang = "";
const _hoisted_1 = {
  ref: "input",
  tabindex: "0",
  class: "va-counter__content-wrapper"
};
const _hoisted_2 = ["value"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_input_wrapper = resolveComponent("va-input-wrapper");
  return openBlock(), createBlock(_component_va_input_wrapper, mergeProps({ class: "va-counter" }, { ..._ctx.fieldListeners, ..._ctx.inputWrapperPropsComputed }, {
    class: _ctx.classComputed,
    style: _ctx.styleComputed,
    focused: _ctx.isFocused,
    onKeydown: [
      withKeys(withModifiers(_ctx.increaseCount, ["prevent"]), ["up"]),
      withKeys(withModifiers(_ctx.increaseCount, ["prevent"]), ["right"]),
      withKeys(withModifiers(_ctx.decreaseCount, ["prevent"]), ["down"]),
      withKeys(withModifiers(_ctx.decreaseCount, ["prevent"]), ["left"])
    ]
  }), createSlots({
    default: withCtx(() => [
      !_ctx.$slots.content ? (openBlock(), createElementBlock("input", mergeProps({
        key: 0,
        ref: "input",
        class: "va-input__content__input",
        type: "number",
        inputmode: "decimal"
      }, { ..._ctx.inputAttributesComputed, ..._ctx.inputListeners }, {
        value: _ctx.valueComputed,
        onInput: _cache[4] || (_cache[4] = (...args) => _ctx.setCountInput && _ctx.setCountInput(...args)),
        onChange: _cache[5] || (_cache[5] = (...args) => _ctx.setCountChange && _ctx.setCountChange(...args))
      }), null, 16, _hoisted_2)) : createCommentVNode("", true)
    ]),
    _: 2
  }, [
    _ctx.$props.buttons ? {
      name: "prepend",
      fn: withCtx((slotScope) => [
        createElementVNode("div", {
          class: "va-counter__prepend-wrapper",
          style: normalizeStyle({ marginRight: _ctx.marginComputed }),
          onMousedown: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.focus && _ctx.focus(...args), ["prevent"]))
        }, [
          renderSlot(_ctx.$slots, "decreaseAction", normalizeProps(guardReactiveProps({ ...slotScope, decreaseCount: _ctx.decreaseCount })), () => [
            createVNode(_component_va_button, mergeProps({
              class: "va-counter__button-decrease",
              "aria-label": _ctx.tp(_ctx.$props.ariaDecreaseLabel)
            }, _ctx.decreaseButtonProps, { ref: "decreaseButtonRef" }), null, 16, ["aria-label"])
          ])
        ], 36)
      ]),
      key: "0"
    } : {
      name: "prependInner",
      fn: withCtx((slotScope) => [
        createElementVNode("div", {
          class: "va-counter__prepend-inner",
          onMousedown: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.focus && _ctx.focus(...args), ["prevent"]))
        }, [
          renderSlot(_ctx.$slots, "decreaseAction", normalizeProps(guardReactiveProps({ ...slotScope, decreaseCount: _ctx.decreaseCount })), () => [
            createVNode(_component_va_button, mergeProps(_ctx.decreaseIconProps, { ref: "decreaseButtonRef" }), null, 16)
          ])
        ], 32)
      ]),
      key: "1"
    },
    _ctx.$props.buttons ? {
      name: "append",
      fn: withCtx((slotScope) => [
        createElementVNode("div", {
          class: "va-counter__append-wrapper",
          style: normalizeStyle({ marginLeft: _ctx.marginComputed }),
          onMousedown: _cache[2] || (_cache[2] = withModifiers((...args) => _ctx.focus && _ctx.focus(...args), ["prevent"]))
        }, [
          renderSlot(_ctx.$slots, "increaseAction", normalizeProps(guardReactiveProps({ ...slotScope, increaseCount: _ctx.increaseCount })), () => [
            createVNode(_component_va_button, mergeProps({
              class: "va-counter__button-increase",
              "aria-label": _ctx.tp(_ctx.$props.ariaIncreaseLabel)
            }, _ctx.increaseButtonProps, { ref: "increaseButtonRef" }), null, 16, ["aria-label"])
          ])
        ], 36)
      ]),
      key: "2"
    } : {
      name: "appendInner",
      fn: withCtx((slotScope) => [
        createElementVNode("div", {
          class: "va-counter__append-inner",
          onMousedown: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.focus && _ctx.focus(...args), ["prevent"]))
        }, [
          renderSlot(_ctx.$slots, "increaseAction", normalizeProps(guardReactiveProps({ ...slotScope, increaseCount: _ctx.increaseCount })), () => [
            createVNode(_component_va_button, mergeProps(_ctx.increaseIconProps, { ref: "increaseButtonRef" }), null, 16)
          ])
        ], 32)
      ]),
      key: "3"
    },
    _ctx.$slots.content ? {
      name: "default",
      fn: withCtx((slotScope) => [
        createElementVNode("div", _hoisted_1, [
          renderSlot(_ctx.$slots, "content", normalizeProps(guardReactiveProps({ ...slotScope, value: Number(_ctx.valueComputed) })))
        ], 512)
      ]),
      key: "4"
    } : void 0
  ]), 1040, ["class", "style", "focused", "onKeydown"]);
}
const _VaCounter = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  _VaCounter as _
};
//# sourceMappingURL=VaCounter.mjs.map
