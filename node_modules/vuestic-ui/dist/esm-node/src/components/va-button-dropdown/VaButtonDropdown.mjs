import { _ as _sfc_main } from "./VaButtonDropdown.vue_vue_type_script_lang.mjs";
import { resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, mergeProps, withCtx, createVNode, toHandlers, withKeys, withModifiers, renderSlot, createTextVNode, toDisplayString, normalizeProps, createCommentVNode } from "vue";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
const VaButtonDropdown_vue_vue_type_style_index_0_lang = "";
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_dropdown_content = resolveComponent("va-dropdown-content");
  const _component_va_dropdown = resolveComponent("va-dropdown");
  const _component_va_button_group = resolveComponent("va-button-group");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-button-dropdown", _ctx.computedClass])
  }, [
    !_ctx.$props.split ? (openBlock(), createBlock(_component_va_dropdown, mergeProps({ key: 0 }, _ctx.vaDropdownProps, {
      modelValue: _ctx.valueComputed,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.valueComputed = $event),
      disabled: _ctx.$props.disabled || _ctx.$props.disableDropdown
    }), {
      anchor: withCtx(() => [
        createVNode(_component_va_button, mergeProps({
          "aria-label": _ctx.tp(_ctx.$props.ariaLabel)
        }, { ..._ctx.computedButtonIcons, ..._ctx.buttonPropsComputed }, toHandlers(_ctx.listeners), {
          onKeydown: withKeys(withModifiers(_ctx.hideDropdown, ["prevent"]), ["esc"])
        }), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "label", {}, () => [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ])
          ]),
          _: 3
        }, 16, ["aria-label", "onKeydown"])
      ]),
      default: withCtx(() => [
        renderSlot(_ctx.$slots, "content", {}, () => [
          createVNode(_component_va_dropdown_content, null, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          })
        ])
      ]),
      _: 3
    }, 16, ["modelValue", "disabled"])) : (openBlock(), createBlock(_component_va_button_group, normalizeProps(mergeProps({ key: 1 }, _ctx.buttonPropsComputed)), {
      default: withCtx(() => [
        !_ctx.$props.leftIcon ? (openBlock(), createBlock(_component_va_button, mergeProps({
          key: 0,
          disabled: _ctx.$props.disabled || _ctx.$props.disableButton
        }, _ctx.computedMainButtonProps, toHandlers(_ctx.mainButtonListeners)), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "label", {}, () => [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ])
          ]),
          _: 3
        }, 16, ["disabled"])) : createCommentVNode("", true),
        createVNode(_component_va_dropdown, mergeProps({
          modelValue: _ctx.valueComputed,
          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.valueComputed = $event)
        }, _ctx.vaDropdownProps, {
          disabled: _ctx.$props.disabled || _ctx.$props.disableDropdown,
          teleport: _ctx.$el
        }), {
          anchor: withCtx(() => [
            createVNode(_component_va_button, mergeProps({
              "aria-label": _ctx.$props.ariaLabel || _ctx.t("toggleDropdown"),
              disabled: _ctx.$props.disabled || _ctx.$props.disableDropdown,
              icon: _ctx.computedIcon,
              "icon-color": _ctx.$props.iconColor
            }, toHandlers(_ctx.listeners), {
              onKeydown: withKeys(withModifiers(_ctx.hideDropdown, ["prevent"]), ["esc"])
            }), null, 16, ["aria-label", "disabled", "icon", "icon-color", "onKeydown"])
          ]),
          default: withCtx(() => [
            createVNode(_component_va_dropdown_content, null, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            })
          ]),
          _: 3
        }, 16, ["modelValue", "disabled", "teleport"]),
        _ctx.$props.leftIcon ? (openBlock(), createBlock(_component_va_button, mergeProps({
          key: 1,
          disabled: _ctx.$props.disabled || _ctx.$props.disableButton
        }, _ctx.computedMainButtonProps, toHandlers(_ctx.mainButtonListeners)), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "label", {}, () => [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ])
          ]),
          _: 3
        }, 16, ["disabled"])) : createCommentVNode("", true)
      ]),
      _: 3
    }, 16))
  ], 2);
}
const _VaButtonDropdown = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  _VaButtonDropdown as _
};
//# sourceMappingURL=VaButtonDropdown.mjs.map
