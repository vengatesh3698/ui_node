{"version":3,"file":"VaCheckbox.mjs","sources":["../../../../../src/components/va-checkbox/VaCheckbox.vue"],"sourcesContent":["<template>\n  <VaMessageListWrapper\n    class=\"va-checkbox\"\n    :class=\"computedClass\"\n    :disabled=\"disabled\"\n    :success=\"success\"\n    :messages=\"messages\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n  >\n    <div\n      ref=\"container\"\n      class=\"va-checkbox__input-container\"\n      @click=\"toggleSelection\"\n      @blur=\"onBlur\"\n    >\n      <div\n        class=\"va-checkbox__square\"\n        :style=\"inputStyle\"\n        @selectstart.prevent\n      >\n        <input\n          ref=\"input\"\n          type=\"checkbox\"\n          class=\"va-checkbox__input\"\n          :id=\"computedId\"\n          :indeterminate=\"indeterminate\"\n          :value=\"label\"\n          :checked=\"isActive\"\n          v-bind=\"inputAttributesComputed\"\n          v-on=\"keyboardFocusListeners\"\n          @focus=\"onFocus\"\n          @blur=\"onBlur\"\n          @click.stop.prevent\n          @keypress.prevent=\"toggleSelection\"\n        >\n        <va-icon\n          v-show=\"isActive\"\n          class=\"va-checkbox__icon\"\n          size=\"20px\"\n          :name=\"computedIconName\"\n          :color=\"textColorComputed\"\n        />\n      </div>\n      <label\n        v-if=\"label || $slots.label\"\n        ref=\"label\"\n        class=\"va-checkbox__label\"\n        :for=\"computedId\"\n        :style=\"labelStyle\"\n        @blur=\"onBlur\"\n      >\n        <slot name=\"label\">{{ label }}</slot>\n      </label>\n    </div>\n  </VaMessageListWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType, shallowRef } from 'vue'\n\nimport { generateUniqueId } from '../../utils/uuid'\nimport {\n  useComponentPresetProp,\n  useKeyboardOnlyFocus,\n  useColors, useTextColor,\n  useSelectable, useSelectableProps, useSelectableEmits, Elements,\n} from '../../composables'\n\nimport { VaMessageListWrapper } from '../va-input'\nimport { VaIcon } from '../va-icon/'\n\nconst VaCheckboxValueType = [Boolean, Array, String, Object] as PropType<boolean | null | string | number | Record<any, unknown> | unknown[]>\n\nexport default defineComponent({\n  name: 'VaCheckbox',\n  components: { VaMessageListWrapper, VaIcon },\n  emits: useSelectableEmits,\n  props: {\n    ...useSelectableProps,\n    ...useComponentPresetProp,\n    modelValue: { type: VaCheckboxValueType, default: false },\n    color: { type: String, default: 'primary' },\n    checkedIcon: { type: String, default: 'va-check' },\n    indeterminate: { type: Boolean, default: false },\n    indeterminateValue: { type: VaCheckboxValueType, default: null },\n    indeterminateIcon: { type: String, default: 'remove' },\n    id: { type: String, default: '' },\n    name: { type: String, default: '' },\n    ariaLabel: { type: String, default: undefined },\n  },\n  setup (props, { emit }) {\n    const elements: Elements = {\n      container: shallowRef<HTMLElement>(),\n      input: shallowRef<HTMLElement>(),\n      label: shallowRef<HTMLElement>(),\n    }\n\n    const {\n      isChecked,\n      computedError,\n      isIndeterminate,\n      computedErrorMessages,\n      validationAriaAttributes,\n      toggleSelection,\n      onBlur,\n      onFocus,\n    } = useSelectable(props, emit, elements)\n    const { getColor } = useColors()\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\n    const { textColorComputed } = useTextColor()\n\n    const isActive = computed(() => isChecked.value || isIndeterminate.value)\n\n    const computedClass = computed(() => ({\n      'va-checkbox--selected': isChecked.value,\n      'va-checkbox--readonly': props.readonly,\n      'va-checkbox--disabled': props.disabled,\n      'va-checkbox--indeterminate': props.indeterminate,\n      'va-checkbox--error': computedError.value,\n      'va-checkbox--left-label': props.leftLabel,\n      'va-checkbox--on-keyboard-focus': hasKeyboardFocus.value,\n    }))\n\n    const labelStyle = computed(() => {\n      return {\n        color: computedError.value ? getColor('danger') : '',\n        padding: !props.label\n          ? ''\n          : props.leftLabel\n            ? '0 0.5rem 0 0'\n            : '0 0 0 0.5rem',\n      }\n    })\n\n    const inputStyle = computed(() => {\n      const style = {\n        background: isActive.value ? getColor(props.color) : '',\n        borderColor: isActive.value ? getColor(props.color) : '',\n      }\n\n      if (computedError.value) {\n        style.borderColor = getColor('danger')\n      }\n\n      return style\n    })\n\n    const computedIconName = computed(() => props.indeterminate && isIndeterminate.value\n      ? props.indeterminateIcon\n      : props.checkedIcon,\n    )\n\n    const uniqueId = computed(generateUniqueId)\n    const computedId = computed(() => props.id || uniqueId.value)\n    const computedName = computed(() => props.name || uniqueId.value)\n    const inputAttributesComputed = computed(() => ({\n      name: computedName.value,\n      disabled: props.disabled,\n      readonly: props.readonly,\n      tabindex: props.disabled ? -1 : 0,\n      'aria-label': props.ariaLabel,\n      'aria-disabled': props.disabled,\n      'aria-readOnly': props.readonly,\n      'aria-checked': isActive.value,\n      ...validationAriaAttributes.value,\n    }))\n\n    return {\n      isActive,\n      computedClass,\n      labelStyle,\n      inputStyle,\n      computedIconName,\n      textColorComputed,\n      computedError,\n      computedErrorMessages,\n      keyboardFocusListeners,\n      toggleSelection,\n      onBlur,\n      onFocus,\n      inputAttributesComputed,\n      computedId,\n      computedName,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-checkbox {\n  display: var(--va-checkbox-display);\n  max-width: fit-content;\n  font-family: var(--va-font-family);\n\n  &__input-container {\n    align-items: center;\n    display: flex;\n    padding: var(--va-checkbox-input-padding);\n    cursor: var(--va-checkbox-input-cursor);\n    font-size: var(--va-checkbox-font-size);\n    line-height: var(--va-checkbox-line-height);\n\n    @at-root {\n      .va-checkbox--disabled & {\n        @include va-disabled();\n\n        cursor: var(--va-checkbox-disabled-cursor);\n      }\n\n      .va-checkbox--readonly & {\n        cursor: var(--va-checkbox-readonly-cursor);\n      }\n\n      .va-checkbox--left-label & {\n        flex-direction: row-reverse;\n      }\n    }\n  }\n\n  #{&}__square {\n    @include flex-center();\n\n    width: var(--va-checkbox-square-width);\n    min-width: var(--va-checkbox-square-min-width);\n    height: var(--va-checkbox-square-height);\n    position: relative;\n    background-color: var(--va-checkbox-square-background-color);\n    border: var(--va-checkbox-square-border, var(--va-control-border));\n    border-radius: var(--va-checkbox-square-border-radius);\n\n    @at-root {\n      .va-checkbox--on-keyboard-focus#{&} {\n        transition: all, 0.6s, ease-in;\n        outline: 2px solid var(--va-focus);\n      }\n    }\n  }\n\n  &__input {\n    @include visually-hidden;\n  }\n\n  &__label {\n    display: var(--va-checkbox-label-display);\n    position: relative;\n  }\n\n  &__icon {\n    pointer-events: none;\n    position: absolute;\n  }\n\n  &--selected {\n    .va-checkbox {\n      &__icon {\n        color: var(--va-checkbox-selected-icon-color);\n      }\n    }\n  }\n\n  &--indeterminate {\n    .va-checkbox {\n      &__icon {\n        color: var(--va-checkbox-indeterminate-icon-color);\n      }\n    }\n  }\n}\n</style>\n"],"names":["_resolveComponent","_openBlock","_createBlock","_normalizeClass","_withCtx","_createElementVNode","_normalizeStyle","_withModifiers","_mergeProps","_toHandlers","_withDirectives","_createVNode","_createElementBlock"],"mappings":";;;;;;;;AAwDyB,QAAA,kCAAAA,iBAAA,sBAAA;AApDpB,SAAAC,UAAA,GAAkBC,YAAA,iCAAA;AAAA,IAClB,OAAOC,eAAS,CAAA,eAAA,KAAA,aAAA,CAAA;AAAA,IAChB,UAAU,KAAA;AAAA,IACV,SAAO,KAAA;AAAA,IACP,UAAA,KAAA;AAAA,IACA,OAAA,KAAA;AAAA,IAAA,kBAAA,KAAA;AAAA,IA8CK,eAAA,KAAA;AAAA,EAAA,GAAA;AAAA,aA3CAC,QAAW,MAAA;AAAA,MACTC,mBAAA,OAAA;AAAA,QACL,KAAA;AAAA,QACA,OAAI;AAAA,QAAA,SAAA,OAAA,CAAA,MAAA,OAAA,CAAA,IAAA,IAAA,SAAA,KAAA,mBAAA,KAAA,gBAAA,GAAA,IAAA;AAAA,QAEL,QA2BM,OAAA,CAAA,MAAA,OAAA,CAAA,IAAA,IAAA,SAAA,KAAA,UAAA,KAAA,OAAA,GAAA,IAAA;AAAA,MAAA,GAAA;AAAA,2BAzBE,OAAE;AAAA,UACP,OAAA;AAAA,UAAA,OAAAC,eAAA,KAAA,UAAA;AAAA,UAED,eAAA,OAcC,OAdD,OAcC,CAAA,IAAAC,cAAA,MAAA;AAAA,UAAA,GAAA,CAAA,SAAA,CAAA;AAAA,QAAA,GAAA;AAAA,UAZgBF,mBAAA,SAAAG,WAAA;AAAA,YACf,KAAK;AAAA,YACJ,MAAI;AAAA,YACJ,OAAA;AAAA,YACA,IAAO,KAAA;AAAA,YACP,eAAS,KAAA;AAAA,YACF,OAAA,KAAA;AAAA,YAEP,SAAK,KAAA;AAAA,UAAA,GACL,KAAI,yBAAEC,WAAA,KAAA,wBAAA,IAAA,GAAA;AAAA,YACN,SAAK,4CAAN,WAAmB,KAAA,QAAA,GAAA,IAAA;AAAA,YAClB,eAAQ,CAAU,MAAA,OAAA,CAAA,IAAA,IAAA,SAAA,KAAA,UAAA,KAAA,OAAA,GAAA,IAAA;AAAA,YAAA,SAAA,OAAA,CAAA,MAAA,OAAA,CAAA,IAAAF,cAAA,MAAA;AAAA;+BAErB,CAME,MAAA,OAAA,CAAA,IAAAA,cAAA,IAAA,SAAA,KAAA,mBAAA,KAAA,gBAAA,GAAA,IAAA,GAAA,CAAA,SAAA,CAAA;AAAA,UAAA,CAAA,GAJA,MAAM,IAAA,UAAA;AAAA,UACKG,eAAAC,YAAA,oBAAA;AAAA,YACV,OAAM;AAAA,YACN,MAAK;AAAA,YAAA,MAAA,KAAA;AAAA,YAJE,OAAA,KAAA;AAAA,UAAA,GAAA,MAAA,GAAA,CAAA,QAAA,OAAA,CAAA,GAAA;AAAA;UAQJ,CAAA;AAAA,QAAA,GAAA,EAAA;AAAA,qDACK,GAAAC,mBAAA,SAAA;AAAA,UACX,KAAK;AAAA,UACJ,KAAK;AAAA,UACL,OAAK;AAAA,UACL,KAAI,KAAA;AAAA,UAAA,OAAAN,eAAA,KAAA,UAAA;AAAA,UAEL,QAAA,OAAqC,uBAArC,SAAqC,KAAA,UAAA,KAAA,OAAA,GAAA,IAAA;AAAA,QAAA,GAAA;AAAA;;;;;;;;;;"}