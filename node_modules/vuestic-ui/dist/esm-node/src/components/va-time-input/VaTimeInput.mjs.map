{"version":3,"file":"VaTimeInput.mjs","sources":["../../../../../src/components/va-time-input/VaTimeInput.vue"],"sourcesContent":["<template>\n  <va-dropdown\n    v-model=\"doShowDropdown\"\n    class=\"va-time-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    v-bind=\"dropdownPropsComputed\"\n  >\n    <template #anchor>\n      <va-input-wrapper\n        class=\"va-time-input__anchor\"\n        :style=\"cursorStyleComputed\"\n        v-bind=\"computedInputWrapperProps\"\n        @click.stop=\"toggleDropdown\"\n      >\n        <template #default>\n          <input\n            ref=\"input\"\n            class=\"va-time-input__input\"\n            v-bind=\"inputAttributesComputed\"\n            v-on=\"computedInputListeners\"\n            @change=\"onInputTextChanged\"\n          />\n        </template>\n\n        <template\n          v-for=\"name in filteredSlots\"\n          :key=\"name\"\n          v-slot:[name]=\"slotScope\"\n        >\n          <slot\n            :name=\"name\"\n            v-bind=\"{ ...slotScope, toggleDropdown, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n        </template>\n\n        <template #prependInner=\"slotScope\" v-if=\"$slots.prependInner || $props.leftIcon\">\n          <slot\n            name=\"prependInner\"\n            v-bind=\"{ ...slotScope, toggleDropdown, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n          <va-icon\n            v-if=\"$props.leftIcon\"\n            :aria-label=\"tp($props.ariaToggleDropdownLabel)\"\n            v-bind=\"iconProps\"\n            @click.stop=\"showDropdown\"\n            @keydown.enter.stop=\"showDropdown\"\n            @keydown.space.stop=\"showDropdown\"\n          />\n        </template>\n\n        <template #icon>\n          <va-icon\n            v-if=\"canBeClearedComputed\"\n            v-bind=\"{ ...iconProps, ...clearIconProps }\"\n            :aria-label=\"tp($props.ariaResetLabel)\"\n            @click.stop=\"reset\"\n            @keydown.enter.stop=\"reset\"\n            @keydown.space.stop=\"reset\"\n          />\n          <va-icon\n            v-else-if=\"!$props.leftIcon && $props.icon\"\n            :aria-label=\"tp($props.ariaToggleDropdownLabel)\"\n            @click.stop=\"showDropdown\"\n            @keydown.enter.stop=\"showDropdown\"\n            @keydown.space.stop=\"showDropdown\"\n            v-bind=\"iconProps\"\n          />\n        </template>\n      </va-input-wrapper>\n    </template>\n\n    <va-dropdown-content\n      no-padding\n      @keydown.esc.prevent=\"hideDropdown\"\n      @keypress.enter.prevent=\"hideDropdown\"\n    >\n      <va-time-picker\n        ref=\"timePicker\"\n        v-bind=\"timePickerProps\"\n        v-model=\"valueComputed\"\n      />\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, shallowRef, nextTick } from 'vue'\nimport omit from 'lodash/omit'\n\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\nimport {\n  useComponentPresetProp,\n  useSyncProp,\n  useValidation, useValidationEmits, useValidationProps, ValidationProps,\n  useClearable, useClearableEmits, useClearableProps,\n  useFocus, useFocusEmits,\n  useStateful, useStatefulEmits, useStatefulProps,\n  useTranslation,\n} from '../../composables'\nimport { useTimeParser } from './hooks/time-text-parser'\nimport { useTimeFormatter } from './hooks/time-text-formatter'\n\nimport VaTimePicker from '../va-time-picker/VaTimePicker.vue'\nimport { VaInputWrapper } from '../va-input'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\n\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper, ['focused', 'maxLength', 'counterValue'])\nconst VaDropdownProps = extractComponentProps(VaDropdown,\n  ['keyboardNavigation', 'innerAnchorSelector', 'modelValue'],\n)\n\nexport default defineComponent({\n  name: 'VaTimeInput',\n\n  components: { VaDropdown, VaDropdownContent, VaTimePicker, VaIcon, VaInputWrapper },\n\n  emits: [\n    ...useFocusEmits,\n    ...useValidationEmits,\n    ...useClearableEmits,\n    ...useStatefulEmits,\n    'update:modelValue',\n    'update:isOpen',\n  ],\n\n  props: {\n    ...VaDropdownProps,\n    ...useComponentPresetProp,\n    ...useClearableProps,\n    ...VaInputWrapperProps,\n    ...extractComponentProps(VaTimePicker),\n    ...useValidationProps as ValidationProps<Date>,\n    ...useStatefulProps,\n\n    isOpen: { type: Boolean, default: undefined },\n    closeOnContentClick: { type: Boolean, default: false },\n    offset: { ...VaDropdownProps.offset, default: () => [2, 0] },\n    placement: { ...VaDropdownProps.placement, default: 'bottom-start' },\n    modelValue: { type: Date, default: undefined },\n    clearValue: { type: Date, default: undefined },\n    format: { type: Function as PropType<(date?: Date) => string> },\n    parse: { type: Function as PropType<(input: string) => Date> },\n    manualInput: { type: Boolean, default: false },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'schedule' },\n\n    ariaLabel: { type: String, default: '$t:selectedTime' },\n    ariaResetLabel: { type: String, default: '$t:resetTime' },\n    ariaToggleDropdownLabel: { type: String, default: '$t:toggleDropdown' },\n  },\n\n  inheritAttrs: false,\n\n  setup (props, { emit, slots, attrs }) {\n    const input = shallowRef<HTMLInputElement>()\n    const timePicker = shallowRef<typeof VaTimePicker>()\n\n    const [isOpenSync] = useSyncProp('isOpen', props, emit, false as boolean)\n    const { valueComputed } = useStateful(props, emit)\n\n    const { parse, isValid } = useTimeParser(props)\n    const { format } = useTimeFormatter(props)\n\n    const valueText = computed<string>(() => format(valueComputed.value || props.clearValue))\n\n    const doShowDropdown = computed({\n      get () {\n        if (props.disabled || props.readonly) { return false }\n\n        return isOpenSync.value\n      },\n      set (v: boolean) {\n        isOpenSync.value = v\n\n        if (v) {\n          nextTick(() => timePicker.value?.focus())\n        } else {\n          nextTick(() => input.value?.focus())\n        }\n      },\n    })\n\n    const { isFocused, focus, blur, onFocus: focusListener, onBlur: blurListener } = useFocus(input)\n\n    const onInputTextChanged = (e: Event) => {\n      if (props.disabled) { return }\n\n      const val = (e.target as HTMLInputElement)?.value\n      if (!val) {\n        return reset()\n      }\n\n      const v = parse(val)\n\n      if (isValid.value && v) {\n        valueComputed.value = v\n      } else {\n        valueComputed.value = undefined\n        isValid.value = true\n      }\n    }\n\n    // --- not used yet ---\n    // const changePeriod = (isPM: boolean) => {\n    //   if (!valueComputed.value) { return }\n\n    //   const halfDayPeriod = 12\n    //   const h = valueComputed.value.getHours()\n\n    //   if (isPM && h <= halfDayPeriod) {\n    //     valueComputed.value = new Date(valueComputed.value.setHours(h + halfDayPeriod))\n    //   } else if (!isPM && h >= halfDayPeriod) {\n    //     valueComputed.value = new Date(valueComputed.value.setHours(h - halfDayPeriod))\n    //   }\n    // }\n\n    // const changePeriodToPm = () => changePeriod(true)\n    // const changePeriodToAm = () => changePeriod(false)\n\n    const reset = () => withoutValidation(() => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n      resetValidation()\n    })\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners,\n      validationAriaAttributes,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus, value: valueComputed })\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueText)\n\n    const canBeClearedComputed = computed(() => (\n      canBeCleared.value && valueText.value !== format(props.clearValue)\n    ))\n\n    const filteredWrapperProps = filterComponentProps(VaInputWrapperProps)\n    const computedInputWrapperProps = computed(() => ({\n      ...filteredWrapperProps.value,\n      focused: isFocused.value,\n      error: computedError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput,\n    }))\n\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        if (props.disabled) { return }\n\n        focusListener()\n\n        if (props.readonly) { return }\n        onFocus()\n        listeners.onFocus()\n      },\n      blur: () => {\n        if (props.disabled) { return }\n\n        blurListener()\n\n        if (props.readonly) { return }\n        onBlur()\n        listeners.onBlur()\n      },\n    }))\n\n    const filteredSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const hideDropdown = () => {\n      doShowDropdown.value = false\n    }\n\n    const showDropdown = (event?: KeyboardEvent, cancel?: boolean, prevent?: boolean) => {\n      doShowDropdown.value = true\n    }\n\n    const checkProhibitedDropdownOpening = (e?: KeyboardEvent) => {\n      if (isOpenSync.value) { return false }\n      if (props.disabled || props.readonly) { return true }\n      return props.manualInput && e?.code !== 'Space'\n    }\n\n    const toggleDropdown = (event: Event | KeyboardEvent) => {\n      if (checkProhibitedDropdownOpening(event instanceof KeyboardEvent ? event : undefined)) { return }\n\n      doShowDropdown.value = !doShowDropdown.value\n    }\n\n    const cursorStyleComputed = computed(() => {\n      if (props.disabled) { return {} }\n      if (props.manualInput) { return { cursor: 'text' } }\n      return { cursor: 'pointer' }\n    })\n\n    const iconTabindexComputed = computed(() => props.disabled || props.readonly ? -1 : 0)\n\n    const iconProps = computed(() => ({\n      role: 'button',\n      'aria-hidden': false,\n      size: 'small',\n      name: props.icon,\n      color: props.color,\n      tabindex: iconTabindexComputed.value,\n    }))\n\n    const { tp } = useTranslation()\n\n    const inputAttributesComputed = computed(() => ({\n      readonly: props.readonly || !props.manualInput,\n      disabled: props.disabled,\n      tabindex: props.disabled ? -1 : 0,\n      value: valueText.value,\n      'aria-label': props.label || tp(props.ariaLabel),\n      'aria-required': props.requiredMark,\n      'aria-disabled': props.disabled,\n      'aria-readonly': props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit(attrs, ['class', 'style']),\n    }))\n\n    const filteredProps = filterComponentProps(VaDropdownProps)\n    const dropdownPropsComputed = computed(() => ({\n      ...filteredProps.value,\n      keyboardNavigation: true,\n      innerAnchorSelector: '.va-input-wrapper__field',\n    }))\n\n    return {\n      tp,\n      input,\n      timePicker,\n\n      timePickerProps: filterComponentProps(extractComponentProps(VaTimePicker)),\n      dropdownPropsComputed,\n      computedInputWrapperProps,\n      computedInputListeners,\n      isOpenSync,\n      doShowDropdown,\n      valueComputed,\n      valueText,\n      onInputTextChanged,\n      canBeClearedComputed,\n      iconProps,\n      clearIconProps,\n      filteredSlots,\n      inputAttributesComputed,\n      cursorStyleComputed,\n\n      hideDropdown,\n      showDropdown,\n      toggleDropdown,\n\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-time-input {\n  min-width: var(--va-time-input-min-width);\n\n  &__anchor {\n    flex: 1;\n  }\n}\n</style>\n"],"names":["_resolveComponent","_openBlock","_createBlock","_mergeProps","_withCtx","_createVNode","_withModifiers","_createSlots","_createElementVNode","_toHandlers","_withKeys","_renderSlot","_normalizeProps","_guardReactiveProps"],"mappings":"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"}