import { _ as _sfc_main } from "./VaTimePickerColumn.vue_vue_type_script_lang.mjs";
import { resolveComponent, openBlock, createElementBlock, withKeys, withModifiers, normalizeStyle, Fragment, renderList, createBlock, withCtx, createElementVNode, normalizeClass, renderSlot, normalizeProps, guardReactiveProps, createTextVNode, toDisplayString } from "vue";
import { _ as _export_sfc } from "../../../../../plugin-vue_export-helper.mjs";
const VaTimePickerColumn_vue_vue_type_style_index_0_lang = "";
const _hoisted_1 = ["onClick"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_VaTimePickerColumnCell = resolveComponent("VaTimePickerColumnCell");
  return openBlock(), createElementBlock("div", {
    ref: "rootElement",
    tabindex: "0",
    class: "va-time-picker-column",
    onKeydown: [
      _cache[0] || (_cache[0] = withKeys(withModifiers(($event) => _ctx.makeActiveNext(), ["stop", "prevent"]), ["down"])),
      _cache[1] || (_cache[1] = withKeys(withModifiers(($event) => _ctx.makeActiveNext(5), ["stop", "prevent"]), ["space"])),
      _cache[2] || (_cache[2] = withKeys(withModifiers(($event) => _ctx.makeActivePrev(), ["stop", "prevent"]), ["up"]))
    ],
    style: normalizeStyle(_ctx.styleComputed)
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, (item, index) => {
      return openBlock(), createBlock(_component_VaTimePickerColumnCell, {
        key: item,
        onScrollPassive: _ctx.onScroll,
        onTouchmovePassive: _ctx.onScroll,
        onMousewheelPassive: _ctx.onScroll
      }, {
        default: withCtx(() => [
          createElementVNode("div", {
            class: normalizeClass(["va-time-picker-cell", { "va-time-picker-cell--active": index === _ctx.$props.activeItemIndex }]),
            onClick: ($event) => _ctx.onCellClick(index)
          }, [
            renderSlot(_ctx.$slots, "cell", normalizeProps(guardReactiveProps({ item, index, activeItemIndex: _ctx.activeItemIndex, items: _ctx.items, formattedItem: _ctx.formatCell(item) })), () => [
              createTextVNode(toDisplayString(_ctx.formatCell(item)), 1)
            ])
          ], 10, _hoisted_1)
        ]),
        _: 2
      }, 1032, ["onScrollPassive", "onTouchmovePassive", "onMousewheelPassive"]);
    }), 128))
  ], 36);
}
const _VaTimePickerColumn = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  _VaTimePickerColumn as _
};
//# sourceMappingURL=VaTimePickerColumn.mjs.map
