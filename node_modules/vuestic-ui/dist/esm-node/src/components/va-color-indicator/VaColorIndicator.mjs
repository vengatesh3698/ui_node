import { _ as _sfc_main } from "./VaColorIndicator.vue_vue_type_script_lang.mjs";
import { openBlock, createElementBlock, mergeProps, withKeys, toHandlers, createElementVNode, normalizeStyle } from "vue";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
const VaColorIndicator_vue_vue_type_style_index_0_lang = "";
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", mergeProps({
    class: ["va-color-indicator", _ctx.computedClass],
    style: typeof _ctx.computedStyle === "object" ? Array.isArray(_ctx.computedStyle) ? [..._ctx.computedStyle, `--va-0-border-radius-computed: ${String(_ctx.borderRadiusComputed)}`] : { ..._ctx.computedStyle, "--va-0-border-radius-computed": String(_ctx.borderRadiusComputed) } : _ctx.computedStyle + `;--va-0-border-radius-computed: ${String(_ctx.borderRadiusComputed)}`,
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.toggleModelValue && _ctx.toggleModelValue(...args)),
    onKeydown: [
      _cache[1] || (_cache[1] = withKeys((...args) => _ctx.toggleModelValue && _ctx.toggleModelValue(...args), ["enter"])),
      _cache[2] || (_cache[2] = withKeys((...args) => _ctx.toggleModelValue && _ctx.toggleModelValue(...args), ["space"]))
    ]
  }, toHandlers(_ctx.keyboardFocusListeners, true)), [
    createElementVNode("div", {
      class: "va-color-indicator__core",
      style: normalizeStyle(_ctx.computedStyle)
    }, null, 4)
  ], 16);
}
const _VaColorIndicatort = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  _VaColorIndicatort as _
};
//# sourceMappingURL=VaColorIndicator.mjs.map
