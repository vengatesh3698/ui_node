import { defineComponent } from "vue";
import { V as VaColorIndicator } from "../va-color-indicator/index.mjs";
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from "../../composables/useStateful.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";
import { u as useTranslation } from "../../composables/useTranslation.mjs";
const _sfc_main = defineComponent({
  name: "VaColorPalette",
  components: { VaColorIndicator },
  emits: [...useStatefulEmits],
  props: {
    ...useStatefulProps,
    ...useComponentPresetProp,
    modelValue: { type: String, default: null },
    palette: { type: Array, default: () => [] },
    indicator: {
      type: String,
      default: "dot",
      validator: (value) => ["dot", "square"].includes(value)
    },
    ariaLabel: { type: String, default: "$t:colorSelection" },
    ariaIndicatorLabel: { type: String, default: "$t:color" }
  },
  setup(props, { emit }) {
    const { valueComputed } = useStateful(props, emit);
    return {
      ...useTranslation(),
      valueComputed,
      isSelected: (color) => valueComputed.value === color
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaColorPalette.vue_vue_type_script_lang.mjs.map
