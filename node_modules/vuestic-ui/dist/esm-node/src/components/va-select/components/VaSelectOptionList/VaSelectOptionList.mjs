import { _ as _sfc_main } from "./VaSelectOptionList.vue_vue_type_script_lang.mjs";
import { resolveComponent, openBlock, createElementBlock, withKeys, withModifiers, Fragment, renderList, toDisplayString, createCommentVNode, createBlock, withCtx, renderSlot, normalizeProps, guardReactiveProps, createVNode, mergeProps } from "vue";
import { _ as _export_sfc } from "../../../../../plugin-vue_export-helper.mjs";
const VaSelectOptionList_vue_vue_type_style_index_0_lang = "";
const _hoisted_1 = ["tabindex"];
const _hoisted_2 = {
  key: 0,
  class: "va-select-option-list__group-name"
};
const _hoisted_3 = {
  key: 0,
  class: "va-select-option-list--empty"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_select_option = resolveComponent("va-select-option");
  const _component_va_virtual_scroller = resolveComponent("va-virtual-scroller");
  return openBlock(), createElementBlock("div", {
    ref: "root",
    class: "va-select-option-list",
    tabindex: _ctx.tabindex,
    onKeydown: [
      _cache[0] || (_cache[0] = withKeys(withModifiers((...args) => _ctx.focusPreviousOption && _ctx.focusPreviousOption(...args), ["stop", "prevent"]), ["up"])),
      _cache[1] || (_cache[1] = withKeys(withModifiers((...args) => _ctx.focusPreviousOption && _ctx.focusPreviousOption(...args), ["stop", "prevent"]), ["left"])),
      _cache[2] || (_cache[2] = withKeys(withModifiers((...args) => _ctx.focusNextOption && _ctx.focusNextOption(...args), ["stop", "prevent"]), ["down"])),
      _cache[3] || (_cache[3] = withKeys(withModifiers((...args) => _ctx.focusNextOption && _ctx.focusNextOption(...args), ["stop", "prevent"]), ["right"])),
      _cache[4] || (_cache[4] = withKeys(withModifiers((...args) => _ctx.selectHoveredOption && _ctx.selectHoveredOption(...args), ["stop", "prevent"]), ["enter"])),
      _cache[5] || (_cache[5] = withKeys(withModifiers((...args) => _ctx.selectHoveredOption && _ctx.selectHoveredOption(...args), ["stop", "prevent"]), ["space"]))
    ],
    onScrollPassive: _cache[6] || (_cache[6] = (...args) => _ctx.onScroll && _ctx.onScroll(...args))
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.optionGroups, (options, groupName) => {
      return openBlock(), createElementBlock(Fragment, { key: groupName }, [
        groupName !== "_noGroup" ? (openBlock(), createElementBlock("span", _hoisted_2, toDisplayString(groupName), 1)) : createCommentVNode("", true),
        _ctx.$props.virtualScroller ? (openBlock(), createBlock(_component_va_virtual_scroller, {
          key: 1,
          ref_for: true,
          ref: "virtualScrollerRef",
          items: options,
          "track-by": _ctx.getTrackBy,
          "wrapper-size": _ctx.rootHeight,
          "onScroll:bottom": _ctx.handleScrollToBottom
        }, {
          default: withCtx(({ item: option, index }) => [
            renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({ option, index, selectOption: _ctx.selectOption })), () => [
              createVNode(_component_va_select_option, mergeProps({
                option,
                "current-option": _ctx.currentOptionComputed,
                disabled: _ctx.getDisabled(option)
              }, _ctx.selectOptionProps, {
                onClick: withModifiers(_ctx.selectHoveredOption, ["stop"]),
                onMouseenter: ($event) => _ctx.handleMouseEnter(option),
                onMousemove: ($event) => _ctx.handleMouseMove(option)
              }), null, 16, ["option", "current-option", "disabled", "onClick", "onMouseenter", "onMousemove"])
            ])
          ]),
          _: 2
        }, 1032, ["items", "track-by", "wrapper-size", "onScroll:bottom"])) : (openBlock(true), createElementBlock(Fragment, { key: 2 }, renderList(options, (option, index) => {
          return renderSlot(_ctx.$slots, "default", normalizeProps(mergeProps({
            key: _ctx.getTrackBy(option)
          }, { option, index, selectOption: _ctx.selectOption })), () => [
            createVNode(_component_va_select_option, mergeProps({
              ref_for: true,
              ref: _ctx.setItemRef(_ctx.getTrackBy(option)),
              "current-option": _ctx.currentOptionComputed,
              option,
              disabled: _ctx.getDisabled(option)
            }, _ctx.selectOptionProps, {
              onClick: withModifiers(_ctx.selectHoveredOption, ["stop"]),
              onMouseenter: ($event) => _ctx.handleMouseEnter(option),
              onMousemove: ($event) => _ctx.handleMouseMove(option)
            }), null, 16, ["current-option", "option", "disabled", "onClick", "onMouseenter", "onMousemove"])
          ]);
        }), 128))
      ], 64);
    }), 128)),
    !_ctx.filteredOptions.length ? (openBlock(), createElementBlock("div", _hoisted_3, toDisplayString(_ctx.noOptionsText), 1)) : createCommentVNode("", true)
  ], 40, _hoisted_1);
}
const _VaSelectOptionList = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  _VaSelectOptionList as _
};
//# sourceMappingURL=VaSelectOptionList.mjs.map
