import { _ as _sfc_main } from "./VaSelectOption.vue_vue_type_script_lang.mjs";
import { resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createBlock, createCommentVNode, createTextVNode, toDisplayString, withDirectives, createVNode, vShow } from "vue";
import { _ as _export_sfc } from "../../../../../plugin-vue_export-helper.mjs";
const VaSelectOption_vue_vue_type_style_index_0_lang = "";
const _hoisted_1 = ["aria-selected"];
const _hoisted_2 = {
  key: 1,
  class: "va-select-option__highlighted"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  return openBlock(), createElementBlock("div", {
    role: "option",
    class: normalizeClass(["va-select-option", _ctx.optionClass]),
    style: normalizeStyle(_ctx.optionStyle),
    "aria-selected": _ctx.isSelected
  }, [
    _ctx.optionIcon ? (openBlock(), createBlock(_component_va_icon, {
      key: 0,
      size: "small",
      class: "va-select-option__icon",
      name: _ctx.optionIcon
    }, null, 8, ["name"])) : createCommentVNode("", true),
    createTextVNode(" " + toDisplayString(_ctx.optionTextSplitted.start) + " ", 1),
    _ctx.optionTextSplitted.searchedSubString ? (openBlock(), createElementBlock("span", _hoisted_2, toDisplayString(_ctx.optionTextSplitted.searchedSubString), 1)) : createCommentVNode("", true),
    createTextVNode(" " + toDisplayString(_ctx.optionTextSplitted.end) + " ", 1),
    withDirectives(createVNode(_component_va_icon, {
      class: "va-select-option__selected-icon",
      size: "small",
      name: "va-check",
      color: _ctx.optionIconColor
    }, null, 8, ["color"]), [
      [vShow, _ctx.isSelected]
    ])
  ], 14, _hoisted_1);
}
const _VaSelectOption = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  _VaSelectOption as _
};
//# sourceMappingURL=VaSelectOption.mjs.map
