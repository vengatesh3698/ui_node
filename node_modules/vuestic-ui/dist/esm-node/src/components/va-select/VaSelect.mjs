import { _ as _sfc_main } from "./VaSelect.vue_vue_type_script_lang.mjs";
import { resolveComponent, openBlock, createBlock, mergeProps, withCtx, createVNode, createSlots, withModifiers, withKeys, createCommentVNode, renderList, renderSlot, normalizeProps, guardReactiveProps, normalizeStyle } from "vue";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
const VaSelect_vue_vue_type_style_index_0_lang = "";
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  const _component_va_select_content = resolveComponent("va-select-content");
  const _component_va_input_wrapper = resolveComponent("va-input-wrapper");
  const _component_va_input = resolveComponent("va-input");
  const _component_va_select_option_list = resolveComponent("va-select-option-list");
  const _component_va_dropdown_content = resolveComponent("va-dropdown-content");
  const _component_va_dropdown = resolveComponent("va-dropdown");
  return openBlock(), createBlock(_component_va_dropdown, mergeProps({
    ref: "dropdown",
    modelValue: _ctx.showDropdownContentComputed,
    "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => _ctx.showDropdownContentComputed = $event),
    class: "va-select va-select__dropdown va-select-dropdown"
  }, _ctx.dropdownPropsComputed), {
    anchor: withCtx(() => [
      createVNode(_component_va_input_wrapper, mergeProps({
        ref: "input",
        class: ["va-select__anchor va-select-anchor__input", _ctx.inputWrapperClassComputed],
        "model-value": _ctx.valueString
      }, _ctx.inputWrapperPropsComputed, {
        onFocus: _ctx.onInputFocus,
        onBlur: _ctx.onInputBlur,
        onClick: _ctx.focusAutocompleteInput
      }), createSlots({
        icon: withCtx(() => [
          _ctx.showClearIcon ? (openBlock(), createBlock(_component_va_icon, mergeProps({
            key: 0,
            role: "button",
            "aria-label": _ctx.tp(_ctx.$props.ariaClearLabel),
            tabindex: "0"
          }, _ctx.clearIconProps, {
            onClick: withModifiers(_ctx.reset, ["stop"]),
            onKeydown: [
              withKeys(withModifiers(_ctx.reset, ["stop"]), ["enter"]),
              withKeys(withModifiers(_ctx.reset, ["stop"]), ["space"])
            ]
          }), null, 16, ["aria-label", "onClick", "onKeydown"])) : createCommentVNode("", true)
        ]),
        appendInner: withCtx(() => [
          createVNode(_component_va_icon, {
            color: _ctx.toggleIconColor,
            name: _ctx.toggleIcon,
            onClick: withModifiers(_ctx.toggleDropdown, ["stop"]),
            class: "va-select__toggle-icon"
          }, null, 8, ["color", "name", "onClick"])
        ]),
        default: withCtx(() => [
          createVNode(_component_va_select_content, mergeProps(_ctx.selectContentPropsComputed, {
            onToggleHidden: _ctx.toggleHiddenOptionsState,
            onAutocompleteInput: _ctx.setAutocompleteValue,
            onFocusPrev: _ctx.focusPreviousOption,
            onFocusNext: _ctx.focusNextOption,
            onSelectOption: _ctx.selectOrAddOption,
            onDeleteLastSelected: _ctx.deleteLastSelected
          }), createSlots({ _: 2 }, [
            renderList(_ctx.$slots, (_, name) => {
              return {
                name,
                fn: withCtx((slotScope) => [
                  renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotScope)))
                ])
              };
            })
          ]), 1040, ["onToggleHidden", "onAutocompleteInput", "onFocusPrev", "onFocusNext", "onSelectOption", "onDeleteLastSelected"])
        ]),
        _: 2
      }, [
        renderList(_ctx.$slots, (_, name) => {
          return {
            name,
            fn: withCtx((slotScope) => [
              renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotScope)))
            ])
          };
        })
      ]), 1040, ["class", "model-value", "onFocus", "onBlur", "onClick"])
    ]),
    default: withCtx(() => [
      createVNode(_component_va_dropdown_content, {
        class: "va-select-dropdown__content",
        style: normalizeStyle({ width: _ctx.$props.width })
      }, {
        default: withCtx(() => [
          _ctx.showSearchInput ? (openBlock(), createBlock(_component_va_input, {
            key: 0,
            ref: "searchBar",
            class: "va-select-dropdown__content-search-input",
            modelValue: _ctx.searchInput,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.searchInput = $event),
            "aria-label": _ctx.tp(_ctx.$props.ariaSearchLabel),
            tabindex: _ctx.tabIndexComputed,
            placeholder: _ctx.tp(_ctx.$props.searchPlaceholderText),
            bordered: "",
            onKeydown: [
              withKeys(withModifiers(_ctx.focusPreviousOption, ["stop", "prevent"]), ["up"]),
              withKeys(withModifiers(_ctx.focusPreviousOption, ["stop", "prevent"]), ["left"]),
              withKeys(withModifiers(_ctx.focusNextOption, ["stop", "prevent"]), ["down"]),
              withKeys(withModifiers(_ctx.focusNextOption, ["stop", "prevent"]), ["right"]),
              withKeys(withModifiers(_ctx.selectOrAddOption, ["prevent"]), ["enter"])
            ],
            onFocus: _cache[1] || (_cache[1] = ($event) => _ctx.hoveredOption = null)
          }, null, 8, ["modelValue", "aria-label", "tabindex", "placeholder", "onKeydown"])) : createCommentVNode("", true),
          createVNode(_component_va_select_option_list, mergeProps({
            ref: "optionList",
            class: "va-select-dropdown__options-wrapper",
            hoveredOption: _ctx.hoveredOption,
            "onUpdate:hoveredOption": _cache[2] || (_cache[2] = ($event) => _ctx.hoveredOption = $event),
            style: { maxHeight: _ctx.$props.maxHeight }
          }, _ctx.optionsListPropsComputed, {
            onSelectOption: _ctx.selectHoveredOption,
            onNoPreviousOptionToHover: _ctx.focusSearchBar,
            onKeydown: [
              _cache[3] || (_cache[3] = withKeys(withModifiers(($event) => _ctx.searchBar && _ctx.searchBar.focus(), ["stop", "prevent"]), ["tab"])),
              _ctx.onHintedSearch
            ],
            onScrollBottom: _ctx.onScrollBottom
          }), {
            default: withCtx((slotData) => [
              renderSlot(_ctx.$slots, "option", normalizeProps(guardReactiveProps(slotData || {})))
            ]),
            _: 3
          }, 16, ["hoveredOption", "style", "onSelectOption", "onNoPreviousOptionToHover", "onKeydown", "onScrollBottom"])
        ]),
        _: 3
      }, 8, ["style"])
    ]),
    _: 3
  }, 16, ["modelValue"]);
}
const _VaSelect = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  _VaSelect as _
};
//# sourceMappingURL=VaSelect.mjs.map
