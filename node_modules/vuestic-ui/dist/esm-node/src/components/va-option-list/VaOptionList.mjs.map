{"version":3,"file":"VaOptionList.mjs","sources":["../../../../../src/components/va-option-list/VaOptionList.vue"],"sourcesContent":["<template>\n  <VaMessageListWrapper\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"$props.errorCount\"\n  >\n    <ul class=\"va-option-list__list\">\n      <li\n        v-for=\"option in $props.options\"\n        :key=\"getTrackBy(option)\"\n      >\n        <slot v-bind=\"{ option, selectedValue, isDisabled, getText, getValue }\">\n          <va-radio\n            v-if=\"$props.type === 'radio'\"\n            :ref=\"setItemRef\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :option=\"getValue(option)\"\n            v-bind=\"computedProps\"\n          />\n          <va-checkbox\n            v-else-if=\"$props.type === 'checkbox'\"\n            :ref=\"setItemRef\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :array-value=\"getValue(option)\"\n            v-bind=\"computedProps\"\n          />\n          <va-switch\n            v-else\n            :ref=\"setItemRef\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :array-value=\"getValue(option)\"\n            v-bind=\"computedProps\"\n          />\n        </slot>\n      </li>\n    </ul>\n  </VaMessageListWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, onMounted } from 'vue'\nimport pick from 'lodash/pick.js'\n\nimport {\n  useComponentPresetProp,\n  useSelectableList, useSelectableListProps, SelectableOption,\n  useValidation, useValidationProps,\n  useStateful, useStatefulProps, useStatefulEmits,\n  useArrayRefs,\n} from '../../composables'\n\nimport { isDev } from '../../utils/env'\n\nimport { VaMessageListWrapper } from '../va-input'\nimport { VaCheckbox } from '../va-checkbox'\nimport { VaRadio } from '../va-radio'\nimport { VaSwitch } from '../va-switch'\n\ntype OptionListValue = SelectableOption | SelectableOption[] | null\n\nexport default defineComponent({\n  name: 'VaOptionList',\n  components: {\n    VaRadio,\n    VaCheckbox,\n    VaSwitch,\n    VaMessageListWrapper,\n  },\n  emits: [...useStatefulEmits, 'clear'],\n  props: {\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...useStatefulProps,\n    type: {\n      type: String as PropType<'radio' | 'checkbox' | 'switch'>,\n      default: 'checkbox',\n      validator: (type: any) => ['radio', 'checkbox', 'switch'].includes(type),\n    },\n    disabled: ({ type: Boolean, default: false }),\n    readonly: ({ type: Boolean, default: false }),\n    defaultValue: ({ type: [String, Number, Boolean, Object, Array] as PropType<OptionListValue | null> }),\n    name: ({ type: String, default: '' }),\n    color: ({ type: String, default: 'primary' }),\n    leftLabel: ({ type: Boolean, default: false }),\n    modelValue: ({ type: [String, Number, Boolean, Object, Array] as PropType<OptionListValue | null> }),\n  },\n\n  setup (props, { emit }) {\n    const { valueComputed } = useStateful(props, emit, 'modelValue', { defaultValue: props.defaultValue })\n\n    const { getValue, getText, getTrackBy, getDisabled } = useSelectableList(props)\n\n    const { itemRefs, setItemRef } = useArrayRefs()\n\n    const isRadio = computed(() => props.type === 'radio')\n\n    const selectedValue = computed({\n      get () {\n        const value = isRadio.value ? null : []\n\n        return valueComputed.value || value as OptionListValue\n      },\n      set (value: OptionListValue) {\n        if (props.readonly) { return }\n\n        if (isRadio.value && !Array.isArray(value)) {\n          valueComputed.value = value ? getValue(value) : value\n        } else {\n          valueComputed.value = Array.isArray(value)\n            ? value.map(getValue)\n            : [value ? getValue(value) : value]\n        }\n      },\n    })\n\n    const isDisabled = (option: SelectableOption) => props.disabled || getDisabled(option)\n\n    const reset = () => withoutValidation(() => {\n      valueComputed.value = null\n      emit('clear')\n      resetValidation()\n    })\n\n    const focus = () => {\n      const firstActiveEl = Array.isArray(itemRefs.value) && itemRefs.value.find(el => !(el as HTMLInputElement).disabled)\n\n      if (firstActiveEl && typeof firstActiveEl.focus === 'function') {\n        firstActiveEl.focus()\n      }\n    }\n\n    const {\n      computedError,\n      computedErrorMessages,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus, value: valueComputed })\n\n    const computedProps = computed(() => pick(props, ['name', 'color', 'readonly', 'leftLabel']))\n\n    onMounted(() => {\n      if (isDev && props.type !== 'radio' && !Array.isArray(props.modelValue)) {\n        console.warn(`Prop 'modelValue = ${props.modelValue}' has not a proper type!\\n For component property 'type = ${props.type}' it must be of type 'array'.`)\n      }\n    })\n\n    return {\n      selectedValue,\n      computedError,\n      computedErrorMessages,\n      getValue,\n      getText,\n      getTrackBy,\n      isDisabled,\n      reset,\n      focus,\n      setItemRef,\n      computedProps,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import 'variables';\n\n.va-option-list {\n  &__list {\n    line-height: var(--va-option-list-line-height);\n    margin: 0;\n    padding: 0;\n    list-style: none;\n    vertical-align: baseline;\n  }\n}\n</style>\n"],"names":["_resolveComponent","_openBlock","_createBlock","_withCtx","_createElementVNode","_createElementBlock","_Fragment","_renderList","_normalizeProps","_guardReactiveProps","_mergeProps"],"mappings":";;;;;;;;;AA0CyB,QAAA,kCAAAA,iBAAA,sBAAA;AAvCpB,SAAAC,UAAA,GAAgBC,YAAqB,iCAAA;AAAA,IACrC,OAAA,KAAA;AAAA,IAAA,kBAAA,KAAA;AAAA,IAqCI,eAAA,KAAA,OAAA;AAAA,EAAA,GAAA;AAAA,IAlCH,SAAAC,QAAA,MAAA;AAAA,MAAAC,mBAAA,MAAA,YAAA;AAAA,SAAAH,UAEQ,IAAiB,GAAAI,mBAAAC,UAAA,MAAAC,WAAA,KAAA,OAAA,SAAA,CAAA,WAAA;;YAEvB,KA4BO,KAAA,WAAA,MAAA;AAAA,UAAA,GAAA;AAAA,oCA3BL,WAQEC,eAAAC,mBAAA,EAAA,QAAA,eAAA,KAAA,eAAA,YAAA,KAAA,YAAA,SAAA,KAAA,SAAA,UAAA,KAAA,UAAA,CAAA,GAAA,MAAA;AAAA,cAAA,KAAA,OAAA,SAAA,WAAAR,UAAA,GAAAC,YAAA,qBAAAQ,WAAA;AAAA,gBANC,KAAK;AAAA,gBAAA,SAAA;AAAA;gBAEL,YAAO,KAAA;AAAA,gBACP,uBAAU,OAAW,CAAM,MAAA,OAAA,CAAA,IAAA,CAAA,WAAA,KAAA,gBAAA;AAAA,gBAC3B,OAAM,KAAE,QAAS,MAAA;AAAA,gBAAA,UACV,KAAa,WAAA,MAAA;AAAA,gBAGV,aAAO,SAAI,MAAA;AAAA,cAAA,GADxB,KAAA,aAAA,GAAA,MAQE,4BARF,YAQE,QAAA,CAAA,KAAA,KAAA,OAAA,SAAA,cAAAT,aAAAC,YAAA,wBAAAQ,WAAA;AAAA,gBANC,KAAK;AAAA,gBAAA,SAAA;AAAA;gBAEL,YAAO,KAAA;AAAA,gBACP,uBAAU,OAAW,CAAM,MAAA,OAAA,CAAA,IAAA,CAAA,WAAA,KAAA,gBAAA;AAAA,gBAC3B,OAAa,KAAA,QAAA,MAAA;AAAA,gBAAA,UACN,KAAa,WAAA,MAAA;AAAA,gBAAA,eAEvB,KAQE,SAAA,MAAA;AAAA,cAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,CAAA,cAAA,SAAA,YAAA,aAAA,CAAA,MAAAT,UAAA,GAAAC,YAAA,sBAAAQ,WAAA;AAAA,gBANC,KAAK;AAAA,gBAAA,SAAA;AAAA;gBAEL,YAAO,KAAA;AAAA,gBACP,uBAAU,OAAW,CAAM,MAAA,OAAA,CAAA,IAAA,CAAA,WAAA,KAAA,gBAAA;AAAA,gBAC3B,OAAa,KAAA,QAAA,MAAA;AAAA,gBAAA,UACN,KAAa,WAAA,MAAA;AAAA,gBAAA,eAAA,KAAA,SAAA,MAAA;AAAA;;;;;;;;;;"}