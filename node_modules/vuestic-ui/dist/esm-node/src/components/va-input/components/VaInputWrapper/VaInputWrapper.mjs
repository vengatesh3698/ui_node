import { _ as _sfc_main } from "./VaInputWrapper.vue_vue_type_script_lang.mjs";
import { resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, renderSlot, createCommentVNode, createTextVNode, toDisplayString, createBlock, normalizeProps, guardReactiveProps } from "vue";
import { _ as _export_sfc } from "../../../../../plugin-vue_export-helper.mjs";
const VaInputWrapper_vue_vue_type_style_index_0_lang = "";
const _hoisted_1 = { class: "va-input-wrapper__container" };
const _hoisted_2 = { class: "va-input-wrapper__field" };
const _hoisted_3 = { class: "va-input-wrapper__text" };
const _hoisted_4 = {
  key: 0,
  class: "va-input-wrapper__required-mark"
};
const _hoisted_5 = {
  key: 0,
  class: "va-input-wrapper__bottom"
};
const _hoisted_6 = { class: "va-input-wrapper__bottom-counter" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  const _component_va_message_list = resolveComponent("va-message-list");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-input-wrapper", _ctx.wrapperClass]),
    style: normalizeStyle(typeof _ctx.wrapperStyle === "object" ? Array.isArray(_ctx.wrapperStyle) ? [..._ctx.wrapperStyle, `--va-0-background-computed: ${String(_ctx.backgroundComputed)};--va-1-text-color-computed: ${String(_ctx.textColorComputed)}`] : { ..._ctx.wrapperStyle, "--va-0-background-computed": String(_ctx.backgroundComputed), "--va-1-text-color-computed": String(_ctx.textColorComputed) } : _ctx.wrapperStyle + `;--va-0-background-computed: ${String(_ctx.backgroundComputed)};--va-1-text-color-computed: ${String(_ctx.textColorComputed)}`),
    onClick: _cache[4] || (_cache[4] = ($event) => _ctx.$emit("click", $event))
  }, [
    createElementVNode("div", _hoisted_1, [
      _ctx.$slots.prepend ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: "va-input-wrapper__prepend-inner",
        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("click-prepend"))
      }, [
        renderSlot(_ctx.$slots, "prepend")
      ])) : createCommentVNode("", true),
      createElementVNode("div", _hoisted_2, [
        _ctx.$slots.prependInner ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "va-input-wrapper__prepend-inner",
          ref: "container",
          style: normalizeStyle(_ctx.containerStyle),
          onClick: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("click-prepend-inner", $event))
        }, [
          renderSlot(_ctx.$slots, "prependInner")
        ], 4)) : createCommentVNode("", true),
        createElementVNode("div", _hoisted_3, [
          _ctx.label ? (openBlock(), createElementBlock("label", {
            key: 0,
            "aria-hidden": "true",
            class: "va-input-wrapper__label",
            style: normalizeStyle({ color: _ctx.colorComputed })
          }, [
            createTextVNode(toDisplayString(_ctx.label) + " ", 1),
            _ctx.requiredMark ? (openBlock(), createElementBlock("span", _hoisted_4, " * ")) : createCommentVNode("", true)
          ], 4)) : createCommentVNode("", true),
          renderSlot(_ctx.$slots, "default")
        ]),
        _ctx.success ? (openBlock(), createBlock(_component_va_icon, {
          key: 1,
          color: "success",
          name: "va-check-circle",
          size: "small",
          class: "va-input-wrapper__icon va-input-wrapper__icon--success"
        })) : createCommentVNode("", true),
        _ctx.error ? (openBlock(), createBlock(_component_va_icon, {
          key: 2,
          color: "danger",
          name: "va-warning",
          size: "small",
          class: "va-input-wrapper__icon va-input-wrapper__icon--error"
        })) : createCommentVNode("", true),
        _ctx.$props.loading ? (openBlock(), createBlock(_component_va_icon, {
          key: 3,
          color: _ctx.$props.color,
          size: "small",
          name: "va-loading",
          spin: "counter-clockwise",
          class: "va-input-wrapper__icon va-input-wrapper__icon--loading"
        }, null, 8, ["color"])) : createCommentVNode("", true),
        renderSlot(_ctx.$slots, "icon"),
        _ctx.$slots.appendInner ? (openBlock(), createElementBlock("div", {
          key: 4,
          class: "va-input-wrapper__append-inner",
          onClick: _cache[2] || (_cache[2] = ($event) => _ctx.$emit("click-append-inner", $event))
        }, [
          renderSlot(_ctx.$slots, "appendInner")
        ])) : createCommentVNode("", true)
      ]),
      _ctx.$slots.append ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: "va-input-wrapper__append-inner",
        onClick: _cache[3] || (_cache[3] = ($event) => _ctx.$emit("click-append"))
      }, [
        renderSlot(_ctx.$slots, "append")
      ])) : createCommentVNode("", true)
    ]),
    _ctx.isCounterVisible ? (openBlock(), createElementBlock("div", _hoisted_5, [
      renderSlot(_ctx.$slots, "counter", normalizeProps(guardReactiveProps({ valueLength: _ctx.$props.counterValue, maxLength: _ctx.$props.maxLength })), () => [
        createElementVNode("div", _hoisted_6, toDisplayString(_ctx.counterComputed), 1)
      ])
    ])) : createCommentVNode("", true),
    renderSlot(_ctx.$slots, "messages", normalizeProps(guardReactiveProps({ messages: _ctx.messagesComputed, errorLimit: _ctx.errorLimit, color: _ctx.messagesColor })), () => [
      _ctx.hasMessages ? (openBlock(), createBlock(_component_va_message_list, {
        key: 0,
        color: _ctx.messagesColor,
        "model-value": _ctx.messagesComputed,
        limit: _ctx.errorLimit
      }, null, 8, ["color", "model-value", "limit"])) : createCommentVNode("", true)
    ])
  ], 6);
}
const VaInputWrapper = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  VaInputWrapper as V
};
//# sourceMappingURL=VaInputWrapper.mjs.map
