{"version":3,"file":"useAccordion.mjs","sources":["../../../../../../src/components/va-accordion/hooks/useAccordion.ts"],"sourcesContent":["import { computed, inject, onBeforeUnmount, onMounted, provide, Ref, ref, watch, WritableComputedRef } from 'vue'\n\nexport const AccordionServiceKey = Symbol('AccordionService')\n\nexport interface AccordionItemProps {\n  inset?: boolean,\n  popout?: boolean\n}\n\nexport interface AccordionProps extends AccordionItemProps {\n  modelValue: boolean[],\n  multiple: boolean,\n}\n\nexport interface AccordionItem {\n  state: WritableComputedRef<boolean>\n}\n\nexport interface AccordionInject {\n  onItemMounted: (item: AccordionItem) => void,\n  onItemUnmounted: (item: AccordionItem) => void,\n  onItemChanged: (changedItem: AccordionItem) => void,\n  props: Ref<AccordionItemProps>,\n}\n\n/**\n * @param props\n * @param state array of states of all accordion items */\nexport const useAccordion = (props: AccordionProps, state: WritableComputedRef<boolean[]>) => {\n  /** @notice items are reactive because they have reactive `state` inside */\n  let items: AccordionItem[] = []\n\n  const onItemMounted = (item: AccordionItem) => { items.push(item) }\n  const onItemUnmounted = (item: AccordionItem) => { items = items.filter((i) => i !== item) }\n  const onItemChanged = (changedItem: AccordionItem) => {\n    state.value = items\n      .map((item: AccordionItem) => {\n        if (item === changedItem) {\n          return item.state.value\n        }\n\n        if (!props.multiple) {\n          item.state.value = false\n        }\n\n        return item.state.value\n      })\n  }\n\n  provide(AccordionServiceKey, {\n    isInsideAccordion: true,\n    onItemMounted,\n    onItemUnmounted,\n    onItemChanged,\n    props: computed(() => props),\n  })\n\n  const updateItemStates = () => {\n    items.forEach((item: AccordionItem, index: number) => {\n      item.state.value = state.value[index]\n    })\n  }\n\n  onMounted(updateItemStates)\n  watch(state, updateItemStates)\n\n  return { items }\n}\n\n/**\n * Hook used in items that should react on VaAccordion changes\n * @param state shows if accordion item is open\n */\nexport const useAccordionItem = (state: WritableComputedRef<boolean>) => {\n  const accordion = inject<AccordionInject>(AccordionServiceKey, {\n    props: ref({ inset: undefined, popout: undefined }),\n    onItemChanged: () => undefined,\n    onItemMounted: () => undefined,\n    onItemUnmounted: () => undefined,\n  })\n\n  const item = { state }\n\n  onMounted(() => accordion.onItemMounted(item))\n  onBeforeUnmount(() => accordion.onItemUnmounted(item))\n\n  return {\n    accordionProps: accordion.props,\n\n    toggle: () => {\n      /** Toggle collapse value and notify accordion about it */\n      state.value = !state.value\n      accordion.onItemChanged(item)\n    },\n  }\n}\n"],"names":[],"mappings":";AAEa,MAAA,sBAAsB,OAAO,kBAAkB;AA0B/C,MAAA,eAAe,CAAC,OAAuB,UAA0C;AAE5F,MAAI,QAAyB,CAAA;AAEvB,QAAA,gBAAgB,CAAC,SAAwB;AAAE,UAAM,KAAK,IAAI;AAAA,EAAA;AAC1D,QAAA,kBAAkB,CAAC,SAAwB;AAAE,YAAQ,MAAM,OAAO,CAAC,MAAM,MAAM,IAAI;AAAA,EAAA;AACnF,QAAA,gBAAgB,CAAC,gBAA+B;AACpD,UAAM,QAAQ,MACX,IAAI,CAAC,SAAwB;AAC5B,UAAI,SAAS,aAAa;AACxB,eAAO,KAAK,MAAM;AAAA,MACpB;AAEI,UAAA,CAAC,MAAM,UAAU;AACnB,aAAK,MAAM,QAAQ;AAAA,MACrB;AAEA,aAAO,KAAK,MAAM;AAAA,IAAA,CACnB;AAAA,EAAA;AAGL,UAAQ,qBAAqB;AAAA,IAC3B,mBAAmB;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO,SAAS,MAAM,KAAK;AAAA,EAAA,CAC5B;AAED,QAAM,mBAAmB,MAAM;AACvB,UAAA,QAAQ,CAAC,MAAqB,UAAkB;AACpD,WAAK,MAAM,QAAQ,MAAM,MAAM,KAAK;AAAA,IAAA,CACrC;AAAA,EAAA;AAGH,YAAU,gBAAgB;AAC1B,QAAM,OAAO,gBAAgB;AAE7B,SAAO,EAAE,MAAM;AACjB;AAMa,MAAA,mBAAmB,CAAC,UAAwC;AACjE,QAAA,YAAY,OAAwB,qBAAqB;AAAA,IAC7D,OAAO,IAAI,EAAE,OAAO,QAAW,QAAQ,QAAW;AAAA,IAClD,eAAe,MAAM;AAAA,IACrB,eAAe,MAAM;AAAA,IACrB,iBAAiB,MAAM;AAAA,EAAA,CACxB;AAEK,QAAA,OAAO,EAAE;AAEf,YAAU,MAAM,UAAU,cAAc,IAAI,CAAC;AAC7C,kBAAgB,MAAM,UAAU,gBAAgB,IAAI,CAAC;AAE9C,SAAA;AAAA,IACL,gBAAgB,UAAU;AAAA,IAE1B,QAAQ,MAAM;AAEN,YAAA,QAAQ,CAAC,MAAM;AACrB,gBAAU,cAAc,IAAI;AAAA,IAC9B;AAAA,EAAA;AAEJ;"}