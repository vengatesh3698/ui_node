import { defineComponent, computed } from "vue";
import { T as TreeViewKey } from "../../types.mjs";
import { V as VaCheckbox } from "../../../va-checkbox/index.mjs";
import { u as useStrictInject } from "../../../../composables/useStrictInject.mjs";
import { V as VaIcon } from "../../../va-icon/index.mjs";
import { u as useBem } from "../../../../composables/useBem.mjs";
const INJECTION_ERROR_MESSAGE = "The VaTreeNode component should be used in the context of VaTreeView component";
const _sfc_main = defineComponent({
  name: "VaTreeNode",
  props: {
    node: {
      type: Object,
      required: true
    }
  },
  components: { VaCheckbox, VaIcon },
  setup: (props) => {
    const {
      iconBy,
      selectable,
      expandNodeBy,
      colorComputed,
      selectedNodeComputed,
      getText,
      getTrackBy,
      toggleNode,
      toggleCheckbox,
      getNodeProperty,
      handleKeyboardNavigation
    } = useStrictInject(TreeViewKey, INJECTION_ERROR_MESSAGE);
    const labelComputed = computed(() => getText(props.node) || "");
    const isExpandedComputed = computed(() => props.node.hasChildren ? !!props.node.expanded : void 0);
    const iconComputed = computed(() => getNodeProperty(props.node, iconBy));
    const roleComputed = computed(() => props.node.hasChildren ? "group" : "treeitem");
    const treeNodeClassComputed = useBem("va-tree-node", () => ({
      disabled: !!props.node.disabled
    }));
    const expandedClassComputed = useBem("va-tree-node-children", () => ({
      expanded: !!isExpandedComputed.value
    }));
    const indentClassComputed = useBem("va-tree-node-content", () => ({
      indent: props.node.hasChildren === false
    }));
    const cursorClassComputed = useBem("va-tree-node-content", () => ({
      clickable: props.node.hasChildren === true && expandNodeBy === "node"
    }));
    const tabIndexComputed = computed(() => props.node.disabled ? -1 : 0);
    const onNodeClick = (type) => {
      const nodeType = expandNodeBy === "node" && type === "leaf" ? "node" : type;
      if (expandNodeBy === nodeType) {
        toggleNode(props.node);
      }
      selectedNodeComputed.value = props.node;
    };
    return {
      selectable,
      expandNodeBy,
      getText,
      getTrackBy,
      toggleNode,
      onNodeClick,
      handleKeyboardNavigation,
      toggleCheckbox,
      roleComputed,
      iconComputed,
      labelComputed,
      colorComputed,
      tabIndexComputed,
      indentClassComputed,
      isExpandedComputed,
      expandedClassComputed,
      treeNodeClassComputed,
      cursorClassComputed
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaTreeNode.vue_vue_type_script_lang.mjs.map
