import { _ as _sfc_main } from "./VaDataTableThRow.vue_vue_type_script_lang.mjs";
import { resolveComponent, openBlock, createElementBlock, createBlock, createCommentVNode, Fragment, renderList, mergeProps, withModifiers, withKeys, createElementVNode, renderSlot, normalizeProps, guardReactiveProps, toDisplayString, normalizeClass } from "vue";
import { _ as _export_sfc } from "../../../../plugin-vue_export-helper.mjs";
const VaDataTableThRow_vue_vue_type_style_index_0_lang = "";
const _hoisted_1 = { class: "va-data-table__table-tr" };
const _hoisted_2 = {
  key: 0,
  scope: "col",
  class: "va-data-table__table-th va-data-table__table-cell-select"
};
const _hoisted_3 = ["title", "onClick", "onKeydown"];
const _hoisted_4 = { class: "va-data-table__table-th-wrapper" };
const _hoisted_5 = { key: 0 };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_checkbox = resolveComponent("va-checkbox");
  const _component_va_icon = resolveComponent("va-icon");
  return openBlock(), createElementBlock("tr", _hoisted_1, [
    _ctx.$props.selectable ? (openBlock(), createElementBlock("th", _hoisted_2, [
      _ctx.multiplySelectAvailable ? (openBlock(), createBlock(_component_va_checkbox, {
        key: 0,
        class: "va-data-table__table-cell-checkbox",
        "model-value": _ctx.$props.severalRowsSelected ? "idl" : _ctx.$props.allRowsSelected,
        "aria-label": _ctx.tp(_ctx.$props.ariaSelectAllRowsLabel),
        "true-value": true,
        "false-value": false,
        color: _ctx.$props.selectedColor,
        "indeterminate-value": "idl",
        indeterminate: "",
        "onUpdate:modelValue": _ctx.toggleBulkSelection
      }, null, 8, ["model-value", "aria-label", "color", "onUpdate:modelValue"])) : createCommentVNode("", true)
    ])) : createCommentVNode("", true),
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.columns, (column) => {
      return openBlock(), createElementBlock("th", mergeProps({
        key: column.name,
        scope: "col",
        class: ["va-data-table__table-th", _ctx.getClass(column.thClass)],
        title: column.thTitle,
        style: _ctx.getColumnStyles(column)
      }, _ctx.getAriaAttributes(column), {
        onClick: withModifiers(($event) => _ctx.sortByColumn(column), ["exact"]),
        onKeydown: withKeys(withModifiers(($event) => _ctx.sortByColumn(column), ["stop"]), ["enter"])
      }), [
        createElementVNode("div", _hoisted_4, [
          `${_ctx.slotNameComputed}(${column.name})` in _ctx.$slots ? (openBlock(), createElementBlock("span", _hoisted_5, [
            renderSlot(_ctx.$slots, `${_ctx.slotNameComputed}(${column.name})`, normalizeProps(guardReactiveProps({ label: column.label, key: column.key })))
          ])) : renderSlot(_ctx.$slots, _ctx.slotNameComputed, normalizeProps(mergeProps({ key: 1 }, { label: column.label, key: column.key })), () => [
            createElementVNode("span", null, toDisplayString(column.label), 1)
          ]),
          column.sortable ? (openBlock(), createBlock(_component_va_icon, {
            key: 2,
            class: normalizeClass(["va-data-table__table-th-sorting-icon", { active: _ctx.sortBySync === column.name && _ctx.sortingOrderSync !== null }]),
            size: "small",
            role: column.sortable ? "button" : void 0,
            tabindex: column.sortable ? 0 : -1,
            name: _ctx.sortingOrderIconName,
            onSelectstart: _cache[0] || (_cache[0] = withModifiers(() => {
            }, ["prevent"]))
          }, null, 8, ["class", "role", "tabindex", "name"])) : createCommentVNode("", true)
        ])
      ], 16, _hoisted_3);
    }), 128))
  ]);
}
const _VaDataTableThRow = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  _VaDataTableThRow as _
};
//# sourceMappingURL=VaDataTableThRow.mjs.map
