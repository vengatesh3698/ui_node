import { defineComponent, ref, onMounted, onBeforeUnmount, computed } from "vue";
import { u as useColors } from "../../composables/useColors.mjs";
import { u as useBem } from "../../composables/useBem.mjs";
import { u as useTranslation } from "../../composables/useTranslation.mjs";
const _sfc_main = defineComponent({
  name: "VaSkeleton",
  props: {
    color: { type: String, default: "backgroundElement" },
    delay: { type: Number, default: 100 },
    tag: { type: String, default: "div" },
    animation: { type: String, default: "pulse" },
    lines: { type: Number, default: 1 },
    height: { type: [String], default: "5em" },
    width: { type: [String], default: "100%" },
    lineGap: { type: String, default: "8px" },
    lastLineWidth: { type: [String], default: "75%" },
    variant: { type: String, default: "squared" },
    ariaLabel: { type: String, default: "$t:loading" }
  },
  setup(props, { attrs }) {
    const doShow = ref(false);
    let timeoutId;
    onMounted(() => {
      clearTimeout(timeoutId);
      setTimeout(() => {
        doShow.value = true;
      }, props.delay);
    });
    onBeforeUnmount(() => {
      clearTimeout(timeoutId);
    });
    const heightComputed = computed(() => {
      if (props.variant === "text") {
        return `${props.lines}em`;
      }
      return props.height;
    });
    const widthComputed = computed(() => {
      if (props.variant === "circle") {
        return heightComputed.value;
      }
      return props.width;
    });
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const negativeLineGap = computed(() => `-${props.lineGap}`);
    const bem = useBem("va-skeleton", () => ({
      lines: props.lines > 1,
      text: props.variant === "text",
      circle: props.variant === "circle",
      hidden: !doShow.value,
      pulse: props.animation === "pulse",
      wave: props.animation === "wave"
    }));
    const borderRadius = computed(() => {
      if (props.variant === "circle") {
        return "50%";
      }
      if (props.variant === "rounded") {
        return `var(--va-skeleton-border-radius, calc(${heightComputed.value} / 5))`;
      }
      return "0px";
    });
    return {
      ...useTranslation(),
      classes: computed(() => [
        ...Object.keys(bem),
        attrs.class
      ]),
      colorComputed,
      negativeLineGap,
      doShow,
      heightComputed,
      widthComputed,
      borderRadius
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaSkeleton.vue_vue_type_script_lang.mjs.map
