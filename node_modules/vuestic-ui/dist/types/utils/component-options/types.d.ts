import type { ComponentOptionsBase, DefineComponent } from 'vue';
export type ComponentProps<T> = T extends new () => {
    $props: infer P;
} ? NonNullable<P> : T extends (props: infer P, ...args: any) => any ? P : {};
export type ComponentEmit<T> = T extends new () => {
    $emit: infer E;
} ? NonNullable<E> : T extends (props: any, ctx: {
    emit: infer E;
}, ...args: any) => any ? NonNullable<E> : {};
export type DefineComponentOptions = ComponentOptionsBase<any, any, any, any, any, any, any, any>;
declare type ExtractDefineComponentPropsType<T> = T extends DefineComponent<infer P, any, any> ? P : false;
export type ExtractComponentProps<T extends DefineComponentOptions> = true extends boolean ? ExtractDefineComponentPropsType<T> : never;
export type ExtractComponentEmits<T> = T extends ComponentOptionsBase<any, any, any, any, any, any, any, infer E> ? E : [];
export type ExtractComponentPropTypes<T extends DefineComponentOptions> = ComponentProps<T>;
export {};
