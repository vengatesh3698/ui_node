import type { ColorVariables, CssColor } from '../services/color';
import { type ColorInput } from '../services/color/utils';
/**
 * You can add these props to any component by destructuring them inside props option.
 * @example
 * props: { ...useColorProps, componentsOwnProp, etc. }
 * It's better to add props at the beginning to make sure that component own props will be used instead in case of collision.
 */
export declare const useColorProps: {
    color: {
        type: StringConstructor;
        default: string;
    };
};
export declare const useColors: () => {
    colors: ColorVariables;
    currentPresetName: import("vue").WritableComputedRef<string>;
    presets: import("vue").ComputedRef<{
        [presetName: string]: ColorVariables;
        light: ColorVariables;
        dark: ColorVariables;
    }>;
    applyPreset: (presetName: string) => boolean | undefined;
    setColors: (colors: Partial<ColorVariables>) => void;
    getColors: () => ColorVariables;
    getColor: (prop?: string, defaultColor?: string, preferVariables?: boolean) => CssColor;
    getComputedColor: (color: string) => import("vue").WritableComputedRef<string>;
    getBoxShadowColor: (color: ColorInput, opacity?: number) => string;
    getBoxShadowColorFromBg: (background: ColorInput, opacity?: number) => string;
    getHoverColor: (color: ColorInput, opacity?: number) => string;
    getFocusColor: (color: ColorInput, opacity?: number) => string;
    getGradientBackground: (color: string) => string;
    getTextColor: (color: ColorInput, darkColor?: string, lightColor?: string) => string;
    shiftHSLAColor: (color: ColorInput, offset: {
        h?: number | undefined;
        s?: number | undefined;
        l?: number | undefined;
        a?: number | undefined;
    }) => string;
    setHSLAColor: (color: ColorInput, newColor: {
        h?: number | undefined;
        s?: number | undefined;
        l?: number | undefined;
        a?: number | undefined;
    }) => string;
    colorsToCSSVariable: (colors: {
        [colorName: string]: string | undefined;
    }, prefix?: string) => Record<string, any>;
    colorToRgba: (color: ColorInput, opacity: number) => string;
    getStateMaskGradientBackground: (color: string, maskColor: string, maskOpacity: number) => string;
};
export * from '../services/color/utils';
export * from '../services/color';
