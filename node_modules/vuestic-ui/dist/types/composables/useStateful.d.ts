import { PropType } from 'vue';
export type StatefulProps = {
    stateful: boolean;
};
export type StatefulOptions<T> = {
    eventName?: string;
    defaultValue: T;
};
/**
 * You could add these props to any component by destructuring them inside props option.
 * @example
 * props: { ...useStatefulProps, componentsOwnProp, etc. }
 * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision
 */
export declare const useStatefulProps: {
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: any;
    };
};
export declare const createStatefulProps: <T>(modelValueType?: T | undefined, statefulDefault?: boolean) => {
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: T | undefined;
    };
};
export declare const useStatefulEmits: readonly ["update:modelValue"];
/**
 * Returns `valueComputed` that is proxy for `modelValue` or given key of the props
 * if `stateful` prop is `false`
 * Record<any, any> & Record<'modelValue', T>
 */
export declare const useStateful: <Props extends StatefulProps, Name extends string, Key extends keyof Props>(props: Props, emit: (name: Name, ...args: any[]) => void, key?: Key, options?: StatefulOptions<Props[Key]>) => {
    valueComputed: import("vue").WritableComputedRef<any>;
};
