import { PropType } from 'vue';
import { DatePickerModelValue, DatePickerType, DatePickerView } from './types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<DatePickerModelValue>;
    };
    monthNames: {
        type: PropType<string[]>;
        default: string[];
    };
    weekdayNames: {
        type: PropType<string[]>;
        default: string[];
    };
    view: {
        type: PropType<DatePickerView>;
    };
    type: {
        type: PropType<DatePickerType>;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: undefined;
    };
    weekendsColor: {
        type: StringConstructor;
        default: undefined;
    };
    allowedYears: {
        type: PropType<(date: Date) => boolean>;
        default: undefined;
    };
    highlightToday: {
        type: BooleanConstructor;
        default: boolean;
    };
    startYear: {
        type: NumberConstructor;
        default: number;
    };
    mode: {
        type: PropType<import("./types").DatePickerMode>;
        default: string;
    };
    endYear: {
        type: NumberConstructor;
        default: () => number;
    };
    allowedMonths: {
        type: PropType<(date: Date) => boolean>;
        default: undefined;
    };
    firstWeekday: {
        type: PropType<"Monday" | "Sunday">;
        default: string;
    };
    hideWeekDays: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOtherMonths: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowedDays: {
        type: PropType<(date: Date) => boolean>;
    };
    weekends: {
        type: PropType<(date: Date) => boolean>;
    };
    highlightWeekend: {
        type: BooleanConstructor;
        default: boolean;
    };
    textColor: {
        type: StringConstructor;
    };
    ariaNextPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaPreviousPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSwitchViewLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    dayPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        monthNames: {
            type: PropType<string[]>;
            required: true;
        };
        weekdayNames: {
            type: PropType<string[]>;
            required: true;
        };
        firstWeekday: {
            type: PropType<"Monday" | "Sunday">;
            default: string;
        };
        hideWeekDays: {
            type: BooleanConstructor;
            default: boolean;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        showOtherMonths: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowedDays: {
            type: PropType<(date: Date) => boolean>;
        };
        weekends: {
            type: PropType<(date: Date) => boolean>;
        };
        highlightWeekend: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>>;
    headerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        monthNames: {
            type: ArrayConstructor;
            required: true;
        };
        view: {
            type: PropType<DatePickerView>;
        };
        color: {
            type: StringConstructor;
        };
        textColor: {
            type: StringConstructor;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        ariaNextPeriodLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaPreviousPeriodLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaSwitchViewLabel: {
            type: StringConstructor;
            default: string;
        };
    }>>;
    monthPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        monthNames: {
            type: PropType<string[]>;
            required: true;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        allowedMonths: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>>;
    yearPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        allowedYears: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        startYear: {
            type: NumberConstructor;
            default: number;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        endYear: {
            type: NumberConstructor;
            default: () => number;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>>;
    syncView: import("vue").WritableComputedRef<DatePickerView>;
    classComputed: import("vue").ComputedRef<{
        'va-date-picker_without-week-days': boolean;
        'va-date-picker_disabled': boolean;
    }>;
    valueComputed: import("vue").WritableComputedRef<any>;
    onDayModelValueUpdate: (modelValue: DatePickerModelValue) => void;
    onMonthClick: (date: Date) => void;
    onMonthModelValueUpdate: (modelValue: DatePickerModelValue) => void;
    onYearClick: (date: Date) => void;
    onYearModelValueUpdate: (modelValue: DatePickerModelValue) => void;
    styleComputed: import("vue").ComputedRef<{
        color: string;
    }>;
    currentPicker: import("vue").Ref<import("vue").DefineComponent<{
        monthNames: {
            type: PropType<string[]>;
            required: true;
        };
        weekdayNames: {
            type: PropType<string[]>;
            required: true;
        };
        firstWeekday: {
            type: PropType<"Monday" | "Sunday">;
            default: string;
        };
        hideWeekDays: {
            type: BooleanConstructor;
            default: boolean;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        showOtherMonths: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowedDays: {
            type: PropType<(date: Date) => boolean>;
        };
        weekends: {
            type: PropType<(date: Date) => boolean>;
        };
        highlightWeekend: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }, {
        hoveredIndex: import("vue").Ref<number>;
        calendarDates: import("vue").ComputedRef<Date[]>;
        onClick: (date: Date) => void;
        isToday: (date: Date) => boolean;
        isSelected: (date: Date) => boolean;
        isInRange: (date: Date) => boolean;
        isOtherMonth: (date: Date) => boolean;
        isDateDisabled: (date: Date) => boolean;
        isDateWeekend: (date: Date) => boolean;
        containerAttributes: {
            onFocus: () => void;
            onKeydown: (e: KeyboardEvent) => void;
            onBlur: () => void;
            onMousedown: () => void;
            tabindex: number;
        };
        weekdayNamesComputed: import("vue").ComputedRef<string[]>;
        focusedCellIndex: import("vue").Ref<number>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:day" | "click:day")[], "update:modelValue" | "hover:day" | "click:day", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        monthNames: {
            type: PropType<string[]>;
            required: true;
        };
        weekdayNames: {
            type: PropType<string[]>;
            required: true;
        };
        firstWeekday: {
            type: PropType<"Monday" | "Sunday">;
            default: string;
        };
        hideWeekDays: {
            type: BooleanConstructor;
            default: boolean;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        showOtherMonths: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowedDays: {
            type: PropType<(date: Date) => boolean>;
        };
        weekends: {
            type: PropType<(date: Date) => boolean>;
        };
        highlightWeekend: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onHover:day"?: ((...args: any[]) => any) | undefined;
        "onClick:day"?: ((...args: any[]) => any) | undefined;
    }, {
        color: string;
        mode: import("./types").DatePickerMode;
        readonly: boolean;
        view: DatePickerView;
        highlightWeekend: boolean;
        highlightToday: boolean;
        firstWeekday: "Monday" | "Sunday";
        hideWeekDays: boolean;
        showOtherMonths: boolean;
    }> | import("vue").DefineComponent<{
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        monthNames: {
            type: PropType<string[]>;
            required: true;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        allowedMonths: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }, {
        months: import("vue").ComputedRef<Date[]>;
        hoveredIndex: import("vue").Ref<number>;
        onClick: (date: Date) => void;
        isToday: (date: Date) => boolean;
        isSelected: (date: Date) => boolean;
        isInRange: (date: Date) => boolean;
        isDisabled: (date: Date) => boolean;
        containerAttributes: {
            onFocus: () => void;
            onKeydown: (e: KeyboardEvent) => void;
            onBlur: () => void;
            onMousedown: () => void;
            tabindex: number;
        };
        focusedCellIndex: import("vue").Ref<number>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:month" | "click:month")[], "update:modelValue" | "hover:month" | "click:month", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        monthNames: {
            type: PropType<string[]>;
            required: true;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        allowedMonths: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onHover:month"?: ((...args: any[]) => any) | undefined;
        "onClick:month"?: ((...args: any[]) => any) | undefined;
    }, {
        color: string;
        mode: import("./types").DatePickerMode;
        readonly: boolean;
        view: DatePickerView;
        highlightToday: boolean;
        allowedMonths: (date: Date) => boolean;
    }> | import("vue").DefineComponent<{
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        allowedYears: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        startYear: {
            type: NumberConstructor;
            default: number;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        endYear: {
            type: NumberConstructor;
            default: () => number;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }, {
        hoveredIndex: import("vue").Ref<number>;
        years: import("vue").ComputedRef<Date[]>;
        rootNode: import("vue").ShallowRef<HTMLElement | undefined>;
        onClick: (date: Date) => void;
        isToday: (date: Date) => boolean;
        isSelected: (date: Date) => boolean;
        isInRange: (date: Date) => boolean;
        isYearDisabled: (year: Date) => boolean;
        focusedCellIndex: import("vue").Ref<number>;
        containerAttributes: {
            onFocus: () => void;
            onKeydown: (e: KeyboardEvent) => void;
            onBlur: () => void;
            onMousedown: () => void;
            tabindex: number;
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:year" | "click:year")[], "update:modelValue" | "hover:year" | "click:year", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        allowedYears: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        startYear: {
            type: NumberConstructor;
            default: number;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        endYear: {
            type: NumberConstructor;
            default: () => number;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onHover:year"?: ((...args: any[]) => any) | undefined;
        "onClick:year"?: ((...args: any[]) => any) | undefined;
    }, {
        color: string;
        mode: import("./types").DatePickerMode;
        readonly: boolean;
        view: DatePickerView;
        highlightToday: boolean;
        allowedYears: (date: Date) => boolean;
        startYear: number;
        endYear: number;
    }> | undefined>;
    textColorComputed: import("vue").ComputedRef<string>;
    focusCurrentPicker: () => any;
    isPickerReadonly: (pickerName: 'year' | 'month' | 'day') => boolean;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:day" | "click:day" | "update:view" | "hover:month" | "click:month" | "hover:year" | "click:year")[], "update:modelValue" | "hover:day" | "click:day" | "update:view" | "hover:month" | "click:month" | "hover:year" | "click:year", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<DatePickerModelValue>;
    };
    monthNames: {
        type: PropType<string[]>;
        default: string[];
    };
    weekdayNames: {
        type: PropType<string[]>;
        default: string[];
    };
    view: {
        type: PropType<DatePickerView>;
    };
    type: {
        type: PropType<DatePickerType>;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: undefined;
    };
    weekendsColor: {
        type: StringConstructor;
        default: undefined;
    };
    allowedYears: {
        type: PropType<(date: Date) => boolean>;
        default: undefined;
    };
    highlightToday: {
        type: BooleanConstructor;
        default: boolean;
    };
    startYear: {
        type: NumberConstructor;
        default: number;
    };
    mode: {
        type: PropType<import("./types").DatePickerMode>;
        default: string;
    };
    endYear: {
        type: NumberConstructor;
        default: () => number;
    };
    allowedMonths: {
        type: PropType<(date: Date) => boolean>;
        default: undefined;
    };
    firstWeekday: {
        type: PropType<"Monday" | "Sunday">;
        default: string;
    };
    hideWeekDays: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOtherMonths: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowedDays: {
        type: PropType<(date: Date) => boolean>;
    };
    weekends: {
        type: PropType<(date: Date) => boolean>;
    };
    highlightWeekend: {
        type: BooleanConstructor;
        default: boolean;
    };
    textColor: {
        type: StringConstructor;
    };
    ariaNextPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaPreviousPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSwitchViewLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onHover:day"?: ((...args: any[]) => any) | undefined;
    "onClick:day"?: ((...args: any[]) => any) | undefined;
    "onUpdate:view"?: ((...args: any[]) => any) | undefined;
    "onHover:month"?: ((...args: any[]) => any) | undefined;
    "onClick:month"?: ((...args: any[]) => any) | undefined;
    "onHover:year"?: ((...args: any[]) => any) | undefined;
    "onClick:year"?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    type: DatePickerType;
    stateful: boolean;
    color: string;
    mode: import("./types").DatePickerMode;
    disabled: boolean;
    readonly: boolean;
    highlightWeekend: boolean;
    highlightToday: boolean;
    monthNames: string[];
    weekdayNames: string[];
    firstWeekday: "Monday" | "Sunday";
    hideWeekDays: boolean;
    showOtherMonths: boolean;
    ariaNextPeriodLabel: string;
    ariaPreviousPeriodLabel: string;
    ariaSwitchViewLabel: string;
    allowedMonths: (date: Date) => boolean;
    allowedYears: (date: Date) => boolean;
    startYear: number;
    endYear: number;
    weekendsColor: string;
}>;
export default _default;
