export declare const VaProgressBar: import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<number | "small" | "medium" | "large">;
        default: string;
    };
    buffer: {
        type: NumberConstructor;
        default: number;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    reverse: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentInside: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPercent: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    rootClass: import("vue").ComputedRef<{
        [x: string]: boolean;
        'va-progress-bar--square': boolean;
    }>;
    rooStyle: import("vue").ComputedRef<import("vue").StyleValue>;
    wrapperStyle: import("vue").ComputedRef<{
        height: string | undefined;
    }>;
    bufferStyle: import("vue").ComputedRef<{
        [x: string]: string | number;
        width: string;
        color: string;
    }>;
    progressStyle: import("vue").ComputedRef<{
        marginLeft: string | undefined;
        width: string;
    }>;
    intermediateStyle: import("vue").ComputedRef<{
        animationDirection: string;
    }>;
    ariaAttributesComputed: import("vue").ComputedRef<{
        role: string;
        'aria-label': string;
        'aria-valuenow': number | undefined;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<number | "small" | "medium" | "large">;
        default: string;
    };
    buffer: {
        type: NumberConstructor;
        default: number;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    reverse: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentInside: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPercent: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {
    preset: string;
    reverse: boolean;
    modelValue: number;
    color: string;
    size: number | "small" | "medium" | "large";
    indeterminate: boolean;
    ariaLabel: string;
    max: number;
    rounded: boolean;
    buffer: number;
    contentInside: boolean;
    showPercent: boolean;
}>;
