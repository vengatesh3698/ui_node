import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    color: {
        type: StringConstructor;
        default: string;
    };
    delay: {
        type: NumberConstructor;
        default: number;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    animation: {
        type: PropType<"none" | "pulse" | "wave">;
        default: string;
    };
    lines: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: StringConstructor[];
        default: string;
    };
    width: {
        type: StringConstructor[];
        default: string;
    };
    lineGap: {
        type: StringConstructor;
        default: string;
    };
    lastLineWidth: {
        type: StringConstructor[];
        default: string;
    };
    variant: {
        type: PropType<"text" | "circle" | "rounded" | "squared">;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
}, {
    classes: import("vue").ComputedRef<string[]>;
    colorComputed: import("vue").ComputedRef<string>;
    negativeLineGap: import("vue").ComputedRef<string>;
    doShow: import("vue").Ref<boolean>;
    heightComputed: import("vue").ComputedRef<string>;
    widthComputed: import("vue").ComputedRef<string>;
    borderRadius: import("vue").ComputedRef<string>;
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    delay: {
        type: NumberConstructor;
        default: number;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    animation: {
        type: PropType<"none" | "pulse" | "wave">;
        default: string;
    };
    lines: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: StringConstructor[];
        default: string;
    };
    width: {
        type: StringConstructor[];
        default: string;
    };
    lineGap: {
        type: StringConstructor;
        default: string;
    };
    lastLineWidth: {
        type: StringConstructor[];
        default: string;
    };
    variant: {
        type: PropType<"text" | "circle" | "rounded" | "squared">;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    width: string;
    tag: string;
    color: string;
    ariaLabel: string;
    height: string;
    delay: number;
    animation: "none" | "pulse" | "wave";
    lines: number;
    lineGap: string;
    lastLineWidth: string;
    variant: "text" | "circle" | "rounded" | "squared";
}>;
export default _default;
