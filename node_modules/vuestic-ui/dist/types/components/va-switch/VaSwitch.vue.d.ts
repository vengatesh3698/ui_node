import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: PropType<string | number | boolean | unknown[] | Record<string, unknown> | null>;
        default: boolean;
    };
    trueLabel: {
        type: StringConstructor;
        default: null;
    };
    falseLabel: {
        type: StringConstructor;
        default: null;
    };
    trueInnerLabel: {
        type: StringConstructor;
        default: null;
    };
    falseInnerLabel: {
        type: StringConstructor;
        default: null;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    offColor: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    arrayValue: {
        type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    trueValue: {
        type: null;
        default: boolean;
    };
    falseValue: {
        type: null;
        default: boolean;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indeterminateValue: {
        type: PropType<unknown>;
        default: null;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    computedErrorMessages: import("vue").ComputedRef<string[]>;
    isChecked: import("vue").ComputedRef<boolean>;
    computedError: import("vue").ComputedRef<boolean>;
    isIndeterminate: import("vue").ComputedRef<boolean>;
    keyboardFocusListeners: {
        mousedown: () => void;
        focus: () => void;
        blur: () => void;
    };
    computedInnerLabel: import("vue").ComputedRef<string>;
    computedLabel: import("vue").ComputedRef<string>;
    computedClass: {
        [x: `va-switch--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-switch--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-switch--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    styleComputed: import("vue").ComputedRef<{
        lineHeight: number;
    }>;
    progressCircleSize: import("vue").ComputedRef<string>;
    trackStyle: import("vue").ComputedRef<{
        borderColor: string;
        backgroundColor: string;
    }>;
    labelStyle: import("vue").ComputedRef<{
        color: string;
    }>;
    trackLabelStyle: import("vue").ComputedRef<{
        color: string;
        'text-align': "left" | "right";
    }>;
    ariaLabelIdComputed: import("vue").ComputedRef<string>;
    inputAttributesComputed: import("vue").ComputedRef<{
        'aria-invalid': boolean;
        'aria-errormessage': string;
        id: string | undefined;
        name: string | undefined;
        disabled: boolean;
        readonly: boolean;
        'aria-disabled': boolean;
        'aria-readonly': boolean;
        'aria-checked': boolean;
        'aria-label': string | undefined;
        'aria-labelledby': string | undefined;
    }>;
    onBlur: (event: FocusEvent) => void;
    onFocus: (event: FocusEvent) => void;
    toggleSelection: () => void;
    reset: () => void;
    focus: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: PropType<string | number | boolean | unknown[] | Record<string, unknown> | null>;
        default: boolean;
    };
    trueLabel: {
        type: StringConstructor;
        default: null;
    };
    falseLabel: {
        type: StringConstructor;
        default: null;
    };
    trueInnerLabel: {
        type: StringConstructor;
        default: null;
    };
    falseInnerLabel: {
        type: StringConstructor;
        default: null;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    offColor: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    arrayValue: {
        type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    trueValue: {
        type: null;
        default: boolean;
    };
    falseValue: {
        type: null;
        default: boolean;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indeterminateValue: {
        type: PropType<unknown>;
        default: null;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    name: string;
    modelValue: string | number | boolean | unknown[] | Record<string, unknown> | null;
    stateful: boolean;
    color: string;
    size: "small" | "medium" | "large";
    indeterminate: boolean;
    ariaLabel: string;
    error: boolean;
    loading: boolean;
    disabled: boolean;
    label: string;
    readonly: boolean;
    messages: string | string[];
    errorMessages: string | string[];
    errorCount: string | number;
    rules: import("../../composables").ValidationRule<any>[];
    success: boolean;
    immediateValidation: boolean;
    indeterminateValue: null;
    id: string;
    arrayValue: string | number | boolean | Record<string, any>;
    leftLabel: boolean;
    trueValue: any;
    falseValue: any;
    trueLabel: string;
    falseLabel: string;
    trueInnerLabel: string;
    falseInnerLabel: string;
    offColor: string;
}>;
export default _default;
