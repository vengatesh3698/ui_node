export declare const VaInfiniteScroll: import("vue").DefineComponent<{
    load: {
        type: FunctionConstructor;
        required: true;
    };
    offset: {
        type: NumberConstructor;
        default: number;
    };
    reverse: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollTarget: {
        type: import("vue").PropType<string | HTMLElement>;
        default: undefined;
    };
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    element: import("vue").ShallowRef<HTMLElement | undefined>;
    spinnerSlotContainer: import("vue").ShallowRef<HTMLDivElement | undefined>;
    spinnerColor: import("vue").ComputedRef<string>;
    fetching: import("vue").Ref<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("onload" | "onerror")[], "onload" | "onerror", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    load: {
        type: FunctionConstructor;
        required: true;
    };
    offset: {
        type: NumberConstructor;
        default: number;
    };
    reverse: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollTarget: {
        type: import("vue").PropType<string | HTMLElement>;
        default: undefined;
    };
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    onOnload?: ((...args: any[]) => any) | undefined;
    onOnerror?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    reverse: boolean;
    tag: string;
    disabled: boolean;
    offset: number;
    scrollTarget: string | HTMLElement;
    debounce: number;
}>;
