export declare const VaDataTable: import("vue").DefineComponent<{
    hoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingColor: {
        type: StringConstructor;
        default: string;
    };
    noDataHtml: {
        type: StringConstructor;
        default: string;
    };
    noDataFilteredHtml: {
        type: StringConstructor;
        default: string;
    };
    hideDefaultHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    footerClone: {
        type: BooleanConstructor;
        default: boolean;
    };
    striped: {
        type: BooleanConstructor;
        default: boolean;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    virtualTrackBy: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    grid: {
        type: BooleanConstructor;
        default: boolean;
    };
    gridColumns: {
        type: NumberConstructor;
        default: number;
    };
    wrapperSize: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    ariaSelectRowLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSelectAllRowsLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSortColumnByLabel: {
        type: StringConstructor;
        default: string;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    modelValue: {
        type: import("vue").PropType<any[]>;
    };
    selectMode: {
        type: import("vue").PropType<import("./types").DataTableSelectMode>;
        default: string;
    };
    itemsTrackBy: {
        type: import("vue").PropType<string | ((item: import("./types").DataTableItem) => any)>;
        default: string;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    items: {
        type: import("vue").PropType<import("./types").DataTableItem[]>;
        default: () => import("./types").DataTableItem[];
    };
    perPage: {
        type: import("vue").PropType<number | undefined>;
    };
    currentPage: {
        type: import("vue").PropType<number | undefined>;
    };
    filter: {
        type: StringConstructor;
        default: string;
    };
    filterMethod: {
        type: import("vue").PropType<import("./types").DataTableFilterMethod | undefined>;
    };
    columns: {
        type: import("vue").PropType<import("./types").DataTableColumnSource[]>;
        default: () => import("./types").DataTableColumnSource[];
    };
    sortingOptions: {
        type: import("vue").PropType<import("./types").DataTableSortingOptions>;
        default: () => (string | null)[];
        validator: (options: import("./types").DataTableSortingOptions) => boolean;
    };
    selectedColor: {
        type: StringConstructor;
        default: string;
    };
    allowFooterSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: import("vue").PropType<string | number | undefined>;
    };
    sortBy: {
        type: import("vue").PropType<string | undefined>;
    };
    sortingOrder: {
        type: import("vue").PropType<import("./types").DataTableSortingOrder | undefined>;
    };
    scrollTopMargin: {
        type: NumberConstructor;
        default: number;
    };
    scrollBottomMargin: {
        type: NumberConstructor;
        default: number;
    };
    rowBind: {
        type: import("vue").PropType<import("./types").DataTableRowBind | undefined>;
    };
    cellBind: {
        type: import("vue").PropType<import("./types").DataTableCellBind | undefined>;
    };
    animated: {
        type: BooleanConstructor;
        default: boolean;
    };
    bench: {
        type: NumberConstructor;
        default: number;
        validator: (v: number) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    table: {
        type: BooleanConstructor;
        default: boolean;
    };
    horizontal: {
        type: BooleanConstructor;
        default: boolean;
    };
    itemSize: {
        type: import("vue").PropType<string | number>;
        default: number;
        validator: (v: string | number) => boolean;
    };
    trackBy: {
        type: import("vue").PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    scrollContainer: import("vue").Ref<HTMLElement | undefined>;
    topTrigger: import("vue").Ref<HTMLElement | undefined>;
    bottomTrigger: import("vue").Ref<HTMLElement | undefined>;
    columnsComputed: import("vue").ComputedRef<import("./types").DataTableColumnInternal[]>;
    ctrlSelectRow: (row: import("./types").DataTableRow) => void;
    shiftSelectRows: (row: import("./types").DataTableRow) => void;
    toggleBulkSelection: () => void;
    isRowSelected: (row: import("./types").DataTableRow) => boolean;
    toggleSorting: (this: any, ...args: any[]) => void;
    CSSVariables: import("vue").ComputedRef<{
        hoverColor: string;
        selectedColor: string | undefined;
        tableHeight: string;
        theadBg: string;
        tfootBg: string;
    }>;
    getCellCSSVariables: (cell: import("./types").DataTableCell) => {
        [x: string]: import("./types").DataTableAlignOptions | import("./types").DataTableVerticalAlignOptions;
    };
    getClass: (classes: unknown) => any;
    getStyle: (styles: unknown) => any;
    thAttributesComputed: import("vue").ComputedRef<{
        columns: import("./types").DataTableColumnInternal[];
        sortingOrderIconName: import("./hooks/useSortable").TSortIcon;
        severalRowsSelected: boolean;
        sortingOrderSync: import("./types").DataTableSortingOrder;
        allRowsSelected: boolean;
        sortBySync: string;
        selectMode: import("./types").DataTableSelectMode;
        isFooter: boolean;
        ariaSelectAllRowsLabel: string;
        ariaSortColumnByLabel: string;
        selectedColor: string;
        allowFooterSorting: boolean;
        stickyHeader: boolean;
        stickyFooter: boolean;
        selectable: boolean;
        height?: string | number | undefined;
    }>;
    showNoDataHtml: import("vue").ComputedRef<boolean>;
    showNoDataFilteredHtml: import("vue").ComputedRef<boolean>;
    onRowClickHandler: (name: "update:modelValue" | "scroll:bottom" | "update:sortBy" | "update:sortingOrder" | "filtered" | "sorted" | "selectionChange" | "row:click" | "row:dblclick" | "row:contextmenu" | "scroll:top", event: Event, row: import("./types").DataTableRow) => void;
    computedAttributes: import("vue").ComputedRef<{
        items: import("./types").DataTableRow[];
        trackBy: string | number;
        disabled: boolean;
        table: boolean;
        horizontal: boolean;
        bench: number;
        itemSize: string | number;
        wrapperSize: string | number;
        class: (string[] | {
            'va-data-table--sticky': boolean;
            'va-data-table--scroll'?: undefined;
            'va-data-table--virtual-scroller'?: undefined;
            'va-data-table--grid'?: undefined;
        } | {
            'va-data-table--scroll': boolean;
            'va-data-table--sticky'?: undefined;
            'va-data-table--virtual-scroller'?: undefined;
            'va-data-table--grid'?: undefined;
        } | {
            'va-data-table--virtual-scroller': boolean;
            'va-data-table--sticky'?: undefined;
            'va-data-table--scroll'?: undefined;
            'va-data-table--grid'?: undefined;
        } | {
            'va-data-table--grid': boolean;
            'va-data-table--sticky'?: undefined;
            'va-data-table--scroll'?: undefined;
            'va-data-table--virtual-scroller'?: undefined;
        })[];
        style: import("vue").StyleValue[];
    }>;
    computedTableAttributes: import("vue").ComputedRef<import("vue").TableHTMLAttributes>;
    animationName: import("vue").ComputedRef<string>;
    getRowBind: (row: import("./types").DataTableRow) => Record<string, string>;
    getCellBind: (cell: import("./types").DataTableCell, row: import("./types").DataTableRow) => Record<string, string>;
    doRenderTopTrigger: boolean;
    doRenderBottomTrigger: boolean;
    isVirtualScroll: import("vue").ComputedRef<boolean>;
    gridColumnsCount: import("vue").ComputedRef<number | "var(--va-data-table-grid-tbody-columns)">;
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    hoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingColor: {
        type: StringConstructor;
        default: string;
    };
    noDataHtml: {
        type: StringConstructor;
        default: string;
    };
    noDataFilteredHtml: {
        type: StringConstructor;
        default: string;
    };
    hideDefaultHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    footerClone: {
        type: BooleanConstructor;
        default: boolean;
    };
    striped: {
        type: BooleanConstructor;
        default: boolean;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    virtualTrackBy: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    grid: {
        type: BooleanConstructor;
        default: boolean;
    };
    gridColumns: {
        type: NumberConstructor;
        default: number;
    };
    wrapperSize: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    ariaSelectRowLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSelectAllRowsLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSortColumnByLabel: {
        type: StringConstructor;
        default: string;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    modelValue: {
        type: import("vue").PropType<any[]>;
    };
    selectMode: {
        type: import("vue").PropType<import("./types").DataTableSelectMode>;
        default: string;
    };
    itemsTrackBy: {
        type: import("vue").PropType<string | ((item: import("./types").DataTableItem) => any)>;
        default: string;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    items: {
        type: import("vue").PropType<import("./types").DataTableItem[]>;
        default: () => import("./types").DataTableItem[];
    };
    perPage: {
        type: import("vue").PropType<number | undefined>;
    };
    currentPage: {
        type: import("vue").PropType<number | undefined>;
    };
    filter: {
        type: StringConstructor;
        default: string;
    };
    filterMethod: {
        type: import("vue").PropType<import("./types").DataTableFilterMethod | undefined>;
    };
    columns: {
        type: import("vue").PropType<import("./types").DataTableColumnSource[]>;
        default: () => import("./types").DataTableColumnSource[];
    };
    sortingOptions: {
        type: import("vue").PropType<import("./types").DataTableSortingOptions>;
        default: () => (string | null)[];
        validator: (options: import("./types").DataTableSortingOptions) => boolean;
    };
    selectedColor: {
        type: StringConstructor;
        default: string;
    };
    allowFooterSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: import("vue").PropType<string | number | undefined>;
    };
    sortBy: {
        type: import("vue").PropType<string | undefined>;
    };
    sortingOrder: {
        type: import("vue").PropType<import("./types").DataTableSortingOrder | undefined>;
    };
    scrollTopMargin: {
        type: NumberConstructor;
        default: number;
    };
    scrollBottomMargin: {
        type: NumberConstructor;
        default: number;
    };
    rowBind: {
        type: import("vue").PropType<import("./types").DataTableRowBind | undefined>;
    };
    cellBind: {
        type: import("vue").PropType<import("./types").DataTableCellBind | undefined>;
    };
    animated: {
        type: BooleanConstructor;
        default: boolean;
    };
    bench: {
        type: NumberConstructor;
        default: number;
        validator: (v: number) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    table: {
        type: BooleanConstructor;
        default: boolean;
    };
    horizontal: {
        type: BooleanConstructor;
        default: boolean;
    };
    itemSize: {
        type: import("vue").PropType<string | number>;
        default: number;
        validator: (v: string | number) => boolean;
    };
    trackBy: {
        type: import("vue").PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    filter: string;
    items: import("./types").DataTableItem[];
    horizontal: boolean;
    loading: boolean;
    disabled: boolean;
    table: boolean;
    trackBy: string | number | ((item: any[] | Record<string, any>) => string | number);
    grid: boolean;
    selectMode: import("./types").DataTableSelectMode;
    columns: import("./types").DataTableColumnSource[];
    ariaSelectAllRowsLabel: string;
    ariaSortColumnByLabel: string;
    selectedColor: string;
    allowFooterSorting: boolean;
    stickyHeader: boolean;
    stickyFooter: boolean;
    selectable: boolean;
    bench: number;
    itemSize: string | number;
    wrapperSize: string | number;
    hoverable: boolean;
    clickable: boolean;
    loadingColor: string;
    noDataHtml: string;
    noDataFilteredHtml: string;
    hideDefaultHeader: boolean;
    footerClone: boolean;
    striped: boolean;
    virtualScroller: boolean;
    virtualTrackBy: string | number;
    gridColumns: number;
    ariaSelectRowLabel: string;
    delay: number;
    itemsTrackBy: string | ((item: import("./types").DataTableItem) => any);
    sortingOptions: import("./types").DataTableSortingOptions;
    scrollTopMargin: number;
    scrollBottomMargin: number;
    animated: boolean;
}>;
export * from './types';
