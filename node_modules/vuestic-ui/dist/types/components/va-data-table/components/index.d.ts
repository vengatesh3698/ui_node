export declare const VaDataTableThRow: import("vue").DefineComponent<{
    selectMode: {
        type: import("vue").PropType<import("..").DataTableSelectMode>;
        default: string;
    };
    allRowsSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    severalRowsSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    columns: {
        type: import("vue").PropType<import("..").DataTableColumnInternal[]>;
        required: true;
    };
    isFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    sortBySync: {
        type: StringConstructor;
        required: true;
    };
    sortingOrderIconName: {
        type: import("vue").PropType<import("../hooks/useSortable").TSortIcon>;
        required: true;
    };
    sortingOrderSync: {
        type: import("vue").PropType<import("..").DataTableSortingOrder>;
        default: null;
    };
    ariaSelectAllRowsLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSortColumnByLabel: {
        type: StringConstructor;
        default: string;
    };
    selectedColor: {
        type: StringConstructor;
        default: string;
    };
    allowFooterSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: import("vue").PropType<string | number | undefined>;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    getClass: (classes: unknown) => any;
    sortByColumn: (column: import("..").DataTableColumnInternal) => void;
    getColumnStyles: (column: import("..").DataTableColumnInternal) => any[];
    slotNameComputed: import("vue").ComputedRef<"footer" | "header">;
    getAriaAttributes: (column: import("..").DataTableColumnInternal) => {
        'aria-sort': "none" | "ascending" | "descending";
        'aria-label': string | undefined;
    };
    toggleBulkSelection: () => void;
    multiplySelectAvailable: import("vue").ComputedRef<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("toggleBulkSelection" | "toggleSorting")[], "toggleBulkSelection" | "toggleSorting", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    selectMode: {
        type: import("vue").PropType<import("..").DataTableSelectMode>;
        default: string;
    };
    allRowsSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    severalRowsSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    columns: {
        type: import("vue").PropType<import("..").DataTableColumnInternal[]>;
        required: true;
    };
    isFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    sortBySync: {
        type: StringConstructor;
        required: true;
    };
    sortingOrderIconName: {
        type: import("vue").PropType<import("../hooks/useSortable").TSortIcon>;
        required: true;
    };
    sortingOrderSync: {
        type: import("vue").PropType<import("..").DataTableSortingOrder>;
        default: null;
    };
    ariaSelectAllRowsLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSortColumnByLabel: {
        type: StringConstructor;
        default: string;
    };
    selectedColor: {
        type: StringConstructor;
        default: string;
    };
    allowFooterSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: import("vue").PropType<string | number | undefined>;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onToggleBulkSelection?: ((...args: any[]) => any) | undefined;
    onToggleSorting?: ((...args: any[]) => any) | undefined;
}, {
    selectMode: import("..").DataTableSelectMode;
    allRowsSelected: boolean;
    severalRowsSelected: boolean;
    isFooter: boolean;
    sortingOrderSync: import("..").DataTableSortingOrder;
    ariaSelectAllRowsLabel: string;
    ariaSortColumnByLabel: string;
    selectedColor: string;
    allowFooterSorting: boolean;
    stickyHeader: boolean;
    stickyFooter: boolean;
    selectable: boolean;
}>;
