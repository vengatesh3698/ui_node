export declare const VaFileUploadGalleryItem: import("vue").DefineComponent<{
    file: {
        type: import("vue").PropType<import("..").ConvertedFile>;
        default: null;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    ariaRemoveFileLabel: {
        type: StringConstructor;
        default: string;
    };
}, {
    removed: import("vue").Ref<boolean>;
    disabled: import("vue").Ref<boolean>;
    isFocused: import("vue").Ref<boolean>;
    previewImage: import("vue").Ref<string>;
    classesComputed: {
        [x: `va-file-upload-gallery-item--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-file-upload-gallery-item--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-file-upload-gallery-item--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    overlayStylesComputed: import("vue").ComputedRef<{
        backgroundColor: string;
    }>;
    onBlur: (e?: Event | undefined) => void;
    onFocus: (e?: Event | undefined) => void;
    removeImage: () => void;
    recoverImage: () => void;
    textColorComputed: import("vue").ComputedRef<string>;
    undo: import("vue").Ref<boolean>;
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "remove"[], "remove", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    file: {
        type: import("vue").PropType<import("..").ConvertedFile>;
        default: null;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    ariaRemoveFileLabel: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onRemove?: ((...args: any[]) => any) | undefined;
}, {
    color: string;
    file: import("..").ConvertedFile;
    ariaRemoveFileLabel: string;
}>;
