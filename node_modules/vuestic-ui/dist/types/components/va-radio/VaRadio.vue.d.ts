import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
        default: null;
    };
    option: {
        type: PropType<any>;
        default: null;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    computedClass: import("vue").ComputedRef<{
        asObject: import("vue").ComputedRef<{
            [x: `va-radio--${string}`]: boolean;
        }>;
        asArray: import("vue").ComputedRef<`va-radio--${string}`[]>;
        asString: import("vue").ComputedRef<string>;
        'va-radio--left-label': boolean;
    }>;
    isActive: import("vue").ComputedRef<boolean>;
    iconBackgroundComputedStyles: import("vue").ComputedRef<{
        backgroundColor: string;
    }>;
    iconDotComputedStyles: import("vue").ComputedRef<{
        borderColor: string;
        backgroundColor: string;
    } | undefined>;
    iconComputedStyles: import("vue").ComputedRef<{
        borderColor: string;
    } | undefined>;
    computedLabel: import("vue").ComputedRef<any>;
    onClick: (e: Event) => void;
    onFocus: (e: Event) => void;
    computedName: import("vue").ComputedRef<string>;
    tabIndexComputed: import("vue").ComputedRef<string | number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "focus")[], "update:modelValue" | "focus", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
        default: null;
    };
    option: {
        type: PropType<any>;
        default: null;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    name: string;
    modelValue: string | number | boolean | unknown[] | Record<any, unknown> | null;
    color: string;
    tabindex: string | number;
    disabled: boolean;
    label: string;
    readonly: boolean;
    option: any;
    leftLabel: boolean;
}>;
export default _default;
