import { Ref, StyleValue, WritableComputedRef } from 'vue';
import { TabComponent, TabSelected } from './types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    left: {
        type: BooleanConstructor;
        default: boolean;
    };
    right: {
        type: BooleanConstructor;
        default: boolean;
    };
    center: {
        type: BooleanConstructor;
        default: boolean;
    };
    grow: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidePagination: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideSlider: {
        type: BooleanConstructor;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    prevIcon: {
        type: StringConstructor;
        default: string;
    };
    nextIcon: {
        type: StringConstructor;
        default: string;
    };
    ariaMoveRightLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaMoveLeftLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {
    wrapper: import("vue").ShallowRef<HTMLElement | undefined>;
    container: import("vue").ShallowRef<HTMLElement | undefined>;
    tabs: import("vue").ShallowRef<HTMLElement | undefined>;
    tabsList: Ref<TabComponent[]>;
    sliderHeight: Ref<number | null>;
    sliderWidth: Ref<number | null>;
    sliderOffsetX: Ref<number>;
    sliderOffsetY: Ref<number>;
    showPagination: Ref<boolean>;
    tabsContentOffset: Ref<number>;
    startingXPoint: Ref<number>;
    animationIncluded: Ref<boolean>;
    colorComputed: import("vue").ComputedRef<string>;
    tabConfig: {
        VaTab: {
            color: string;
        };
    };
    computedClass: import("vue").ComputedRef<{
        'va-tabs__container--left': boolean;
        'va-tabs__container--right': boolean;
        'va-tabs__container--center': boolean;
        'va-tabs__container--grow': boolean;
        'va-tabs__container--disabled': boolean;
    }>;
    computedTabsClass: import("vue").ComputedRef<{
        'va-tabs--vertical': boolean;
    }>;
    tabSelected: WritableComputedRef<TabSelected>;
    sliderStyles: import("vue").ComputedRef<StyleValue>;
    paginationControlledStyles: import("vue").ComputedRef<StyleValue>;
    disablePaginationLeft: import("vue").ComputedRef<boolean>;
    disablePaginationRight: import("vue").ComputedRef<boolean>;
    resetSliderSizes: () => void;
    moveToTab: (tab: TabComponent) => void;
    updateStartingXPoint: () => void;
    updateTabsState: () => void;
    updatePagination: () => void;
    movePaginationLeft: () => void;
    movePaginationRight: () => void;
    updateSlider: (tab: TabComponent) => void;
    includeAnimation: () => void;
    selectTab: (tab: TabComponent) => void;
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "click:next" | "click:prev")[], "update:modelValue" | "click:next" | "click:prev", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    left: {
        type: BooleanConstructor;
        default: boolean;
    };
    right: {
        type: BooleanConstructor;
        default: boolean;
    };
    center: {
        type: BooleanConstructor;
        default: boolean;
    };
    grow: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidePagination: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideSlider: {
        type: BooleanConstructor;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    prevIcon: {
        type: StringConstructor;
        default: string;
    };
    nextIcon: {
        type: StringConstructor;
        default: string;
    };
    ariaMoveRightLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaMoveLeftLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onClick:next"?: ((...args: any[]) => any) | undefined;
    "onClick:prev"?: ((...args: any[]) => any) | undefined;
}, {
    left: boolean;
    center: boolean;
    right: boolean;
    preset: string;
    modelValue: string | number;
    stateful: boolean;
    vertical: boolean;
    color: string;
    disabled: boolean;
    grow: boolean;
    hidePagination: boolean;
    hideSlider: boolean;
    prevIcon: string;
    nextIcon: string;
    ariaMoveRightLabel: string;
    ariaMoveLeftLabel: string;
}>;
export default _default;
