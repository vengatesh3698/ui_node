import { App } from 'vue';
declare const createVaModalPlugin: (app: App<any>) => {
    init(options: string | Partial<Omit<Partial<{
        modelValue: boolean;
        stateful: boolean;
        size: "small" | "medium" | "large";
        title: string;
        maxWidth: string;
        backgroundColor: string;
        blur: boolean;
        noPadding: boolean;
        ariaCloseLabel: string;
        attachElement: string;
        allowBodyScroll: boolean;
        disableAttachment: boolean;
        message: string;
        okText: string;
        cancelText: string;
        hideDefaultActions: boolean;
        fullscreen: boolean;
        mobileFullscreen: boolean;
        noDismiss: boolean;
        noOutsideDismiss: boolean;
        noEscDismiss: boolean;
        maxHeight: string;
        fixedLayout: boolean;
        withoutTransitions: boolean;
        overlay: boolean;
        overlayOpacity: string | number;
        zIndex: string | number;
    }> & Omit<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        attachElement: {
            type: StringConstructor;
            default: string;
        };
        allowBodyScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableAttachment: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: StringConstructor;
            default: string;
        };
        cancelText: {
            type: StringConstructor;
            default: string;
        };
        hideDefaultActions: {
            type: BooleanConstructor;
            default: boolean;
        };
        fullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        mobileFullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        noDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noOutsideDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noEscDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxWidth: {
            type: StringConstructor;
            default: string;
        };
        maxHeight: {
            type: StringConstructor;
            default: string;
        };
        anchorClass: {
            type: StringConstructor;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (value: string) => boolean;
        };
        fixedLayout: {
            type: BooleanConstructor;
            default: boolean;
        };
        withoutTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlayOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        blur: {
            type: BooleanConstructor;
            default: boolean;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
        noPadding: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeClose: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        ariaCloseLabel: {
            type: StringConstructor;
            default: string;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "stateful" | "size" | "title" | "maxWidth" | "backgroundColor" | "blur" | "noPadding" | "ariaCloseLabel" | "attachElement" | "allowBodyScroll" | "disableAttachment" | "message" | "okText" | "cancelText" | "hideDefaultActions" | "fullscreen" | "mobileFullscreen" | "noDismiss" | "noOutsideDismiss" | "noEscDismiss" | "maxHeight" | "fixedLayout" | "withoutTransitions" | "overlay" | "overlayOpacity" | "zIndex"> & import("../types").ModalEmits, "anchorClass">>): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    confirm(options: string | Partial<Omit<Partial<{
        modelValue: boolean;
        stateful: boolean;
        size: "small" | "medium" | "large";
        title: string;
        maxWidth: string;
        backgroundColor: string;
        blur: boolean;
        noPadding: boolean;
        ariaCloseLabel: string;
        attachElement: string;
        allowBodyScroll: boolean;
        disableAttachment: boolean;
        message: string;
        okText: string;
        cancelText: string;
        hideDefaultActions: boolean;
        fullscreen: boolean;
        mobileFullscreen: boolean;
        noDismiss: boolean;
        noOutsideDismiss: boolean;
        noEscDismiss: boolean;
        maxHeight: string;
        fixedLayout: boolean;
        withoutTransitions: boolean;
        overlay: boolean;
        overlayOpacity: string | number;
        zIndex: string | number;
    }> & Omit<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        attachElement: {
            type: StringConstructor;
            default: string;
        };
        allowBodyScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableAttachment: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: StringConstructor;
            default: string;
        };
        cancelText: {
            type: StringConstructor;
            default: string;
        };
        hideDefaultActions: {
            type: BooleanConstructor;
            default: boolean;
        };
        fullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        mobileFullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        noDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noOutsideDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noEscDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxWidth: {
            type: StringConstructor;
            default: string;
        };
        maxHeight: {
            type: StringConstructor;
            default: string;
        };
        anchorClass: {
            type: StringConstructor;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (value: string) => boolean;
        };
        fixedLayout: {
            type: BooleanConstructor;
            default: boolean;
        };
        withoutTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlayOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        blur: {
            type: BooleanConstructor;
            default: boolean;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
        noPadding: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeClose: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        ariaCloseLabel: {
            type: StringConstructor;
            default: string;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "stateful" | "size" | "title" | "maxWidth" | "backgroundColor" | "blur" | "noPadding" | "ariaCloseLabel" | "attachElement" | "allowBodyScroll" | "disableAttachment" | "message" | "okText" | "cancelText" | "hideDefaultActions" | "fullscreen" | "mobileFullscreen" | "noDismiss" | "noOutsideDismiss" | "noEscDismiss" | "maxHeight" | "fixedLayout" | "withoutTransitions" | "overlay" | "overlayOpacity" | "zIndex"> & import("../types").ModalEmits, "anchorClass">>): Promise<boolean>;
};
export declare const VaModalPlugin: import("../../../services/vue-plugin/types").VuesticPluginFabric<[]>;
declare module 'vue' {
    interface ComponentCustomProperties {
        $vaModal: ReturnType<typeof createVaModalPlugin>;
    }
}
export {};
