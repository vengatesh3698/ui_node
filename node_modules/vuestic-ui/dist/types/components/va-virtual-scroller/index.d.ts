export declare const VaVirtualScroller: import("vue").DefineComponent<{
    items: {
        type: ArrayConstructor;
        default: () => never[];
    };
    bench: {
        type: NumberConstructor;
        default: number;
        validator: (v: number) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    table: {
        type: BooleanConstructor;
        default: boolean;
    };
    horizontal: {
        type: BooleanConstructor;
        default: boolean;
    };
    itemSize: {
        type: import("vue").PropType<string | number>;
        default: number;
        validator: (v: string | number) => boolean;
    };
    wrapperSize: {
        type: import("vue").PropType<string | number>;
        default: number;
        validator: (v: string | number) => boolean;
    };
    trackBy: {
        type: import("vue").PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
        default: string;
    };
}, {
    containerStyleComputed: import("vue").ComputedRef<{
        [x: string]: string | undefined;
    }>;
    wrapperStyleComputed: import("vue").ComputedRef<{
        [x: string]: string | undefined;
    }>;
    wrapperClassComputed: {
        [x: `va-virtual-scroller--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-virtual-scroller--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-virtual-scroller--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    listStyleComputed: import("vue").ComputedRef<{
        transform: string;
    }>;
    currentListOffset: import("vue").ComputedRef<number>;
    renderStartIndex: import("vue").ComputedRef<number>;
    virtualScrollTo: (index: number) => void;
    renderBuffer: import("vue").ComputedRef<unknown[]>;
    uniqueKey: (item: any[] | Record<string, any>, index: number, defaultValue?: any) => any;
    wrapper: import("vue").ShallowRef<HTMLElement | undefined>;
    list: import("vue").ShallowRef<HTMLElement | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "scroll:bottom"[], "scroll:bottom", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    items: {
        type: ArrayConstructor;
        default: () => never[];
    };
    bench: {
        type: NumberConstructor;
        default: number;
        validator: (v: number) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    table: {
        type: BooleanConstructor;
        default: boolean;
    };
    horizontal: {
        type: BooleanConstructor;
        default: boolean;
    };
    itemSize: {
        type: import("vue").PropType<string | number>;
        default: number;
        validator: (v: string | number) => boolean;
    };
    wrapperSize: {
        type: import("vue").PropType<string | number>;
        default: number;
        validator: (v: string | number) => boolean;
    };
    trackBy: {
        type: import("vue").PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
        default: string;
    };
}>> & {
    "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
}, {
    items: unknown[];
    horizontal: boolean;
    disabled: boolean;
    table: boolean;
    trackBy: string | number | ((item: any[] | Record<string, any>) => string | number);
    bench: number;
    itemSize: string | number;
    wrapperSize: string | number;
}>;
