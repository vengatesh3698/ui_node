import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    max: {
        type: NumberConstructor;
        default: undefined;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<Record<string, unknown>[]>;
        default: () => never[];
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    fontSize: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
        validator: (size: string | number) => boolean;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
}, {
    classComputed: {
        [x: `va-avatar-group--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-avatar-group--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-avatar-group--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    maxOptions: import("vue").ComputedRef<Record<string, unknown>[]>;
    visibleItemsCount: import("vue").ComputedRef<number>;
    restOptionsCount: import("vue").ComputedRef<number>;
    avatarProps: import("vue").ComputedRef<{
        fontSize: string;
        size: string;
        vertical: boolean;
        color: string;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        square: boolean;
        options: Record<string, unknown>[];
        preset: string | undefined;
        textColor: string | undefined;
        max: number | undefined;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    max: {
        type: NumberConstructor;
        default: undefined;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<Record<string, unknown>[]>;
        default: () => never[];
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    fontSize: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
        validator: (size: string | number) => boolean;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
}>>, {
    preset: string;
    vertical: boolean;
    color: string;
    size: string | number;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    fontSize: string;
    square: boolean;
    max: number;
    options: Record<string, unknown>[];
}>;
export default _default;
