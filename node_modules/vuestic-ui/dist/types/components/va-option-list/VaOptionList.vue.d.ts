import { PropType } from 'vue';
import { SelectableOption } from '../../composables';
type OptionListValue = SelectableOption | SelectableOption[] | null;
declare const _default: import("vue").DefineComponent<{
    type: {
        type: PropType<"switch" | "checkbox" | "radio">;
        default: string;
        validator: (type: any) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultValue: {
        type: PropType<OptionListValue>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: PropType<OptionListValue>;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<SelectableOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    selectedValue: import("vue").WritableComputedRef<OptionListValue>;
    computedError: import("vue").ComputedRef<boolean>;
    computedErrorMessages: import("vue").ComputedRef<string[]>;
    getValue: (option: SelectableOption) => any;
    getText: (option: SelectableOption) => string;
    getTrackBy: (option: SelectableOption) => string | number;
    isDisabled: (option: SelectableOption) => boolean;
    reset: () => void;
    focus: () => void;
    setItemRef: (el: any) => void;
    computedProps: import("vue").ComputedRef<Pick<Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: PropType<"switch" | "checkbox" | "radio">;
            default: string;
            validator: (type: any) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        defaultValue: {
            type: PropType<OptionListValue>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        leftLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        modelValue: {
            type: PropType<OptionListValue>;
        };
        stateful: {
            type: PropType<boolean>;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        options: {
            type: PropType<SelectableOption[]>;
            default: () => never[];
        };
        textBy: {
            type: PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        valueBy: {
            type: PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        trackBy: {
            type: PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        disabledBy: {
            type: PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        groupBy: {
            type: PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClear?: ((...args: any[]) => any) | undefined;
    }>>, "name" | "color" | "readonly" | "leftLabel">>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "clear")[], "update:modelValue" | "clear", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: PropType<"switch" | "checkbox" | "radio">;
        default: string;
        validator: (type: any) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultValue: {
        type: PropType<OptionListValue>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: PropType<OptionListValue>;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<SelectableOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    name: string;
    type: "switch" | "checkbox" | "radio";
    stateful: boolean;
    color: string;
    error: boolean;
    options: SelectableOption[];
    disabled: boolean;
    readonly: boolean;
    textBy: import("../../composables").StringOrFunction;
    valueBy: import("../../composables").StringOrFunction;
    trackBy: import("../../composables").StringOrFunction;
    disabledBy: import("../../composables").StringOrFunction;
    groupBy: import("../../composables").StringOrFunction;
    messages: string | string[];
    errorMessages: string | string[];
    errorCount: string | number;
    rules: import("../../composables").ValidationRule<any>[];
    success: boolean;
    immediateValidation: boolean;
    leftLabel: boolean;
}>;
export default _default;
