import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    description: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    closeText: {
        type: StringConstructor;
        default: string;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    dense: {
        type: BooleanConstructor;
        default: boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    center: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderColor: {
        type: StringConstructor;
        default: string;
    };
    border: {
        type: PropType<"" | "left" | "right" | "top" | "bottom">;
        default: string;
        validator: (value: string) => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    valueComputed: import("vue").WritableComputedRef<any>;
    hasIcon: import("vue").ComputedRef<string | import("vue").Slot | undefined>;
    hasTitle: import("vue").ComputedRef<string | import("vue").Slot | undefined>;
    borderClass: import("vue").ComputedRef<string>;
    closeIcon: import("vue").ComputedRef<string>;
    hide: () => void;
    titleIdComputed: import("vue").ComputedRef<string>;
    descriptionIdComputed: import("vue").ComputedRef<string>;
    alertStyle: import("vue").ComputedRef<{
        border: string;
        padding: string;
        backgroundColor: string;
        boxShadow: string;
    }>;
    contentStyle: import("vue").ComputedRef<{
        alignItems: string;
        color: string;
    }>;
    titleStyle: import("vue").ComputedRef<{
        color: string;
    }>;
    borderStyle: import("vue").ComputedRef<{
        backgroundColor: string;
    }>;
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    description: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    closeText: {
        type: StringConstructor;
        default: string;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    dense: {
        type: BooleanConstructor;
        default: boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    center: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderColor: {
        type: StringConstructor;
        default: string;
    };
    border: {
        type: PropType<"" | "left" | "right" | "top" | "bottom">;
        default: string;
        validator: (value: string) => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    center: boolean;
    preset: string;
    modelValue: boolean;
    stateful: boolean;
    color: string;
    textColor: string;
    title: string;
    description: string;
    icon: string;
    closeText: string;
    closeable: boolean;
    dense: boolean;
    outline: boolean;
    borderColor: string;
    border: "" | "left" | "right" | "top" | "bottom";
}>;
export default _default;
