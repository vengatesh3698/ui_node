declare const _default: import("vue").DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        default: undefined;
    };
    replace: {
        type: BooleanConstructor;
        default: undefined;
    };
    append: {
        type: BooleanConstructor;
        default: undefined;
    };
    exact: {
        type: BooleanConstructor;
        default: undefined;
    };
    activeClass: {
        type: StringConstructor;
        default: undefined;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: undefined;
    };
    href: {
        type: StringConstructor;
        default: undefined;
    };
    target: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    tabIndexComputed: import("vue").ComputedRef<0 | -1>;
    computedClass: {
        [x: `va-list-item--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-list-item--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-list-item--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    isLinkTag: import("vue").ComputedRef<boolean>;
    tagComputed: import("vue").ComputedRef<string | import("vue").Component | undefined>;
    hrefComputed: import("vue").ComputedRef<string | undefined>;
    isActiveRouterLink: import("vue").ComputedRef<boolean>;
    linkAttributesComputed: import("vue").ComputedRef<{
        target?: undefined;
        href?: undefined;
        to?: undefined;
        replace?: undefined;
        append?: undefined;
        activeClass?: undefined;
        exact?: undefined;
        exactActiveClass?: undefined;
    } | {
        target: string | undefined;
        href: string | undefined;
        to?: undefined;
        replace?: undefined;
        append?: undefined;
        activeClass?: undefined;
        exact?: undefined;
        exactActiveClass?: undefined;
    } | {
        target: string | undefined;
        to: string | Record<string, any> | undefined;
        replace: boolean | undefined;
        append: boolean | undefined;
        activeClass: string | undefined;
        exact: boolean | undefined;
        exactActiveClass: string | undefined;
        href?: undefined;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focus" | "click")[], "focus" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        default: undefined;
    };
    replace: {
        type: BooleanConstructor;
        default: undefined;
    };
    append: {
        type: BooleanConstructor;
        default: undefined;
    };
    exact: {
        type: BooleanConstructor;
        default: undefined;
    };
    activeClass: {
        type: StringConstructor;
        default: undefined;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: undefined;
    };
    href: {
        type: StringConstructor;
        default: undefined;
    };
    target: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    target: string;
    tag: string;
    replace: boolean;
    disabled: boolean;
    to: string | Record<string, any>;
    append: boolean;
    exact: boolean;
    activeClass: string;
    exactActiveClass: string;
    href: string;
}>;
export default _default;
