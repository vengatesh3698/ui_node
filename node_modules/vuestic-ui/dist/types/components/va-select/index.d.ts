export { VaSelectOptionList } from './components/VaSelectOptionList';
export { VaSelectOption } from './components/VaSelectOption';
export declare const VaSelect: import("vue").DefineComponent<{
    modelValue: {
        type: import("vue").PropType<import("./types").SelectOption | import("./types").SelectOption[]>;
        default: string;
    };
    placement: {
        type: import("vue").PropType<import("./types").Placement>;
        default: string;
        validator: (placement: string) => boolean;
    };
    allowCreate: {
        type: import("vue").PropType<boolean | "unique">;
        default: boolean;
        validator: (mode: string | boolean) => boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchable: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    maxHeight: {
        type: StringConstructor;
        default: string;
    };
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    hideSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectedTopShown: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: NumberConstructor;
        default: number;
    };
    autoSelectFirstOption: {
        type: BooleanConstructor;
        default: boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    searchPlaceholderText: {
        type: StringConstructor;
        default: string;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaLabel: {
        type: StringConstructor;
        default: undefined;
    };
    ariaSearchLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaClearLabel: {
        type: StringConstructor;
        default: string;
    };
    autocomplete: {
        type: BooleanConstructor;
        default: boolean;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    dropdownIcon: {
        type: import("vue").PropType<string | import("./types").SelectDropdownIcon>;
        default: () => import("./types").SelectDropdownIcon;
        validator: (value: string | import("./types").SelectDropdownIcon) => boolean;
    };
    maxVisibleOptions: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    maxSelections: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    } & {
        type: import("vue").PropType<import("../../composables").ValidationRule<import("./types").SelectOption>[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: import("vue").PropType<import("./types").SelectOption[]>;
        default: () => never[];
    };
    textBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    innerAnchorSelector: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    teleport: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    preventOverflow: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
        default: number;
    };
    stickToEdges: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    cursor: {
        type: BooleanConstructor;
        default: boolean;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        default: string;
        validator: (value: string) => boolean;
    };
    keyboardNavigation: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {
    input: import("vue").ShallowRef<import("vue").DefineComponent<{
        counterValue: {
            type: NumberConstructor;
            default: undefined;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        background: {
            type: StringConstructor;
            default: string;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        focused: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        modelValue: {
            required: boolean;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        containerStyle: import("vue").ComputedRef<{
            color: string;
            'caret-color': string;
            '--va-input-color': string | undefined;
            borderColor: string | undefined;
        }>;
        wrapperClass: {
            [x: `va-input-wrapper--${string}`]: boolean;
        } & {
            readonly asObject: import("vue").ComputedRef<{
                [x: `va-input-wrapper--${string}`]: boolean;
            }>;
            readonly asArray: import("vue").ComputedRef<`va-input-wrapper--${string}`[]>;
            readonly asString: import("vue").ComputedRef<string>;
        };
        wrapperStyle: import("vue").ComputedRef<Record<string, string>>;
        textColorComputed: import("vue").ComputedRef<string>;
        isCounterVisible: import("vue").ComputedRef<boolean>;
        counterComputed: import("vue").ComputedRef<string | number | undefined>;
        colorComputed: import("vue").ComputedRef<string>;
        backgroundComputed: import("vue").ComputedRef<string>;
        borderColorComputed: import("vue").ComputedRef<string | undefined>;
        messagesColor: import("vue").ComputedRef<"" | "danger" | "success">;
        messagesComputed: import("vue").ComputedRef<string | string[] | undefined>;
        hasMessages: import("vue").ComputedRef<boolean>;
        errorLimit: import("vue").ComputedRef<number>;
    }, unknown, {}, {
        focus(): void;
        blur(): void;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner")[], "click" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        counterValue: {
            type: NumberConstructor;
            default: undefined;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        background: {
            type: StringConstructor;
            default: string;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        focused: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        modelValue: {
            required: boolean;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        "onClick-prepend"?: ((...args: any[]) => any) | undefined;
        "onClick-append"?: ((...args: any[]) => any) | undefined;
        "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
        "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
    }, {
        name: string;
        color: string;
        outline: boolean;
        background: string;
        error: boolean;
        loading: boolean;
        disabled: boolean;
        bordered: boolean;
        label: string;
        readonly: boolean;
        counterValue: number;
        messages: string | string[];
        errorMessages: string | string[];
        errorCount: string | number;
        rules: import("../../composables").ValidationRule<any>[];
        success: boolean;
        immediateValidation: boolean;
        maxLength: number;
        focused: boolean;
        requiredMark: boolean;
    }> | undefined>;
    optionList: import("vue").ShallowRef<import("vue").DefineComponent<{
        noOptionsText: {
            type: StringConstructor;
            default: string;
        };
        getSelectedState: {
            type: import("vue").PropType<(option: import("./types").SelectOption) => boolean>;
            required: true;
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        search: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoveredOption: {
            type: import("vue").PropType<import("./types").SelectOption | null>;
            default: null;
        };
        virtualScroller: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightMatchedText: {
            type: BooleanConstructor;
            default: boolean;
        };
        minSearchChars: {
            type: NumberConstructor;
            default: number;
        };
        autoSelectFirstOption: {
            type: BooleanConstructor;
            default: boolean;
        };
        selectedTopShown: {
            type: BooleanConstructor;
            default: boolean;
        };
        delay: {
            type: NumberConstructor;
            default: number;
            validator: (value: number) => boolean;
        };
        options: {
            type: import("vue").PropType<import("./types").SelectOption[]>;
            default: () => never[];
        };
        textBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        valueBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        trackBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        disabledBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        groupBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }, {
        focusPreviousOption: () => void;
        focusNextOption: () => void;
        focusFirstOption: () => void;
        scrollToOption: (option: import("./types").SelectOption) => void;
        focus: () => void;
        root: import("vue").ShallowRef<HTMLElement | undefined>;
        virtualScrollerRef: import("vue").ShallowRef<({
            $: import("vue").ComponentInternalInstance;
            $data: {};
            $props: Partial<{
                items: unknown[];
                horizontal: boolean;
                disabled: boolean;
                table: boolean;
                trackBy: string | number | ((item: any[] | Record<string, any>) => string | number);
                bench: number;
                itemSize: string | number;
                wrapperSize: string | number;
            }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                items: {
                    type: ArrayConstructor;
                    default: () => never[];
                };
                bench: {
                    type: NumberConstructor;
                    default: number;
                    validator: (v: number) => boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                table: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                horizontal: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                itemSize: {
                    type: import("vue").PropType<string | number>;
                    default: number;
                    validator: (v: string | number) => boolean;
                };
                wrapperSize: {
                    type: import("vue").PropType<string | number>;
                    default: number;
                    validator: (v: string | number) => boolean;
                };
                trackBy: {
                    type: import("vue").PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
                    default: string;
                };
            }>> & {
                "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "items" | "horizontal" | "disabled" | "table" | "trackBy" | "bench" | "itemSize" | "wrapperSize">;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import("vue").Slot | undefined;
            }>;
            $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
            $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
            $emit: (event: "scroll:bottom", ...args: any[]) => void;
            $el: any;
            $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                items: {
                    type: ArrayConstructor;
                    default: () => never[];
                };
                bench: {
                    type: NumberConstructor;
                    default: number;
                    validator: (v: number) => boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                table: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                horizontal: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                itemSize: {
                    type: import("vue").PropType<string | number>;
                    default: number;
                    validator: (v: string | number) => boolean;
                };
                wrapperSize: {
                    type: import("vue").PropType<string | number>;
                    default: number;
                    validator: (v: string | number) => boolean;
                };
                trackBy: {
                    type: import("vue").PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
                    default: string;
                };
            }>> & {
                "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
            }, {
                containerStyleComputed: import("vue").ComputedRef<{
                    [x: string]: string | undefined;
                }>;
                wrapperStyleComputed: import("vue").ComputedRef<{
                    [x: string]: string | undefined;
                }>;
                wrapperClassComputed: {
                    [x: `va-virtual-scroller--${string}`]: boolean;
                } & {
                    readonly asObject: import("vue").ComputedRef<{
                        [x: `va-virtual-scroller--${string}`]: boolean;
                    }>;
                    readonly asArray: import("vue").ComputedRef<`va-virtual-scroller--${string}`[]>;
                    readonly asString: import("vue").ComputedRef<string>;
                };
                listStyleComputed: import("vue").ComputedRef<{
                    transform: string;
                }>;
                currentListOffset: import("vue").ComputedRef<number>;
                renderStartIndex: import("vue").ComputedRef<number>;
                virtualScrollTo: (index: number) => void;
                renderBuffer: import("vue").ComputedRef<unknown[]>;
                uniqueKey: (item: any[] | Record<string, any>, index: number, defaultValue?: any) => any;
                wrapper: import("vue").ShallowRef<HTMLElement | undefined>;
                list: import("vue").ShallowRef<HTMLElement | undefined>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "scroll:bottom"[], string, {
                items: unknown[];
                horizontal: boolean;
                disabled: boolean;
                table: boolean;
                trackBy: string | number | ((item: any[] | Record<string, any>) => string | number);
                bench: number;
                itemSize: string | number;
                wrapperSize: string | number;
            }, {}, string> & {
                beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                created?: ((() => void) | (() => void)[]) | undefined;
                beforeMount?: ((() => void) | (() => void)[]) | undefined;
                mounted?: ((() => void) | (() => void)[]) | undefined;
                beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                updated?: ((() => void) | (() => void)[]) | undefined;
                activated?: ((() => void) | (() => void)[]) | undefined;
                deactivated?: ((() => void) | (() => void)[]) | undefined;
                beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                destroyed?: ((() => void) | (() => void)[]) | undefined;
                unmounted?: ((() => void) | (() => void)[]) | undefined;
                renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
            };
            $forceUpdate: () => void;
            $nextTick: typeof import("vue").nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
        } & Readonly<import("vue").ExtractPropTypes<{
            items: {
                type: ArrayConstructor;
                default: () => never[];
            };
            bench: {
                type: NumberConstructor;
                default: number;
                validator: (v: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            table: {
                type: BooleanConstructor;
                default: boolean;
            };
            horizontal: {
                type: BooleanConstructor;
                default: boolean;
            };
            itemSize: {
                type: import("vue").PropType<string | number>;
                default: number;
                validator: (v: string | number) => boolean;
            };
            wrapperSize: {
                type: import("vue").PropType<string | number>;
                default: number;
                validator: (v: string | number) => boolean;
            };
            trackBy: {
                type: import("vue").PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
                default: string;
            };
        }>> & {
            "onScroll:bottom"?: ((...args: any[]) => any) | undefined;
        } & import("vue").ShallowUnwrapRef<{
            containerStyleComputed: import("vue").ComputedRef<{
                [x: string]: string | undefined;
            }>;
            wrapperStyleComputed: import("vue").ComputedRef<{
                [x: string]: string | undefined;
            }>;
            wrapperClassComputed: {
                [x: `va-virtual-scroller--${string}`]: boolean;
            } & {
                readonly asObject: import("vue").ComputedRef<{
                    [x: `va-virtual-scroller--${string}`]: boolean;
                }>;
                readonly asArray: import("vue").ComputedRef<`va-virtual-scroller--${string}`[]>;
                readonly asString: import("vue").ComputedRef<string>;
            };
            listStyleComputed: import("vue").ComputedRef<{
                transform: string;
            }>;
            currentListOffset: import("vue").ComputedRef<number>;
            renderStartIndex: import("vue").ComputedRef<number>;
            virtualScrollTo: (index: number) => void;
            renderBuffer: import("vue").ComputedRef<unknown[]>;
            uniqueKey: (item: any[] | Record<string, any>, index: number, defaultValue?: any) => any;
            wrapper: import("vue").ShallowRef<HTMLElement | undefined>;
            list: import("vue").ShallowRef<HTMLElement | undefined>;
        }> & {} & import("@vue/runtime-core").ComponentCustomProperties & {})[] | undefined>;
        rootHeight: import("vue").ComputedRef<number>;
        optionGroups: import("vue").Ref<Record<string, import("./types").SelectOption[]>>;
        filteredOptions: import("vue").ComputedRef<import("./types").SelectOption[]>;
        selectOptionProps: import("vue").ComputedRef<{
            getText: (option: import("./types").SelectOption) => string;
            getTrackBy: (option: import("./types").SelectOption) => string | number;
            color: string;
            search: string;
            getSelectedState: (option: import("./types").SelectOption) => boolean;
            highlightMatchedText: boolean;
            minSearchChars: number;
        }>;
        currentOptionComputed: import("vue").ComputedRef<import("./types").SelectOption | null>;
        onScroll: (event: UIEvent) => void;
        getTrackBy: (option: import("./types").SelectOption) => string | number;
        setItemRef: (key: string | number) => (el: any) => string | undefined;
        getDisabled: (option: import("./types").SelectOption) => boolean;
        selectHoveredOption: () => void;
        handleMouseMove: (option: import("./types").SelectOption) => void;
        handleMouseEnter: (option: import("./types").SelectOption) => void;
        updateHoveredOption: (option?: import("./types").SelectOption | undefined) => void;
        handleScrollToBottom: () => void;
        selectOption: (option: import("./types").SelectOption) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom")[], "select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        noOptionsText: {
            type: StringConstructor;
            default: string;
        };
        getSelectedState: {
            type: import("vue").PropType<(option: import("./types").SelectOption) => boolean>;
            required: true;
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        search: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoveredOption: {
            type: import("vue").PropType<import("./types").SelectOption | null>;
            default: null;
        };
        virtualScroller: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightMatchedText: {
            type: BooleanConstructor;
            default: boolean;
        };
        minSearchChars: {
            type: NumberConstructor;
            default: number;
        };
        autoSelectFirstOption: {
            type: BooleanConstructor;
            default: boolean;
        };
        selectedTopShown: {
            type: BooleanConstructor;
            default: boolean;
        };
        delay: {
            type: NumberConstructor;
            default: number;
            validator: (value: number) => boolean;
        };
        options: {
            type: import("vue").PropType<import("./types").SelectOption[]>;
            default: () => never[];
        };
        textBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        valueBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        trackBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        disabledBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        groupBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        "onSelect-option"?: ((...args: any[]) => any) | undefined;
        "onUpdate:hoveredOption"?: ((...args: any[]) => any) | undefined;
        "onNo-previous-option-to-hover"?: ((...args: any[]) => any) | undefined;
        "onScroll-bottom"?: ((...args: any[]) => any) | undefined;
    }, {
        preset: string;
        multiple: boolean;
        color: string;
        tabindex: string | number;
        search: string;
        options: import("./types").SelectOption[];
        textBy: import("../../composables").StringOrFunction;
        valueBy: import("../../composables").StringOrFunction;
        trackBy: import("../../composables").StringOrFunction;
        disabledBy: import("../../composables").StringOrFunction;
        groupBy: import("../../composables").StringOrFunction;
        virtualScroller: boolean;
        delay: number;
        highlightMatchedText: boolean;
        minSearchChars: number;
        noOptionsText: string;
        hoveredOption: import("./types").SelectOption | null;
        autoSelectFirstOption: boolean;
        selectedTopShown: boolean;
    }> | undefined>;
    searchBar: import("vue").ShallowRef<import("vue").DefineComponent<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: import("../../utils/types/prop-type").AnyStringPropType<"text" | "textarea" | "password">;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: StringConstructor;
            default: undefined;
        };
        counter: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        background: {
            type: StringConstructor;
            default: string;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        ariaResetLabel: {
            type: StringConstructor;
            default: string;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        autosize: {
            type: BooleanConstructor;
            default: boolean;
        };
        minRows: {
            type: NumberConstructor;
            default: number;
            validator: (val: number) => boolean;
        };
        maxRows: {
            type: NumberConstructor;
            validator: (val: number) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        mask: {
            type: import("vue").PropType<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions>;
            default: string;
        };
        returnRaw: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        } & {
            type: import("vue").PropType<import("../../composables").ValidationRule<string>[]>;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        input: import("vue").ShallowRef<import("vue").DefineComponent<{
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            placeholder: {
                type: StringConstructor;
            };
            autosize: {
                type: BooleanConstructor;
                default: boolean;
            };
            minRows: {
                type: NumberConstructor;
                default: number;
                validator: (val: number) => boolean;
            };
            maxRows: {
                type: NumberConstructor;
                validator: (val: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            textarea: import("vue").ShallowRef<HTMLTextAreaElement | undefined>;
            computedStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
            listeners: Record<string, any>;
            computedProps: import("vue").ComputedRef<{
                [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
                modelValue?: string | number | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                autosize?: boolean | undefined;
                minRows?: number | undefined;
                placeholder?: string | undefined;
                maxRows?: number | undefined;
            }>;
            focus: () => void;
            blur: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            placeholder: {
                type: StringConstructor;
            };
            autosize: {
                type: BooleanConstructor;
                default: boolean;
            };
            minRows: {
                type: NumberConstructor;
                default: number;
                validator: (val: number) => boolean;
            };
            maxRows: {
                type: NumberConstructor;
                validator: (val: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
        }, {
            modelValue: string | number;
            disabled: boolean;
            readonly: boolean;
            autosize: boolean;
            minRows: number;
        }> | HTMLInputElement | undefined>;
        inputEvents: {
            onFocus: (e: Event) => void;
            onBlur: (e: Event) => void;
            onInput: (event: Event) => void;
        };
        isLoading: import("vue").ComputedRef<boolean>;
        valueLengthComputed: import("vue").ComputedRef<number | undefined>;
        computedChildAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
        computedInputAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
        textareaProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            placeholder: {
                type: StringConstructor;
            };
            autosize: {
                type: BooleanConstructor;
                default: boolean;
            };
            minRows: {
                type: NumberConstructor;
                default: number;
                validator: (val: number) => boolean;
            };
            maxRows: {
                type: NumberConstructor;
                validator: (val: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>>;
        computedValue: import("vue").ComputedRef<string | number>;
        tabIndexComputed: import("vue").ComputedRef<string | number>;
        computedError: import("vue").ComputedRef<boolean>;
        computedErrorMessages: import("vue").ComputedRef<string[]>;
        isFocused: import("vue").WritableComputedRef<boolean | undefined>;
        canBeCleared: import("vue").ComputedRef<boolean>;
        clearIconProps: import("vue").ComputedRef<{
            name: string;
            color: string;
            size: string;
        }>;
        fieldListeners: Record<string, any>;
        filterSlots: import("vue").ComputedRef<string[]>;
        reset: () => void;
        focus: () => void;
        blur: () => void;
        tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
        t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: import("../../utils/types/prop-type").AnyStringPropType<"text" | "textarea" | "password">;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: StringConstructor;
            default: undefined;
        };
        counter: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        background: {
            type: StringConstructor;
            default: string;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        ariaResetLabel: {
            type: StringConstructor;
            default: string;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        autosize: {
            type: BooleanConstructor;
            default: boolean;
        };
        minRows: {
            type: NumberConstructor;
            default: number;
            validator: (val: number) => boolean;
        };
        maxRows: {
            type: NumberConstructor;
            validator: (val: number) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        mask: {
            type: import("vue").PropType<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions>;
            default: string;
        };
        returnRaw: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        } & {
            type: import("vue").PropType<import("../../composables").ValidationRule<string>[]>;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
    }, {
        preset: string;
        name: string;
        type: "text" | "textarea" | "password" | (string & Record<never, never>);
        stateful: boolean;
        color: string;
        tabindex: string | number;
        outline: boolean;
        background: string;
        ariaLabel: string;
        error: boolean;
        loading: boolean;
        mask: string | Record<string, number[]> | import("cleave.js/options").CleaveOptions;
        disabled: boolean;
        bordered: boolean;
        label: string;
        readonly: boolean;
        placeholder: string;
        messages: string | string[];
        errorMessages: string | string[];
        errorCount: string | number;
        rules: import("../../composables").ValidationRule<string>[];
        success: boolean;
        immediateValidation: boolean;
        maxLength: number;
        requiredMark: boolean;
        autosize: boolean;
        minRows: number;
        inputClass: string;
        inputmode: string;
        counter: boolean;
        ariaResetLabel: string;
        returnRaw: boolean;
        clearable: boolean;
        clearableIcon: string;
        clearValue: string;
    }> | undefined>;
    reset: () => void;
    focus: () => void;
    blur: () => void;
    toggleDropdown: () => void;
    deleteLastSelected: () => void;
    focusAutocompleteInput: (e?: Event | undefined) => void;
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    t: (key: string, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    onInputFocus: () => void;
    onInputBlur: () => void;
    focusOptionList: () => void;
    focusSearchBar: () => void;
    searchInput: import("vue").Ref<string>;
    showSearchInput: import("vue").ComputedRef<boolean>;
    hoveredOption: import("vue").Ref<import("./types").SelectOption | null>;
    tabIndexComputed: import("vue").ComputedRef<string | number>;
    valueString: import("vue").ComputedRef<string>;
    showClearIcon: import("vue").ComputedRef<boolean>;
    toggleIcon: import("vue").ComputedRef<string>;
    selectOption: (option: import("./types").SelectOption) => void;
    selectOrAddOption: () => void;
    selectHoveredOption: () => void;
    focusPreviousOption: () => any;
    focusNextOption: () => any;
    showDropdownContentComputed: import("vue").WritableComputedRef<boolean>;
    handleDropdownOpen: () => void;
    handleDropdownClose: () => void;
    hideAndFocus: () => void;
    toggleIconColor: import("vue").ComputedRef<string>;
    onHintedSearch: (event: KeyboardEvent) => void;
    onScrollBottom: () => void;
    clearIconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
    }>;
    dropdownPropsComputed: import("vue").ComputedRef<{
        closeOnContentClick: boolean;
        stateful: boolean;
        offset: import("../va-dropdown/types").DropdownOffsetProp;
        keepAnchorWidth: boolean;
        keyboardNavigation: boolean;
        innerAnchorSelector: string;
        'aria-label': string;
        ariaLabel: string;
        disabled: boolean;
        placement: import("../../composables").PlacementWithAlias;
        readonly: boolean;
        anchorSelector: string;
        preventOverflow: boolean;
        isContentHoverable: boolean;
        closeOnClickOutside: boolean;
        closeOnAnchorClick: boolean;
        hoverOverTimeout: number;
        hoverOutTimeout: number;
        stickToEdges: boolean;
        autoPlacement: boolean;
        cursor: boolean;
        trigger: "none" | "click" | "right-click" | "hover" | "dblclick";
        preset?: string | undefined;
        modelValue?: boolean | undefined;
        target?: import("../../composables").MaybeHTMLElementOrSelector;
        teleport?: import("../../composables").MaybeHTMLElementOrSelector;
    }>;
    visibleSelectedOptions: import("vue").ComputedRef<import("./types").SelectOption[]>;
    optionsListPropsComputed: import("vue").ComputedRef<{
        autoSelectFirstOption: boolean;
        search: string;
        tabindex: string | number;
        selectedValue: import("./types").SelectOption | import("./types").SelectOption[];
        options: import("./types").SelectOption[];
        getSelectedState: (option: import("./types").SelectOption) => boolean;
        noOptionsText: string;
        color: string;
        textBy: import("../../composables").StringOrFunction;
        valueBy: import("../../composables").StringOrFunction;
        trackBy: import("../../composables").StringOrFunction;
        disabledBy: import("../../composables").StringOrFunction;
        groupBy: import("../../composables").StringOrFunction;
        virtualScroller: boolean;
        delay: number;
        highlightMatchedText: boolean;
        minSearchChars: number;
        selectedTopShown: boolean;
    }>;
    toggleHiddenOptionsState: () => boolean;
    setAutocompleteValue: (v: string) => string;
    inputWrapperPropsComputed: import("vue").ComputedRef<{
        error: boolean;
        errorMessages: string[];
        focused: boolean;
        tabindex: number;
        color: string;
        outline: boolean;
        loading: boolean;
        disabled: boolean;
        bordered: boolean;
        label: string;
        readonly: boolean;
        messages: string | string[];
        success: boolean;
        requiredMark: boolean;
    }>;
    inputWrapperClassComputed: {
        [x: `va-select-anchor--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-select-anchor--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-select-anchor--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    selectContentPropsComputed: import("vue").ComputedRef<{
        tabindex: string | number;
        value: import("./types").SelectOption[];
        valueString: string;
        hiddenSelectedOptionsAmount: number;
        isAllOptionsShown: boolean;
        focused: boolean | undefined;
        autocompleteInputValue: string;
        getText: (option: import("./types").SelectOption) => string;
        multiple: boolean;
        disabled: boolean;
        readonly: boolean;
        placeholder: string;
        autocomplete: boolean;
    }>;
    getOptionByValue: (value: import("./types").SelectOption) => import("./types").SelectOption;
    compareOptions: (option1: import("./types").SelectOption, option2: import("./types").SelectOption) => boolean;
    getText: (option: import("./types").SelectOption) => string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:error" | "update:errorMessages" | "clear" | "scroll-bottom" | "update-search" | "create-new")[], "update:modelValue" | "update:error" | "update:errorMessages" | "clear" | "scroll-bottom" | "update-search" | "create-new", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: import("vue").PropType<import("./types").SelectOption | import("./types").SelectOption[]>;
        default: string;
    };
    placement: {
        type: import("vue").PropType<import("./types").Placement>;
        default: string;
        validator: (placement: string) => boolean;
    };
    allowCreate: {
        type: import("vue").PropType<boolean | "unique">;
        default: boolean;
        validator: (mode: string | boolean) => boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchable: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    maxHeight: {
        type: StringConstructor;
        default: string;
    };
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    hideSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectedTopShown: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: NumberConstructor;
        default: number;
    };
    autoSelectFirstOption: {
        type: BooleanConstructor;
        default: boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    searchPlaceholderText: {
        type: StringConstructor;
        default: string;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaLabel: {
        type: StringConstructor;
        default: undefined;
    };
    ariaSearchLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaClearLabel: {
        type: StringConstructor;
        default: string;
    };
    autocomplete: {
        type: BooleanConstructor;
        default: boolean;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    dropdownIcon: {
        type: import("vue").PropType<string | import("./types").SelectDropdownIcon>;
        default: () => import("./types").SelectDropdownIcon;
        validator: (value: string | import("./types").SelectDropdownIcon) => boolean;
    };
    maxVisibleOptions: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    maxSelections: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    } & {
        type: import("vue").PropType<import("../../composables").ValidationRule<import("./types").SelectOption>[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: import("vue").PropType<import("./types").SelectOption[]>;
        default: () => never[];
    };
    textBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    innerAnchorSelector: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    teleport: {
        type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
        default: undefined;
    };
    preventOverflow: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
        default: number;
    };
    stickToEdges: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    cursor: {
        type: BooleanConstructor;
        default: boolean;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "right-click" | "hover" | "dblclick">;
        default: string;
        validator: (value: string) => boolean;
    };
    keyboardNavigation: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:error"?: ((...args: any[]) => any) | undefined;
    "onUpdate:errorMessages"?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onScroll-bottom"?: ((...args: any[]) => any) | undefined;
    "onUpdate-search"?: ((...args: any[]) => any) | undefined;
    "onCreate-new"?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    name: string;
    modelValue: import("./types").SelectOption | import("./types").SelectOption[];
    multiple: boolean;
    stateful: boolean;
    target: import("../../composables").MaybeHTMLElementOrSelector;
    width: string;
    color: string;
    tabindex: string | number;
    outline: boolean;
    ariaLabel: string;
    error: boolean;
    loading: boolean;
    options: import("./types").SelectOption[];
    disabled: boolean;
    bordered: boolean;
    placement: import("./types").Placement;
    offset: import("../va-dropdown/types").DropdownOffsetProp;
    separator: string;
    label: string;
    readonly: boolean;
    anchorSelector: string;
    innerAnchorSelector: string;
    teleport: import("../../composables").MaybeHTMLElementOrSelector;
    preventOverflow: boolean;
    keepAnchorWidth: boolean;
    isContentHoverable: boolean;
    closeOnContentClick: boolean;
    closeOnClickOutside: boolean;
    closeOnAnchorClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    stickToEdges: boolean;
    autoPlacement: boolean;
    cursor: boolean;
    trigger: "none" | "click" | "right-click" | "hover" | "dblclick";
    keyboardNavigation: boolean;
    textBy: import("../../composables").StringOrFunction;
    valueBy: import("../../composables").StringOrFunction;
    trackBy: import("../../composables").StringOrFunction;
    disabledBy: import("../../composables").StringOrFunction;
    groupBy: import("../../composables").StringOrFunction;
    placeholder: string;
    messages: string | string[];
    errorMessages: string | string[];
    errorCount: string | number;
    rules: import("../../composables").ValidationRule<import("./types").SelectOption>[];
    success: boolean;
    immediateValidation: boolean;
    requiredMark: boolean;
    clearable: boolean;
    clearableIcon: string;
    clearValue: string;
    autocomplete: boolean;
    virtualScroller: boolean;
    delay: number;
    maxHeight: string;
    highlightMatchedText: boolean;
    minSearchChars: number;
    noOptionsText: string;
    autoSelectFirstOption: boolean;
    selectedTopShown: boolean;
    allowCreate: boolean | "unique";
    searchable: boolean;
    hideSelected: boolean;
    searchPlaceholderText: string;
    ariaSearchLabel: string;
    ariaClearLabel: string;
    dropdownIcon: string | import("./types").SelectDropdownIcon;
    maxVisibleOptions: number;
    maxSelections: string | number;
}>;
export * from './types';
