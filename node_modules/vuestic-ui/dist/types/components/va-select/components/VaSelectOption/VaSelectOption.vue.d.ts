import { type PropType } from 'vue';
import type { SelectableOption } from '../../../../composables';
declare const _default: import("vue").DefineComponent<{
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    option: {
        type: PropType<SelectableOption>;
        default: () => {};
    };
    getText: {
        type: PropType<(option: SelectableOption) => string>;
        required: true;
    };
    getTrackBy: {
        type: PropType<(option: SelectableOption) => number | string>;
        required: true;
    };
    currentOption: {
        type: PropType<SelectableOption | null>;
        default: null;
    };
    getSelectedState: {
        type: PropType<(option: SelectableOption) => boolean>;
        required: true;
    };
    search: {
        type: StringConstructor;
        default: string;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputFocused: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: NumberConstructor;
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    getColor: (prop?: string | undefined, defaultColor?: string | undefined, preferVariables?: boolean | undefined) => string;
    optionIcon: import("vue").ComputedRef<string | undefined>;
    isSelected: import("vue").ComputedRef<boolean>;
    optionStyle: import("vue").ComputedRef<{
        color: string;
        backgroundColor: string;
        cursor: string | undefined;
        opacity: string | undefined;
    }>;
    optionClass: {
        [x: `va-select-option--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-select-option--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-select-option--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    optionIconColor: import("vue").ComputedRef<string>;
    optionTextSplitted: import("vue").ComputedRef<{
        start: string;
        searchedSubString: string;
        end: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    option: {
        type: PropType<SelectableOption>;
        default: () => {};
    };
    getText: {
        type: PropType<(option: SelectableOption) => string>;
        required: true;
    };
    getTrackBy: {
        type: PropType<(option: SelectableOption) => number | string>;
        required: true;
    };
    currentOption: {
        type: PropType<SelectableOption | null>;
        default: null;
    };
    getSelectedState: {
        type: PropType<(option: SelectableOption) => boolean>;
        required: true;
    };
    search: {
        type: StringConstructor;
        default: string;
    };
    highlightMatchedText: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputFocused: {
        type: BooleanConstructor;
        default: boolean;
    };
    minSearchChars: {
        type: NumberConstructor;
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    color: string;
    search: string;
    disabled: boolean;
    option: SelectableOption;
    currentOption: SelectableOption | null;
    highlightMatchedText: boolean;
    inputFocused: boolean;
    minSearchChars: number;
}>;
export default _default;
