import { type PropType } from 'vue';
import type { SelectOption } from '../../../index';
declare const _default: import("vue").DefineComponent<{
    value: {
        type: PropType<SelectOption[]>;
        required: true;
    };
    valueString: {
        type: StringConstructor;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    hiddenSelectedOptionsAmount: {
        type: NumberConstructor;
        default: number;
    };
    isAllOptionsShown: {
        type: BooleanConstructor;
        default: boolean;
    };
    autocomplete: {
        type: BooleanConstructor;
        default: boolean;
    };
    focused: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    getText: {
        type: PropType<(option: SelectOption) => string>;
        required: true;
    };
    autocompleteInputValue: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    isPlaceholder: import("vue").ComputedRef<boolean | "">;
    toggleHiddenOptionsState: () => void;
    autocompleteInputValueComputed: import("vue").WritableComputedRef<string>;
    autocompleteInput: import("vue").Ref<HTMLInputElement | undefined>;
    handleBackspace: (e: KeyboardEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("toggle-hidden" | "autocomplete-input" | "focus-prev" | "focus-next" | "select-option" | "delete-last-selected")[], "toggle-hidden" | "autocomplete-input" | "focus-prev" | "focus-next" | "select-option" | "delete-last-selected", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: PropType<SelectOption[]>;
        required: true;
    };
    valueString: {
        type: StringConstructor;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    hiddenSelectedOptionsAmount: {
        type: NumberConstructor;
        default: number;
    };
    isAllOptionsShown: {
        type: BooleanConstructor;
        default: boolean;
    };
    autocomplete: {
        type: BooleanConstructor;
        default: boolean;
    };
    focused: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    getText: {
        type: PropType<(option: SelectOption) => string>;
        required: true;
    };
    autocompleteInputValue: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onToggle-hidden"?: ((...args: any[]) => any) | undefined;
    "onAutocomplete-input"?: ((...args: any[]) => any) | undefined;
    "onFocus-prev"?: ((...args: any[]) => any) | undefined;
    "onFocus-next"?: ((...args: any[]) => any) | undefined;
    "onSelect-option"?: ((...args: any[]) => any) | undefined;
    "onDelete-last-selected"?: ((...args: any[]) => any) | undefined;
}, {
    multiple: boolean;
    tabindex: string | number;
    disabled: boolean;
    readonly: boolean;
    placeholder: string;
    focused: boolean;
    autocomplete: boolean;
    hiddenSelectedOptionsAmount: number;
    isAllOptionsShown: boolean;
    autocompleteInputValue: string;
}>;
export default _default;
