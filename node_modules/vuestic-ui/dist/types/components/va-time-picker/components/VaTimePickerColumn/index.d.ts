export declare const VaTimePickerColumn: import("vue").DefineComponent<{
    items: {
        type: import("vue").PropType<string[] | number[]>;
        default: () => never[];
    };
    activeItemIndex: {
        type: NumberConstructor;
        default: number;
    };
    cellHeight: {
        type: NumberConstructor;
        default: number;
    };
}, {
    syncActiveItemIndex: import("vue").WritableComputedRef<number>;
    rootElement: import("vue").ShallowRef<HTMLElement | undefined>;
    makeActiveNext: (times?: number | undefined) => void;
    makeActivePrev: (times?: number | undefined) => void;
    makeActiveByIndex: (index: number) => void;
    onScroll: import("lodash").DebouncedFunc<() => void>;
    onCellClick: (index: number) => void;
    formatCell: (n: string | number) => string;
    styleComputed: import("vue").ComputedRef<{
        color: string;
    }>;
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focus" | "blur" | "item-selected" | "update:activeItemIndex")[], "focus" | "blur" | "item-selected" | "update:activeItemIndex", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    items: {
        type: import("vue").PropType<string[] | number[]>;
        default: () => never[];
    };
    activeItemIndex: {
        type: NumberConstructor;
        default: number;
    };
    cellHeight: {
        type: NumberConstructor;
        default: number;
    };
}>> & {
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    "onItem-selected"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeItemIndex"?: ((...args: any[]) => any) | undefined;
}, {
    items: string[] | number[];
    activeItemIndex: number;
    cellHeight: number;
}>;
