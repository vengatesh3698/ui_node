export declare const VaTimePicker: import("vue").DefineComponent<{
    modelValue: {
        type: DateConstructor;
        required: false;
    };
    ampm: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidePeriodSwitch: {
        type: BooleanConstructor;
        default: boolean;
    };
    periodUpdatesModelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    view: {
        type: import("vue").PropType<"hours" | "minutes" | "seconds">;
        default: string;
    };
    hoursFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
    };
    minutesFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
    };
    secondsFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
    };
    framed: {
        type: BooleanConstructor;
        default: boolean;
    };
    cellHeight: {
        type: NumberConstructor;
        default: number;
    };
    visibleCellsCount: {
        type: NumberConstructor;
        default: number;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {
    columns: import("vue").ComputedRef<({
        items: number[];
        activeItem: import("vue").WritableComputedRef<number>;
    } | {
        items: string[];
        activeItem: import("vue").WritableComputedRef<number>;
    })[]>;
    computedStyles: import("vue").ComputedRef<Record<string, string>>;
    computedClasses: import("vue").ComputedRef<{
        'va-time-picker--framed': boolean;
        asObject: import("vue").ComputedRef<{
            [x: `va-time-picker--${string}`]: boolean;
        }>;
        asArray: import("vue").ComputedRef<`va-time-picker--${string}`[]>;
        asString: import("vue").ComputedRef<string>;
    }>;
    isPM: import("vue").Ref<boolean>;
    pickers: import("vue").ShallowRef<import("../../composables").TemplateRef[]>;
    setItemRef: (el: any) => void;
    focusNext: () => void;
    focusPrev: () => void;
    activeColumnIndex: import("vue").Ref<number | undefined>;
    focus: (idx?: number) => void;
    blur: (idx?: number | undefined) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: DateConstructor;
        required: false;
    };
    ampm: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidePeriodSwitch: {
        type: BooleanConstructor;
        default: boolean;
    };
    periodUpdatesModelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    view: {
        type: import("vue").PropType<"hours" | "minutes" | "seconds">;
        default: string;
    };
    hoursFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
    };
    minutesFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
    };
    secondsFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
    };
    framed: {
        type: BooleanConstructor;
        default: boolean;
    };
    cellHeight: {
        type: NumberConstructor;
        default: number;
    };
    visibleCellsCount: {
        type: NumberConstructor;
        default: number;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    stateful: boolean;
    disabled: boolean;
    readonly: boolean;
    view: "hours" | "minutes" | "seconds";
    cellHeight: number;
    ampm: boolean;
    hidePeriodSwitch: boolean;
    periodUpdatesModelValue: boolean;
    framed: boolean;
    visibleCellsCount: number;
}>;
