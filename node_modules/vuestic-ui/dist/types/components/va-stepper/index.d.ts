export declare const VaStepper: import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    steps: {
        type: import("vue").PropType<import("./types").Step[]>;
        default: () => never[];
        required: true;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigationDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    controlsHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    nextDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    finishButtonHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {
    stepperNavigation: import("vue").ShallowRef<HTMLElement | undefined>;
    resetFocus: () => void;
    focusedStep: import("vue").Ref<{
        trigger: boolean;
        stepIndex: number;
    }>;
    isNextStepDisabled: (index: number) => boolean;
    stepperColor: string;
    getColor: (prop?: string | undefined, defaultColor?: string | undefined, preferVariables?: boolean | undefined) => string;
    stepControls: import("./types").StepControls;
    getIterableSlotData: (step: import("./types").Step, index: number) => {
        step: import("./types").Step;
        focus: import("vue").Ref<{
            trigger: boolean;
            stepIndex: number;
        }>;
        isActive: boolean;
        isCompleted: boolean;
        setStep: (index: number) => void;
        nextStep: (stepsToSkip?: number | undefined) => void;
        prevStep: (stepsToSkip?: number | undefined) => void;
    };
    onArrowKeyPress: (direction: "next" | "prev") => void;
    onValueChange: () => void;
    ariaAttributesComputed: import("vue").ComputedRef<{
        role: string;
        'aria-label': string;
        'aria-orientation': "horizontal" | "vertical";
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "finish")[], "update:modelValue" | "finish", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    steps: {
        type: import("vue").PropType<import("./types").Step[]>;
        default: () => never[];
        required: true;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigationDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    controlsHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    nextDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    finishButtonHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onFinish?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: number;
    stateful: boolean;
    vertical: boolean;
    color: string;
    ariaLabel: string;
    steps: import("./types").Step[];
    nextDisabled: boolean;
    finishButtonHidden: boolean;
    navigationDisabled: boolean;
    controlsHidden: boolean;
}>;
