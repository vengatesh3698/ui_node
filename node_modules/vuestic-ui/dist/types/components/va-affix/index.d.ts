export declare const VaAffix: import("vue").DefineComponent<{
    offsetTop: {
        type: NumberConstructor;
        default: undefined;
    };
    offsetBottom: {
        type: NumberConstructor;
        default: undefined;
    };
    target: {
        type: import("vue").PropType<HTMLElement | Window | (() => HTMLElement | Window)>;
        default: () => Window | undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    computedClass: import("vue").ComputedRef<{
        'va-affix--affixed': import("vue").ComputedRef<boolean>;
    }[]>;
    computedStyle: import("vue").ComputedRef<{
        top: string | undefined;
        bottom: string | undefined;
        width: string;
    }>;
    isAffixed: import("vue").ComputedRef<boolean>;
    element: import("vue").ShallowRef<HTMLElement | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "change"[], "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    offsetTop: {
        type: NumberConstructor;
        default: undefined;
    };
    offsetBottom: {
        type: NumberConstructor;
        default: undefined;
    };
    target: {
        type: import("vue").PropType<HTMLElement | Window | (() => HTMLElement | Window)>;
        default: () => Window | undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    offsetTop: number;
    offsetBottom: number;
    target: HTMLElement | Window | (() => HTMLElement | Window);
}>;
