import { InputHTMLAttributes } from 'vue';
import type { AnyStringPropType } from '../../utils/types/prop-type';
declare const _default: import("vue").DefineComponent<{
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: AnyStringPropType<"text" | "textarea" | "password">;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputClass: {
        type: StringConstructor;
        default: string;
    };
    pattern: {
        type: StringConstructor;
    };
    inputmode: {
        type: StringConstructor;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        default: undefined;
    };
    counter: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxLength: {
        type: NumberConstructor;
        default: undefined;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    background: {
        type: StringConstructor;
        default: string;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaResetLabel: {
        type: StringConstructor;
        default: string;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    autosize: {
        type: BooleanConstructor;
        default: boolean;
    };
    minRows: {
        type: NumberConstructor;
        default: number;
        validator: (val: number) => boolean;
    };
    maxRows: {
        type: NumberConstructor;
        validator: (val: number) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    mask: {
        type: import("vue").PropType<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions>;
        default: string;
    };
    returnRaw: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    } & {
        type: import("vue").PropType<import("../../composables").ValidationRule<string>[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    input: import("vue").ShallowRef<import("vue").DefineComponent<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        placeholder: {
            type: StringConstructor;
        };
        autosize: {
            type: BooleanConstructor;
            default: boolean;
        };
        minRows: {
            type: NumberConstructor;
            default: number;
            validator: (val: number) => boolean;
        };
        maxRows: {
            type: NumberConstructor;
            validator: (val: number) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        textarea: import("vue").ShallowRef<HTMLTextAreaElement | undefined>;
        computedStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
        listeners: Record<string, any>;
        computedProps: import("vue").ComputedRef<{
            [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
            modelValue?: string | number | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            autosize?: boolean | undefined;
            minRows?: number | undefined;
            placeholder?: string | undefined;
            maxRows?: number | undefined;
        }>;
        focus: () => void;
        blur: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        placeholder: {
            type: StringConstructor;
        };
        autosize: {
            type: BooleanConstructor;
            default: boolean;
        };
        minRows: {
            type: NumberConstructor;
            default: number;
            validator: (val: number) => boolean;
        };
        maxRows: {
            type: NumberConstructor;
            validator: (val: number) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
    }, {
        modelValue: string | number;
        disabled: boolean;
        readonly: boolean;
        autosize: boolean;
        minRows: number;
    }> | HTMLInputElement | undefined>;
    inputEvents: {
        onFocus: (e: Event) => void;
        onBlur: (e: Event) => void;
        onInput: (event: Event) => void;
    };
    isLoading: import("vue").ComputedRef<boolean>;
    valueLengthComputed: import("vue").ComputedRef<number | undefined>;
    computedChildAttributes: import("vue").ComputedRef<InputHTMLAttributes>;
    computedInputAttributes: import("vue").ComputedRef<InputHTMLAttributes>;
    textareaProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        placeholder: {
            type: StringConstructor;
        };
        autosize: {
            type: BooleanConstructor;
            default: boolean;
        };
        minRows: {
            type: NumberConstructor;
            default: number;
            validator: (val: number) => boolean;
        };
        maxRows: {
            type: NumberConstructor;
            validator: (val: number) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>;
    computedValue: import("vue").ComputedRef<string | number>;
    tabIndexComputed: import("vue").ComputedRef<string | number>;
    computedError: import("vue").ComputedRef<boolean>;
    computedErrorMessages: import("vue").ComputedRef<string[]>;
    isFocused: import("vue").WritableComputedRef<boolean | undefined>;
    canBeCleared: import("vue").ComputedRef<boolean>;
    clearIconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
    }>;
    fieldListeners: Record<string, any>;
    filterSlots: import("vue").ComputedRef<string[]>;
    reset: () => void;
    focus: () => void;
    blur: () => void;
    tp: <Key extends string | undefined>(key: Key, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: AnyStringPropType<"text" | "textarea" | "password">;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputClass: {
        type: StringConstructor;
        default: string;
    };
    pattern: {
        type: StringConstructor;
    };
    inputmode: {
        type: StringConstructor;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        default: undefined;
    };
    counter: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxLength: {
        type: NumberConstructor;
        default: undefined;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    background: {
        type: StringConstructor;
        default: string;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaResetLabel: {
        type: StringConstructor;
        default: string;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    autosize: {
        type: BooleanConstructor;
        default: boolean;
    };
    minRows: {
        type: NumberConstructor;
        default: number;
        validator: (val: number) => boolean;
    };
    maxRows: {
        type: NumberConstructor;
        validator: (val: number) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    mask: {
        type: import("vue").PropType<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions>;
        default: string;
    };
    returnRaw: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    } & {
        type: import("vue").PropType<import("../../composables").ValidationRule<string>[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    name: string;
    type: "text" | "textarea" | "password" | (string & Record<never, never>);
    stateful: boolean;
    color: string;
    tabindex: string | number;
    outline: boolean;
    background: string;
    ariaLabel: string;
    error: boolean;
    loading: boolean;
    mask: string | Record<string, number[]> | import("cleave.js/options").CleaveOptions;
    disabled: boolean;
    bordered: boolean;
    label: string;
    readonly: boolean;
    placeholder: string;
    messages: string | string[];
    errorMessages: string | string[];
    errorCount: string | number;
    rules: import("../../composables").ValidationRule<string>[];
    success: boolean;
    immediateValidation: boolean;
    maxLength: number;
    requiredMark: boolean;
    autosize: boolean;
    minRows: number;
    inputClass: string;
    inputmode: string;
    counter: boolean;
    ariaResetLabel: string;
    returnRaw: boolean;
    clearable: boolean;
    clearableIcon: string;
    clearValue: string;
}>;
export default _default;
