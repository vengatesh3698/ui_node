import { CSSProperties } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    placeholder: {
        type: StringConstructor;
    };
    autosize: {
        type: BooleanConstructor;
        default: boolean;
    };
    minRows: {
        type: NumberConstructor;
        default: number;
        validator: (val: number) => boolean;
    };
    maxRows: {
        type: NumberConstructor;
        validator: (val: number) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    textarea: import("vue").ShallowRef<HTMLTextAreaElement | undefined>;
    computedStyle: import("vue").ComputedRef<CSSProperties>;
    listeners: Record<string, any>;
    computedProps: import("vue").ComputedRef<{
        [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
        modelValue?: string | number | undefined;
        disabled?: boolean | undefined;
        readonly?: boolean | undefined;
        autosize?: boolean | undefined;
        minRows?: number | undefined;
        placeholder?: string | undefined;
        maxRows?: number | undefined;
    }>;
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    placeholder: {
        type: StringConstructor;
    };
    autosize: {
        type: BooleanConstructor;
        default: boolean;
    };
    minRows: {
        type: NumberConstructor;
        default: number;
        validator: (val: number) => boolean;
    };
    maxRows: {
        type: NumberConstructor;
        validator: (val: number) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {
    modelValue: string | number;
    disabled: boolean;
    readonly: boolean;
    autosize: boolean;
    minRows: number;
}>;
export default _default;
