declare const _default: import("vue").DefineComponent<{
    src: {
        type: StringConstructor;
        default: null;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    alt: {
        type: StringConstructor;
        default: string;
    };
    fallbackSrc: {
        type: StringConstructor;
    };
    fallbackText: {
        type: StringConstructor;
    };
    fallbackIcon: {
        type: StringConstructor;
    };
    fallbackRender: {
        type: import("vue").PropType<() => any>;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    fontSize: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
        validator: (size: string | number) => boolean;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    hasLoadError: import("vue").Ref<boolean>;
    sizeComputed: import("vue").ComputedRef<string>;
    avatarOptions: import("vue").ComputedRef<{
        hasError: boolean;
        onError: (event: Event) => void;
    }>;
    computedStyle: import("vue").ComputedRef<{
        fontSize: string;
    }>;
    colorComputed: import("vue").ComputedRef<string>;
    classesComputed: {
        [x: `va-avatar--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-avatar--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-avatar--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    textColorComputed: import("vue").ComputedRef<string>;
    backgroundColorComputed: import("vue").ComputedRef<string>;
    VaFallbackProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        fallbackSrc: {
            type: StringConstructor;
        };
        fallbackText: {
            type: StringConstructor;
        };
        fallbackIcon: {
            type: StringConstructor;
        };
        fallbackRender: {
            type: import("vue").PropType<() => any>;
        };
    }>>;
    onLoadError: (event: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("fallback" | "error")[], "fallback" | "error", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    src: {
        type: StringConstructor;
        default: null;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    alt: {
        type: StringConstructor;
        default: string;
    };
    fallbackSrc: {
        type: StringConstructor;
    };
    fallbackText: {
        type: StringConstructor;
    };
    fallbackIcon: {
        type: StringConstructor;
    };
    fallbackRender: {
        type: import("vue").PropType<() => any>;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    fontSize: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
        validator: (size: string | number) => boolean;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config").SizeConfig;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onFallback?: ((...args: any[]) => any) | undefined;
    onError?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    color: string;
    size: string | number;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    fontSize: string;
    icon: string;
    src: string;
    alt: string;
    square: boolean;
    loading: boolean;
}>;
export default _default;
