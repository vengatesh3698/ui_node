import { defineComponent, shallowRef, ref, computed, watch, nextTick } from "vue";
import { p as pick } from "../../../vendor-fff696df.mjs";
import { V as VaSelectOptionList } from "./components/VaSelectOptionList/index-365020ae.mjs";
import { V as VaSelectContent } from "./components/VaSelectContent/index-eee36543.mjs";
import { u as useMaxVisibleOptionsProps, a as useMaxVisibleOptions } from "./hooks/useMaxVisibleOptions-a7eecfbc.mjs";
import { u as useToggleIconProps, a as useToggleIcon } from "./hooks/useToggleIcon-e991bbc8.mjs";
import { u as useStringValueProps, a as useStringValue } from "./hooks/useStringValue-1b278456.mjs";
import { u as useAutocompleteProps, a as useAutocomplete } from "./hooks/useAutocomplete-fdef5d6e.mjs";
import { f as focusElement, b as blurElement } from "../../utils/focus-7a563842.mjs";
import { u as unwrapEl } from "../../utils/unwrapEl-55936fea.mjs";
import { i as isNilValue } from "../../utils/isNilValue-745d19e7.mjs";
import { w as warn } from "../../utils/console-42c8e8cc.mjs";
import { V as VaDropdownContent } from "../va-dropdown/components/VaDropdownContent/index-d67c0ae9.mjs";
import { V as VaInput } from "../va-input/index-ab246709.mjs";
import { V as VaInputWrapper } from "../va-input/components/VaInputWrapper/VaInputWrapper-89658c86.mjs";
import { u as useMaxSelectionsProps, a as useMaxSelections } from "../../composables/useMaxSelections-2afbbe77.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options-6b96d215.mjs";
import { V as VaIcon } from "../va-icon/index-0ebbc0f2.mjs";
import { V as VaDropdown } from "../va-dropdown/index-2edb30e9.mjs";
import { a as useValidationEmits, u as useValidationProps, b as useValidation } from "../../composables/useValidation-a7c1fccc.mjs";
import { a as useClearableEmits, u as useClearableProps, b as useClearable } from "../../composables/useClearable-6c80b820.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { u as useSelectableListProps, a as useSelectableList } from "../../composables/useSelectableList-a02a95a9.mjs";
import { u as useLoadingProps } from "../../composables/useLoading-5a447e96.mjs";
import { u as useFormFieldProps } from "../../composables/useFormField-0ac52e7e.mjs";
import { u as useThrottleProps } from "../../composables/useThrottle-cdbdff3a.mjs";
import { u as useFocusDeep } from "../../composables/useFocusDeep-86e6bbc0.mjs";
import { u as useTranslation } from "../../composables/useTranslation-acf7d88d.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props-9727421a.mjs";
import { u as useBem } from "../../composables/useBem-10a5bc6e.mjs";
const VaDropdownProps = extractComponentProps(
  VaDropdown,
  ["keyboardNavigation", "offset", "stateful", "keepAnchorWidth", "closeOnContentClick", "innerAnchorSelector", "modelValue"]
);
const _sfc_main = defineComponent({
  name: "VaSelect",
  components: {
    VaSelectContent,
    VaSelectOptionList,
    VaIcon,
    VaDropdown,
    VaDropdownContent,
    VaInput,
    VaInputWrapper
  },
  emits: [
    "update:modelValue",
    "update-search",
    "create-new",
    "scroll-bottom",
    ...useValidationEmits,
    ...useClearableEmits
  ],
  props: {
    ...VaDropdownProps,
    ...useComponentPresetProp,
    ...useSelectableListProps,
    ...useValidationProps,
    ...useLoadingProps,
    ...useMaxSelectionsProps,
    ...useClearableProps,
    ...useFormFieldProps,
    ...useMaxVisibleOptionsProps,
    ...useToggleIconProps,
    ...useThrottleProps,
    ...useStringValueProps,
    ...useAutocompleteProps,
    modelValue: {
      type: [String, Number, Array, Object, Boolean],
      default: ""
    },
    // Dropdown placement
    placement: {
      type: String,
      default: "bottom",
      validator: (placement) => ["top", "bottom"].includes(placement)
    },
    allowCreate: {
      type: [Boolean, String],
      default: false,
      validator: (mode) => [true, false, "unique"].includes(mode)
    },
    color: { type: String, default: "primary" },
    multiple: { type: Boolean, default: false },
    searchable: { type: Boolean, default: false },
    width: { type: String, default: "100%" },
    maxHeight: { type: String, default: "256px" },
    noOptionsText: { type: String, default: "$t:noOptions" },
    hideSelected: { type: Boolean, default: false },
    tabindex: { type: [String, Number], default: 0 },
    virtualScroller: { type: Boolean, default: false },
    selectedTopShown: { type: Boolean, default: false },
    highlightMatchedText: { type: Boolean, default: true },
    minSearchChars: { type: Number, default: 0 },
    autoSelectFirstOption: { type: Boolean, default: false },
    // Input style
    outline: { type: Boolean, default: false },
    bordered: { type: Boolean, default: false },
    label: { type: String, default: "" },
    placeholder: { type: String, default: "" },
    searchPlaceholderText: { type: String, default: "$t:search" },
    requiredMark: { type: Boolean, default: false },
    ariaLabel: { type: String, default: void 0 },
    ariaSearchLabel: { type: String, default: "$t:optionsFilter" },
    ariaClearLabel: { type: String, default: "$t:reset" }
  },
  setup(props, { emit, slots }) {
    const optionList = shallowRef();
    const input = shallowRef();
    const searchBar = shallowRef();
    const isInputFocused = useFocusDeep(input);
    const { getValue, getText, getTrackBy } = useSelectableList(props);
    const onScrollBottom = () => emit("scroll-bottom");
    const searchInput = ref("");
    const showSearchInput = computed(() => props.searchable || props.allowCreate && !props.autocomplete);
    watch(searchInput, (value) => {
      emit("update-search", value);
      hoveredOption.value = null;
    });
    const getOptionByValue = (value) => {
      if (isNilValue(value) || typeof value === "object") {
        return value;
      }
      const optionByValue = props.options.find((option) => value === getValue(option));
      if (optionByValue === void 0) {
        warn(`[VaSelect]: can not find option in options list (${JSON.stringify(props.options)}) by provided value (${JSON.stringify(value)})!`);
        return value;
      }
      return optionByValue;
    };
    const {
      toggleHiddenOptionsState,
      isAllOptionsShown,
      visibleSelectedOptions,
      hiddenSelectedOptionsAmount,
      allSelectedOptions
    } = useMaxVisibleOptions(props, getOptionByValue);
    const valueComputed = computed({
      get() {
        if (props.multiple) {
          return allSelectedOptions.value;
        }
        const value = getOptionByValue(props.modelValue);
        if (Array.isArray(value)) {
          warn("Model value should be a string, number, boolean or an object for a single Select.");
          if (value.length) {
            return value.at(-1);
          }
        }
        return value;
      },
      set(option) {
        if (Array.isArray(option)) {
          emit("update:modelValue", option.map(getValue));
        } else {
          emit("update:modelValue", getValue(option));
        }
      }
    });
    const valueString = useStringValue(props, visibleSelectedOptions, getText);
    const {
      canBeCleared,
      clearIconProps,
      onFocus,
      onBlur
    } = useClearable(props, valueComputed);
    const showClearIcon = computed(() => {
      if (!canBeCleared.value) {
        return false;
      }
      if (props.multiple && Array.isArray(valueComputed.value)) {
        return !!valueComputed.value.length;
      }
      return true;
    });
    const filteredOptions = computed(() => {
      if (!props.options) {
        return [];
      }
      if (props.selectedTopShown) {
        return props.options.slice().sort((a, b) => {
          const isASelected = checkIsOptionSelected(a);
          const isBSelected = checkIsOptionSelected(b);
          if (isASelected && isBSelected) {
            return 0;
          }
          if (isASelected && !isBSelected) {
            return -1;
          }
          return 1;
        });
      }
      if (props.hideSelected) {
        return props.options.filter((option) => !checkIsOptionSelected(option));
      }
      return props.options;
    });
    const checkIsOptionSelected = (option) => {
      if (isNilValue(valueComputed.value)) {
        return false;
      }
      if (Array.isArray(valueComputed.value)) {
        return !isNilValue(valueComputed.value.find((valueItem) => compareOptions(valueItem, option)));
      }
      return compareOptions(valueComputed.value, option);
    };
    const compareOptions = (option1, option2) => {
      const one = getValue(option1);
      const two = getValue(option2);
      if (one === two) {
        return true;
      }
      if (typeof one === "string" && typeof two === "string") {
        return one === two;
      }
      if (one === null || two === null) {
        return false;
      }
      if (typeof one === "object" && typeof two === "object") {
        return getTrackBy(one) === getTrackBy(two);
      }
      return false;
    };
    const isValueComputedArray = (v) => Array.isArray(v.value);
    const selectOption = (option) => {
      if (hoveredOption.value === null) {
        hideAndFocus();
        return;
      }
      if (showSearchInput.value) {
        searchInput.value = "";
      }
      if (props.multiple && isValueComputedArray(valueComputed)) {
        const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections));
        const isSelected = checkIsOptionSelected(option);
        if (isSelected) {
          valueComputed.value = valueComputed.value.filter((optionSelected) => !compareOptions(option, optionSelected));
        } else {
          if (exceedsMaxSelections()) {
            return;
          }
          valueComputed.value = addOption(option);
        }
      } else {
        valueComputed.value = typeof option !== "object" ? option : { ...option };
        hideAndFocus();
      }
      focusAutocompleteInput();
    };
    const addNewOption = () => {
      var _a;
      const hasAddedOption = (_a = props.options) == null ? void 0 : _a.some((option) => [searchInput.value, autocompleteValue.value].includes(getText(option)));
      const allowedToCreateCheck = !((props.allowCreate === "unique" || props.autocomplete) && hasAddedOption);
      if (allowedToCreateCheck) {
        emit("create-new", searchInput.value || autocompleteValue.value);
        searchInput.value = "";
        autocompleteValue.value = "";
      }
    };
    const hoveredOption = ref(null);
    const selectHoveredOption = () => {
      if (isNilValue(hoveredOption.value)) {
        return;
      }
      if (!showDropdownContent.value) {
        handleDropdownOpen();
        return;
      }
      selectOption(hoveredOption.value);
    };
    const selectOrAddOption = () => {
      const allowedToCreate = !!props.allowCreate && (searchInput.value || autocompleteValue.value);
      if (hoveredOption.value !== null) {
        selectHoveredOption();
      } else if (allowedToCreate) {
        addNewOption();
      }
    };
    const focusPreviousOption = () => {
      var _a;
      return (_a = optionList.value) == null ? void 0 : _a.focusPreviousOption();
    };
    const focusNextOption = () => {
      var _a;
      return (_a = optionList.value) == null ? void 0 : _a.focusNextOption();
    };
    const showDropdownContent = ref(false);
    const showDropdownContentComputed = computed({
      get: () => showDropdownContent.value,
      set: (show) => {
        show ? handleDropdownOpen() : handleDropdownClose();
      }
    });
    const closeOnContentClick = computed(() => {
      return !(props.multiple || props.searchable || props.allowCreate);
    });
    const handleDropdownOpen = () => {
      if (props.disabled || props.readonly) {
        return;
      }
      showDropdownContent.value = true;
      scrollToSelected();
      focusSearchOrOptions();
    };
    const handleDropdownClose = () => {
      showDropdownContent.value = false;
      searchInput.value = "";
      validate();
    };
    const hideAndFocus = () => {
      handleDropdownClose();
      isInputFocused.value = true;
    };
    const focusSearchBar = () => {
      var _a;
      (_a = searchBar.value) == null ? void 0 : _a.focus();
    };
    const focusOptionList = () => {
      var _a, _b;
      (_a = optionList.value) == null ? void 0 : _a.focus();
      !props.modelValue && ((_b = optionList.value) == null ? void 0 : _b.focusFirstOption());
    };
    const focusSearchOrOptions = () => nextTick(() => {
      if (showSearchInput.value) {
        focusSearchBar();
      } else {
        focusOptionList();
      }
    });
    const onInputFocus = () => {
      isInputFocused.value = true;
      onFocus();
    };
    const onInputBlur = () => {
      if (showDropdownContentComputed.value) {
        return;
      }
      onBlur();
      isInputFocused.value ? isInputFocused.value = false : validate();
    };
    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex);
    const inputWrapperTabIndexComputed = computed(() => props.disabled || props.autocomplete ? -1 : 0);
    const scrollToSelected = () => {
      const selected = valueComputed.value;
      const nothingSelected = typeof selected !== "object" && Array.isArray(selected) && !selected.length;
      if (nothingSelected) {
        return;
      }
      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected;
      hoveredOption.value = scrollTo;
      nextTick(() => {
        var _a;
        return (_a = optionList.value) == null ? void 0 : _a.scrollToOption(scrollTo);
      });
    };
    let hintedSearchQuery = "";
    let hintedSearchQueryTimeoutIndex;
    const navigationKeys = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", "Enter", " "];
    const onHintedSearch = (event) => {
      if (navigationKeys.some((key) => key === event.key)) {
        return;
      }
      const isLetter = event.key.length === 1;
      const isDeleteKey = event.key === "Backspace" || event.key === "Delete";
      clearTimeout(hintedSearchQueryTimeoutIndex);
      if (isDeleteKey) {
        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : "";
      } else if (isLetter) {
        hintedSearchQuery += event.key;
      }
      if (showSearchInput.value) {
        searchInput.value = hintedSearchQuery;
        return;
      }
      if (hintedSearchQuery) {
        const appropriateOption = props.options.find((option) => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()));
        if (appropriateOption) {
          hoveredOption.value = appropriateOption;
        }
      }
      hintedSearchQueryTimeoutIndex = setTimeout(() => {
        hintedSearchQuery = "";
      }, 1e3);
    };
    const { tp, t } = useTranslation();
    const filteredDropdownProps = filterComponentProps(VaDropdownProps);
    const dropdownPropsComputed = computed(() => ({
      ...filteredDropdownProps.value,
      closeOnContentClick: closeOnContentClick.value,
      stateful: false,
      offset: [1, 0],
      keepAnchorWidth: true,
      keyboardNavigation: true,
      innerAnchorSelector: ".va-input-wrapper__field",
      "aria-label": props.ariaLabel || (props.modelValue ? `${t("selectedOption")}: ${props.modelValue}` : t("noSelectedOption"))
    }));
    const optionsListPropsComputed = computed(() => ({
      ...pick(props, ["textBy", "trackBy", "groupBy", "valueBy", "disabledBy", "color", "virtualScroller", "highlightMatchedText", "minSearchChars", "delay", "selectedTopShown"]),
      autoSelectFirstOption: props.autoSelectFirstOption || props.autocomplete,
      search: searchInput.value || autocompleteValue.value,
      tabindex: tabIndexComputed.value,
      selectedValue: valueComputed.value,
      options: filteredOptions.value,
      getSelectedState: checkIsOptionSelected,
      noOptionsText: tp(props.noOptionsText)
    }));
    const { toggleIcon, toggleIconColor } = useToggleIcon(props, showDropdownContent);
    const isFocused = computed(() => isInputFocused.value || showDropdownContent.value);
    const inputWrapperClassComputed = useBem("va-select-anchor", () => ({
      nowrap: !!(props.maxVisibleOptions && !slots.content)
    }));
    const inputWrapperPropsComputed = computed(() => ({
      ...pick(props, ["messages", "requiredMark", "bordered", "outline", "label", "color", "success", "readonly", "disabled", "error", "loading"]),
      error: computedError.value,
      errorMessages: computedErrorMessages.value,
      focused: isFocused.value,
      tabindex: inputWrapperTabIndexComputed.value
    }));
    const selectContentPropsComputed = computed(() => ({
      ...pick(props, ["placeholder", "autocomplete", "multiple", "disabled", "readonly"]),
      tabindex: tabIndexComputed.value,
      value: visibleSelectedOptions.value,
      valueString: valueString.value,
      hiddenSelectedOptionsAmount: hiddenSelectedOptionsAmount.value,
      isAllOptionsShown: isAllOptionsShown.value,
      focused: isInputFocused.value,
      autocompleteInputValue: autocompleteValue.value,
      getText
    }));
    const autocompleteValue = useAutocomplete(props, visibleSelectedOptions, showDropdownContent, getText);
    const setAutocompleteValue = (v) => autocompleteValue.value = v;
    const focus = () => {
      if (props.disabled) {
        return;
      }
      focusElement(unwrapEl(input.value));
    };
    const blur = () => {
      if (showDropdownContentComputed.value) {
        showDropdownContentComputed.value = false;
      }
      nextTick(() => {
        if (props.disabled) {
          return;
        }
        blurElement(unwrapEl(input.value));
      });
    };
    const reset = () => withoutValidation(() => {
      if (props.multiple) {
        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : [];
      } else {
        valueComputed.value = props.clearValue;
      }
      searchInput.value = "";
      emit("clear");
      resetValidation();
    });
    const focusAutocompleteInput = (e) => {
      if (props.autocomplete && !props.disabled && !props.readonly) {
        e == null ? void 0 : e.stopImmediatePropagation();
        isInputFocused.value = true;
        showDropdownContent.value = true;
      }
    };
    const toggleDropdown = () => {
      if (props.disabled || props.readonly) {
        return;
      }
      showDropdownContentComputed.value = !showDropdownContentComputed.value;
    };
    const deleteLastSelected = () => {
      if (!Array.isArray(valueComputed.value)) {
        return;
      }
      valueComputed.value = valueComputed.value.slice(0, -1);
    };
    const {
      validate,
      computedError,
      computedErrorMessages,
      withoutValidation,
      resetValidation
    } = useValidation(props, emit, { reset, focus, value: valueComputed });
    return {
      input,
      optionList,
      searchBar,
      reset,
      focus,
      blur,
      toggleDropdown,
      deleteLastSelected,
      focusAutocompleteInput,
      tp,
      t,
      onInputFocus,
      onInputBlur,
      focusOptionList,
      focusSearchBar,
      searchInput,
      showSearchInput,
      hoveredOption,
      tabIndexComputed,
      valueString,
      showClearIcon,
      toggleIcon,
      selectOption,
      selectOrAddOption,
      selectHoveredOption,
      focusPreviousOption,
      focusNextOption,
      showDropdownContentComputed,
      handleDropdownOpen,
      handleDropdownClose,
      hideAndFocus,
      toggleIconColor,
      onHintedSearch,
      onScrollBottom,
      clearIconProps,
      dropdownPropsComputed,
      visibleSelectedOptions,
      optionsListPropsComputed,
      toggleHiddenOptionsState,
      setAutocompleteValue,
      inputWrapperPropsComputed,
      inputWrapperClassComputed,
      selectContentPropsComputed,
      // for e2e tests
      getOptionByValue,
      compareOptions,
      getText
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaSelect.css';
//# sourceMappingURL=VaSelect.vue_vue_type_script_lang-f7a35e79.mjs.map
