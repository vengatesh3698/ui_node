import { u as useTextColor } from "../../composables/useTextColor-f36510ca.mjs";
import { defineComponent, ref, computed, watch, nextTick } from "vue";
import { u as useView } from "./hooks/view-22b54eb2.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { V as VaDayPicker } from "./components/VaDayPicker/VaDayPicker-60787262.mjs";
import { V as VaDatePickerHeader } from "./components/VaDatePickerHeader/VaDatePickerHeader-9e1db33e.mjs";
import { V as VaMonthPicker } from "./components/VaMonthPicker/VaMonthPicker-a2b0665c.mjs";
import { V as VaYearPicker } from "./components/VaYearPicker/VaYearPicker-5edbd00c.mjs";
import { e as extractComponentProps, a as extractComponentEmits } from "../../utils/component-options/extract-component-options-6b96d215.mjs";
import { a as useStatefulProps, u as useStatefulEmits, b as useStateful } from "../../composables/useStateful-50e4a6b9.mjs";
import { u as useColors } from "../../composables/useColors-f23d24ff.mjs";
import { u as useElementBackground } from "../../composables/useElementBackground/useElementBackground-1a8d719e.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props-9727421a.mjs";
const DEFAULT_MONTH_NAMES = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
const DEFAULT_WEEKDAY_NAMES = ["SU", "MO", "TU", "WE", "TH", "FR", "SA"];
const _sfc_main = defineComponent({
  name: "VaDatePicker",
  components: { VaDayPicker, VaDatePickerHeader, VaMonthPicker, VaYearPicker },
  props: {
    ...useStatefulProps,
    ...useComponentPresetProp,
    ...extractComponentProps(VaDatePickerHeader),
    ...extractComponentProps(VaDayPicker),
    ...extractComponentProps(VaMonthPicker),
    ...extractComponentProps(VaYearPicker),
    modelValue: { type: [Date, Array, Object] },
    monthNames: { type: Array, default: DEFAULT_MONTH_NAMES },
    weekdayNames: { type: Array, default: DEFAULT_WEEKDAY_NAMES },
    view: { type: Object },
    type: { type: String, default: "day" },
    readonly: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    // Colors
    color: { type: String, default: void 0 },
    weekendsColor: { type: String, default: void 0 }
  },
  emits: [
    ...useStatefulEmits,
    ...extractComponentEmits(VaDatePickerHeader),
    ...extractComponentEmits(VaYearPicker),
    ...extractComponentEmits(VaDayPicker),
    ...extractComponentEmits(VaMonthPicker)
  ],
  setup(props, { emit }) {
    const currentPicker = ref();
    const { valueComputed } = useStateful(props, emit);
    const { syncView } = useView(props, emit, { type: props.type });
    const classComputed = computed(() => ({
      "va-date-picker_without-week-days": props.hideWeekDays,
      "va-date-picker_disabled": props.disabled
    }));
    const onDayModelValueUpdate = (modelValue) => {
      if (props.readonly) {
        return;
      }
      if (props.type === "day") {
        valueComputed.value = modelValue;
      }
    };
    const onMonthClick = (date) => {
      emit("click:month", date);
      const year = date.getFullYear();
      const month = date.getMonth();
      if (props.type !== "month") {
        syncView.value = { type: "day", year, month };
      }
    };
    const onMonthModelValueUpdate = (modelValue) => {
      if (props.type === "month") {
        valueComputed.value = modelValue;
      }
    };
    const onYearClick = (date) => {
      emit("click:year", date);
      const year = date.getFullYear();
      if (props.type !== "year") {
        syncView.value = { type: "month", year, month: syncView.value.month };
      }
    };
    const onYearModelValueUpdate = (modelValue) => {
      if (props.type === "year") {
        valueComputed.value = modelValue;
      }
    };
    const { colorsToCSSVariable } = useColors();
    const { background } = useElementBackground();
    const { textColorComputed } = useTextColor(background);
    const styleComputed = computed(() => ({
      color: textColorComputed.value,
      ...colorsToCSSVariable({
        color: props.color,
        "weekends-color": props.weekendsColor
      }, "va-date-picker")
    }));
    const focusCurrentPicker = () => {
      var _a;
      return (_a = currentPicker.value) == null ? void 0 : _a.$el.focus();
    };
    watch(syncView, (newValue, prevValue) => {
      if (newValue.type === prevValue.type) {
        return;
      }
      nextTick(focusCurrentPicker);
    });
    const isPickerReadonly = (pickerName) => {
      return props.readonly && props.type === pickerName;
    };
    return {
      dayPickerProps: filterComponentProps(extractComponentProps(VaDayPicker)),
      headerProps: filterComponentProps(extractComponentProps(VaDatePickerHeader)),
      monthPickerProps: filterComponentProps(extractComponentProps(VaMonthPicker)),
      yearPickerProps: filterComponentProps(extractComponentProps(VaYearPicker)),
      syncView,
      classComputed,
      valueComputed,
      onDayModelValueUpdate,
      onMonthClick,
      onMonthModelValueUpdate,
      onYearClick,
      onYearModelValueUpdate,
      styleComputed,
      currentPicker,
      textColorComputed,
      focusCurrentPicker,
      isPickerReadonly
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaDatePicker.css';
//# sourceMappingURL=VaDatePicker.vue_vue_type_script_lang-31410403.mjs.map
