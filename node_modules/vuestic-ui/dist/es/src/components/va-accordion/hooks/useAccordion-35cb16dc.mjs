import { provide, computed, onMounted, watch, inject, ref, onBeforeUnmount } from "vue";
const AccordionServiceKey = Symbol("AccordionService");
const useAccordion = (props, state) => {
  let items = [];
  const onItemMounted = (item) => {
    items.push(item);
  };
  const onItemUnmounted = (item) => {
    items = items.filter((i) => i !== item);
  };
  const onItemChanged = (changedItem) => {
    state.value = items.map((item) => {
      if (item === changedItem) {
        return item.state.value;
      }
      if (!props.multiple) {
        item.state.value = false;
      }
      return item.state.value;
    });
  };
  provide(AccordionServiceKey, {
    isInsideAccordion: true,
    onItemMounted,
    onItemUnmounted,
    onItemChanged,
    props: computed(() => props)
  });
  const updateItemStates = () => {
    items.forEach((item, index) => {
      item.state.value = state.value[index];
    });
  };
  onMounted(updateItemStates);
  watch(state, updateItemStates);
  return { items };
};
const useAccordionItem = (state) => {
  const accordion = inject(AccordionServiceKey, {
    props: ref({ inset: void 0, popout: void 0 }),
    onItemChanged: () => void 0,
    onItemMounted: () => void 0,
    onItemUnmounted: () => void 0
  });
  const item = { state };
  onMounted(() => accordion.onItemMounted(item));
  onBeforeUnmount(() => accordion.onItemUnmounted(item));
  return {
    accordionProps: accordion.props,
    toggle: () => {
      state.value = !state.value;
      accordion.onItemChanged(item);
    }
  };
};
export {
  useAccordionItem as a,
  useAccordion as u
};
//# sourceMappingURL=useAccordion-35cb16dc.mjs.map
