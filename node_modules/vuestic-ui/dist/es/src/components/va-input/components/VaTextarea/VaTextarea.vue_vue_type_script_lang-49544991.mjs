import { defineComponent, shallowRef, ref, computed, onMounted, watch, nextTick } from "vue";
import { p as pick } from "../../../../../vendor-fff696df.mjs";
import { u as useTextareaRowHeight } from "./useTextareaRowHeight-97db7eb8.mjs";
import { u as useFormFieldProps } from "../../../../composables/useFormField-0ac52e7e.mjs";
import { u as useEmitProxy } from "../../../../composables/useEmitProxy-a435894a.mjs";
const positiveNumberValidator = (val) => {
  if (val > 0 && (val | 0) === val) {
    return true;
  }
  throw new Error(`\`minRows|maxRows\` must be a positive integer greater than 0, but ${val} is provided`);
};
const { createEmits, createListeners } = useEmitProxy([
  "input",
  "change",
  "click",
  "update:modelValue"
]);
const _sfc_main = defineComponent({
  name: "VaTextarea",
  props: {
    ...useFormFieldProps,
    modelValue: { type: [String, Number], default: "" },
    placeholder: { type: String },
    autosize: { type: Boolean, default: false },
    minRows: {
      type: Number,
      default: 1,
      validator: positiveNumberValidator
    },
    maxRows: {
      type: Number,
      validator: positiveNumberValidator
    }
  },
  emits: createEmits(),
  setup(props, { emit }) {
    const textarea = shallowRef();
    const rowHeight = ref(-1);
    const height = ref(-1);
    const { calculateRowHeight, calculateHeight } = useTextareaRowHeight(textarea);
    const isResizable = computed(() => {
      return Boolean((props.autosize || props.maxRows || props.minRows !== 1) && textarea.value);
    });
    const updateRowHeight = () => {
      if (isResizable.value) {
        rowHeight.value = calculateRowHeight();
      }
    };
    const updateHeight = () => {
      if (isResizable.value) {
        height.value = calculateHeight();
      }
    };
    onMounted(() => {
      updateRowHeight();
      updateHeight();
    });
    watch(() => props.modelValue, () => {
      nextTick(updateHeight);
    });
    const computedStyle = computed(() => ({
      minHeight: rowHeight.value * props.minRows + "px",
      maxHeight: props.maxRows ? rowHeight.value * props.maxRows + "px" : void 0,
      height: height.value + "px",
      resize: isResizable.value ? void 0 : "none"
    }));
    const computedProps = computed(() => ({
      ...pick(props, ["disabled", "readonly", "placeholder", "ariaLabel"])
    }));
    const focus = () => {
      var _a;
      (_a = textarea.value) == null ? void 0 : _a.focus();
    };
    const blur = () => {
      var _a;
      (_a = textarea.value) == null ? void 0 : _a.blur();
    };
    return {
      textarea,
      computedStyle,
      listeners: createListeners(emit),
      computedProps,
      focus,
      blur
    };
  }
});
export {
  _sfc_main as _
};

import '../../../../../VaTextarea.css';
//# sourceMappingURL=VaTextarea.vue_vue_type_script_lang-49544991.mjs.map
