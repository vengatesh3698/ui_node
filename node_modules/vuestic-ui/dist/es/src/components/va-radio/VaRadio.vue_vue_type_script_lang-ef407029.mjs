import { defineComponent, computed } from "vue";
import { g as generateUniqueId } from "../../utils/uuid-7d2e5892.mjs";
import { u as useFormFieldProps, a as useFormField } from "../../composables/useFormField-0ac52e7e.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { u as useColors } from "../../composables/useColors-f23d24ff.mjs";
const _sfc_main = defineComponent({
  name: "VaRadio",
  emits: ["update:modelValue", "focus"],
  props: {
    ...useFormFieldProps,
    ...useComponentPresetProp,
    modelValue: { type: [Boolean, Array, String, Object, Number], default: null },
    option: { type: [String, Boolean, Object, Number], default: null },
    name: { type: String, default: "" },
    label: { type: String, default: "" },
    leftLabel: { type: Boolean, default: false },
    color: { type: String, default: "primary" },
    tabindex: { type: [String, Number], default: 0 }
  },
  setup(props, { emit }) {
    const { getColor } = useColors();
    const isActive = computed(() => props.modelValue === props.option);
    const { computedClasses } = useFormField("va-radio", props);
    const computedClass = computed(() => ({
      "va-radio--left-label": props.leftLabel,
      ...computedClasses
    }));
    const iconBackgroundComputedStyles = computed(() => ({
      backgroundColor: getColor(props.color)
    }));
    const iconDotComputedStyles = computed(() => {
      if (!isActive.value) {
        return;
      }
      return {
        borderColor: getColor(props.color),
        backgroundColor: getColor(props.color)
      };
    });
    const iconComputedStyles = computed(() => {
      if (!isActive.value) {
        return;
      }
      return { borderColor: getColor(props.color) };
    });
    const computedLabel = computed(() => props.label || props.option);
    const onClick = (e) => {
      if (props.readonly || props.disabled) {
        return;
      }
      emit("update:modelValue", props.option, e);
    };
    const onFocus = (e) => emit("focus", e);
    return {
      computedClass,
      isActive,
      iconBackgroundComputedStyles,
      iconDotComputedStyles,
      iconComputedStyles,
      computedLabel,
      onClick,
      onFocus,
      computedName: computed(() => props.name || generateUniqueId()),
      tabIndexComputed: computed(() => props.disabled ? -1 : props.tabindex)
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaRadio.css';
//# sourceMappingURL=VaRadio.vue_vue_type_script_lang-ef407029.mjs.map
