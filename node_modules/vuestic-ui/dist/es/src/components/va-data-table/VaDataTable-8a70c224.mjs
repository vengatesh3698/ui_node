import { _ as _sfc_main } from "./VaDataTable.vue_vue_type_script_lang-4a1fa7a2.mjs";
import { resolveComponent, openBlock, createBlock, mergeProps, withCtx, createVNode, normalizeStyle, createElementBlock, createCommentVNode, createElementVNode, renderSlot, normalizeProps, guardReactiveProps, normalizeClass, createSlots, renderList, TransitionGroup, Fragment, withModifiers, toDisplayString, createTextVNode } from "vue";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper-cc2b3d55.mjs";
const VaDataTable_vue_vue_type_style_index_0_lang = "";
const _hoisted_1 = {
  key: 0,
  ref: "topTrigger",
  class: "va-data-table__scroll-trigger"
};
const _hoisted_2 = { key: 0 };
const _hoisted_3 = {
  ref: "list",
  class: "va-data-table__table-tbody"
};
const _hoisted_4 = { key: "showNoDataHtml" };
const _hoisted_5 = ["colspan", "innerHTML"];
const _hoisted_6 = { key: "showNoDataFilteredHtml" };
const _hoisted_7 = ["colspan", "innerHTML"];
const _hoisted_8 = ["onClick", "onDblclick", "onContextmenu"];
const _hoisted_9 = {
  key: 0,
  class: "va-data-table__grid-column-header"
};
const _hoisted_10 = {
  key: 0,
  class: "va-data-table__table-tr--expanded va-data-table__table-expanded-content"
};
const _hoisted_11 = ["colspan"];
const _hoisted_12 = {
  key: 1,
  ref: "bottomTrigger",
  class: "va-data-table__scroll-trigger"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_data_table_th_row = resolveComponent("va-data-table-th-row");
  const _component_va_checkbox = resolveComponent("va-checkbox");
  const _component_va_inner_loading = resolveComponent("va-inner-loading");
  const _component_va_virtual_scroller = resolveComponent("va-virtual-scroller");
  return openBlock(), createBlock(_component_va_virtual_scroller, mergeProps({ class: "va-data-table" }, _ctx.computedAttributes, {
    ref: "scrollContainer",
    style: `--va-0-css-variables-selected-color: ${String(_ctx.CSSVariables.selectedColor)};--va-1-css-variables-hover-color: ${String(_ctx.CSSVariables.hoverColor)};--va-2-css-variables-table-height: ${String(_ctx.CSSVariables.tableHeight)};--va-3-css-variables-thead-bg: ${String(_ctx.CSSVariables.theadBg)};--va-4-css-variables-tfoot-bg: ${String(_ctx.CSSVariables.tfootBg)};--va-5-grid-columns-count: ${String(_ctx.gridColumnsCount)}`
  }), {
    content: withCtx(({
      uniqueKey,
      renderBuffer,
      currentListOffset,
      listStyleComputed,
      containerStyleComputed
    }) => [
      createVNode(_component_va_inner_loading, {
        "aria-live": "polite",
        style: normalizeStyle(containerStyleComputed),
        loading: _ctx.loading,
        color: _ctx.loadingColor
      }, {
        default: withCtx(() => [
          _ctx.doRenderTopTrigger ? (openBlock(), createElementBlock("div", _hoisted_1, null, 512)) : createCommentVNode("", true),
          createElementVNode("table", mergeProps({
            class: "va-data-table__table",
            style: listStyleComputed
          }, _ctx.computedTableAttributes), [
            "colgroup" in _ctx.$slots ? (openBlock(), createElementBlock("colgroup", _hoisted_2, [
              renderSlot(_ctx.$slots, "colgroup", normalizeProps(guardReactiveProps(_ctx.columnsComputed)))
            ])) : createCommentVNode("", true),
            createElementVNode("thead", {
              class: normalizeClass(["va-data-table__table-thead", { "va-data-table__table-thead--sticky": _ctx.$props.stickyHeader }]),
              style: normalizeStyle({ top: _ctx.isVirtualScroll && _ctx.$props.stickyHeader ? `-${currentListOffset}px` : void 0 })
            }, [
              renderSlot(_ctx.$slots, "headerPrepend"),
              renderSlot(_ctx.$slots, "header", {}, () => [
                !_ctx.hideDefaultHeader ? (openBlock(), createBlock(_component_va_data_table_th_row, mergeProps({ key: 0 }, _ctx.thAttributesComputed, {
                  onToggleBulkSelection: _ctx.toggleBulkSelection,
                  onToggleSorting: _ctx.toggleSorting
                }), createSlots({ _: 2 }, [
                  renderList(_ctx.$slots, (_, slot) => {
                    return {
                      name: slot,
                      fn: withCtx((scope) => [
                        renderSlot(_ctx.$slots, slot, normalizeProps(guardReactiveProps(scope)))
                      ])
                    };
                  })
                ]), 1040, ["onToggleBulkSelection", "onToggleSorting"])) : createCommentVNode("", true)
              ]),
              renderSlot(_ctx.$slots, "headerAppend")
            ], 6),
            createElementVNode("tbody", _hoisted_3, [
              renderSlot(_ctx.$slots, "bodyPrepend"),
              createVNode(TransitionGroup, {
                name: _ctx.isVirtualScroll ? "" : _ctx.animationName,
                css: !_ctx.$props.virtualScroller,
                appear: !_ctx.$props.virtualScroller
              }, {
                default: withCtx(() => [
                  _ctx.showNoDataHtml ? (openBlock(), createElementBlock("tr", _hoisted_4, [
                    createElementVNode("td", {
                      class: "no-data",
                      colspan: _ctx.columnsComputed.length + (_ctx.selectable ? 1 : 0),
                      innerHTML: _ctx.noDataHtml
                    }, null, 8, _hoisted_5)
                  ])) : _ctx.showNoDataFilteredHtml ? (openBlock(), createElementBlock("tr", _hoisted_6, [
                    createElementVNode("td", {
                      class: "no-data",
                      colspan: _ctx.columnsComputed.length + (_ctx.selectable ? 1 : 0),
                      innerHTML: _ctx.noDataFilteredHtml
                    }, null, 8, _hoisted_7)
                  ])) : createCommentVNode("", true),
                  (openBlock(true), createElementBlock(Fragment, null, renderList(renderBuffer, (row, index) => {
                    return openBlock(), createElementBlock(Fragment, {
                      key: `table-row_${uniqueKey(row, index)}`
                    }, [
                      createElementVNode("tr", mergeProps({
                        class: ["va-data-table__table-tr", [{ selected: _ctx.isRowSelected(row), "va-data-table__table-tr--expanded": row.isExpandableRowVisible }]]
                      }, _ctx.getRowBind(row), {
                        onClick: ($event) => _ctx.onRowClickHandler("row:click", $event, row),
                        onDblclick: ($event) => _ctx.onRowClickHandler("row:dblclick", $event, row),
                        onContextmenu: ($event) => _ctx.onRowClickHandler("row:contextmenu", $event, row)
                      }), [
                        _ctx.selectable && !_ctx.$props.grid ? (openBlock(), createElementBlock("td", {
                          class: "va-data-table__table-td va-data-table__table-cell-select",
                          key: `selectable_${uniqueKey(row, index)}`,
                          onSelectstart: _cache[0] || (_cache[0] = withModifiers(() => {
                          }, ["prevent"]))
                        }, [
                          createVNode(_component_va_checkbox, {
                            class: "va-data-table__table-cell-checkbox",
                            "model-value": _ctx.isRowSelected(row),
                            color: _ctx.selectedColor,
                            "aria-label": _ctx.tp(_ctx.$props.ariaSelectRowLabel, { index: row.initialIndex }),
                            onClick: [
                              withModifiers(($event) => _ctx.shiftSelectRows(row), ["shift", "exact", "stop"]),
                              withModifiers(($event) => _ctx.ctrlSelectRow(row), ["ctrl", "exact", "stop"]),
                              withModifiers(($event) => _ctx.ctrlSelectRow(row), ["exact", "stop"])
                            ]
                          }, null, 8, ["model-value", "color", "aria-label", "onClick"])
                        ], 32)) : createCommentVNode("", true),
                        (openBlock(true), createElementBlock(Fragment, null, renderList(row.cells, (cell, cellIndex) => {
                          return openBlock(), createElementBlock("td", mergeProps({
                            key: `table-cell_${cell.column.name + cell.rowIndex}`,
                            class: ["va-data-table__table-td", _ctx.getClass(cell.column.tdClass)],
                            style: [_ctx.getCellCSSVariables(cell), _ctx.getStyle(cell.column.tdStyle)]
                          }, _ctx.getCellBind(cell, row)), [
                            `cell(${cell.column.name})` in _ctx.$slots ? renderSlot(_ctx.$slots, `cell(${cell.column.name})`, normalizeProps(mergeProps({ key: 0 }, { ...cell, row, isExpanded: row.isExpandableRowVisible }))) : renderSlot(_ctx.$slots, "cell", normalizeProps(mergeProps({ key: 1 }, { cell, row })), () => [
                              _ctx.$props.grid ? (openBlock(), createElementBlock("span", _hoisted_9, toDisplayString(_ctx.columnsComputed[cellIndex].label), 1)) : createCommentVNode("", true),
                              createTextVNode(" " + toDisplayString(cell.value), 1)
                            ])
                          ], 16);
                        }), 128))
                      ], 16, _hoisted_8),
                      row.isExpandableRowVisible ? (openBlock(), createElementBlock("tr", _hoisted_10, [
                        createElementVNode("td", {
                          colspan: row.cells.length
                        }, [
                          renderSlot(_ctx.$slots, "expandableRow", normalizeProps(guardReactiveProps(row)))
                        ], 8, _hoisted_11)
                      ])) : createCommentVNode("", true)
                    ], 64);
                  }), 128))
                ]),
                _: 2
              }, 1032, ["name", "css", "appear"]),
              renderSlot(_ctx.$slots, "bodyAppend")
            ], 512),
            _ctx.$slots.footer || _ctx.footerClone && !_ctx.$props.grid ? (openBlock(), createElementBlock("tfoot", {
              key: 1,
              class: normalizeClass(["va-data-table__table-tfoot", { "va-data-table__table-tfoot--sticky": _ctx.$props.stickyFooter }]),
              style: normalizeStyle({ bottom: _ctx.isVirtualScroll && _ctx.$props.stickyFooter ? `${currentListOffset}px` : void 0 })
            }, [
              renderSlot(_ctx.$slots, "footerPrepend"),
              renderSlot(_ctx.$slots, "footer", {}, () => [
                !_ctx.hideDefaultHeader ? (openBlock(), createBlock(_component_va_data_table_th_row, mergeProps({ key: 0 }, _ctx.thAttributesComputed, {
                  "is-footer": "",
                  onToggleBulkSelection: _ctx.toggleBulkSelection,
                  onToggleSorting: _ctx.toggleSorting
                }), createSlots({ _: 2 }, [
                  renderList(_ctx.$slots, (_, slot) => {
                    return {
                      name: slot,
                      fn: withCtx((scope) => [
                        renderSlot(_ctx.$slots, slot, normalizeProps(guardReactiveProps(scope)))
                      ])
                    };
                  })
                ]), 1040, ["onToggleBulkSelection", "onToggleSorting"])) : createCommentVNode("", true)
              ]),
              renderSlot(_ctx.$slots, "footerAppend")
            ], 6)) : createCommentVNode("", true)
          ], 16),
          _ctx.doRenderBottomTrigger ? (openBlock(), createElementBlock("div", _hoisted_12, null, 512)) : createCommentVNode("", true)
        ]),
        _: 2
      }, 1032, ["style", "loading", "color"])
    ]),
    _: 3
  }, 16, ["style"]);
}
const _VaDataTable = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  _VaDataTable as _
};
//# sourceMappingURL=VaDataTable-8a70c224.mjs.map
