import { defineComponent, computed } from "vue";
import { V as VaIcon } from "../../va-icon/index-0ebbc0f2.mjs";
import { V as VaCheckbox } from "../../va-checkbox/index-18feaacf.mjs";
import { u as useStylableProps, a as useStylable } from "../hooks/useStylable-d0944e31.mjs";
import { u as useTranslation } from "../../../composables/useTranslation-acf7d88d.mjs";
const _sfc_main = defineComponent({
  name: "VaDataTableThRow",
  components: { VaIcon, VaCheckbox },
  props: {
    ...useStylableProps,
    selectMode: { type: String, default: "multiple" },
    allRowsSelected: { type: Boolean, default: false },
    severalRowsSelected: { type: Boolean, default: false },
    columns: { type: Array, required: true },
    isFooter: { type: Boolean, default: false },
    sortBySync: { type: String, required: true },
    sortingOrderIconName: { type: String, required: true },
    sortingOrderSync: { type: String, default: null },
    ariaSelectAllRowsLabel: { type: String, default: "$t:selectAllRows" },
    ariaSortColumnByLabel: { type: String, default: "$t:sortColumnBy" }
  },
  emits: [
    "toggleBulkSelection",
    "toggleSorting"
  ],
  setup(props, { emit }) {
    const { t, tp } = useTranslation();
    const {
      getFooterCSSVariables,
      getHeaderCSSVariables,
      getClass,
      getStyle
    } = useStylable(props);
    const getAriaAttributes = (column) => {
      const ariaSort = props.sortingOrderSync && props.sortBySync === column.name ? props.sortingOrderSync === "asc" ? "ascending" : "descending" : "none";
      const ariaLabel = column.sortable ? tp(props.ariaSortColumnByLabel, { name: column.label }) : void 0;
      return {
        "aria-sort": ariaSort,
        "aria-label": ariaLabel
      };
    };
    const sortByColumn = (column) => {
      if (props.isFooter && !props.allowFooterSorting || !column.sortable) {
        return;
      }
      emit("toggleSorting", column);
    };
    const toggleBulkSelection = () => emit("toggleBulkSelection");
    const getColumnStyles = (column) => {
      return [props.isFooter ? getFooterCSSVariables(column) : getHeaderCSSVariables(column), getStyle(column.thStyle)];
    };
    const slotNameComputed = computed(() => props.isFooter ? "footer" : "header");
    const multiplySelectAvailable = computed(() => props.selectMode === "multiple");
    return {
      tp,
      getClass,
      sortByColumn,
      getColumnStyles,
      slotNameComputed,
      getAriaAttributes,
      toggleBulkSelection,
      multiplySelectAvailable
    };
  }
});
export {
  _sfc_main as _
};

import '../../../../VaDataTableThRow.css';
//# sourceMappingURL=VaDataTableThRow.vue_vue_type_script_lang-780438e5.mjs.map
