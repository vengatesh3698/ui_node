import { defineComponent, computed } from "vue";
import { o as omit } from "../../../vendor-fff696df.mjs";
import { V as VaButton } from "../va-button/index-b0a9ef70.mjs";
import { V as VaButtonGroup } from "../va-button-group/index-7f4343c5.mjs";
import { u as useSelectableListProps, a as useSelectableList } from "../../composables/useSelectableList-a02a95a9.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options-6b96d215.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { u as useColors } from "../../composables/useColors-f23d24ff.mjs";
const VaButtonGroupProps = extractComponentProps(VaButtonGroup);
const _sfc_main = defineComponent({
  name: "VaButtonToggle",
  components: {
    VaButtonGroup,
    VaButton
  },
  emits: ["update:modelValue"],
  props: {
    ...VaButtonGroupProps,
    ...useComponentPresetProp,
    ...useSelectableListProps,
    modelValue: { type: [String, Number, Boolean], default: "" },
    options: {
      type: Array,
      required: true
    },
    activeButtonTextColor: { type: String },
    toggleColor: { type: String, default: "" },
    textBy: { type: [String, Function], default: "label" },
    valueBy: { type: [String, Function], default: "value" }
  },
  setup(props, { emit }) {
    const { getText, getTrackBy } = useSelectableList(props);
    const { getColor, shiftHSLAColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const isToggled = (value) => getTrackBy(value) === props.modelValue;
    const activeButtonColor = computed(() => {
      if (props.toggleColor) {
        return getColor(props.toggleColor);
      }
      return shiftHSLAColor(colorComputed.value, { l: props.plain ? -16 : -6 });
    });
    const activeButtonBackgroundOpacityComputed = computed(() => {
      if (!props.preset || props.preset === "default") {
        return {};
      }
      return { backgroundOpacity: props.pressedOpacity };
    });
    const activeButtonPropsComputed = computed(() => ({
      color: activeButtonColor.value,
      textColor: props.activeButtonTextColor,
      ...activeButtonBackgroundOpacityComputed.value
    }));
    const getButtonProps = (option = {}) => {
      const iconsProps = { icon: option.icon, iconRight: option.iconRight };
      if (!isToggled(option)) {
        return iconsProps;
      }
      return {
        ...isToggled(option) && activeButtonPropsComputed.value,
        ...iconsProps
      };
    };
    const buttonGroupPropsComputed = computed(
      () => omit(props, ["modelValue", "options", "activeButtonTextColor", "toggleColor"])
    );
    const changeValue = (value) => emit("update:modelValue", getTrackBy(value));
    return {
      buttonGroupPropsComputed,
      getButtonProps,
      changeValue,
      isToggled,
      getText,
      getTrackBy
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaButtonToggle.css';
//# sourceMappingURL=VaButtonToggle.vue_vue_type_script_lang-92dcbc2d.mjs.map
