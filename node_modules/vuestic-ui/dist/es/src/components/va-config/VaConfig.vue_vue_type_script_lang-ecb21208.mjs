import { defineComponent, computed, h, Fragment } from "vue";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { u as useLocalConfig, p as provideLocalConfig } from "../../composables/useLocalConfig-624e8425.mjs";
import { u as useGlobalConfigProvider } from "./hooks/useGlobalConfigProvider-99d3d315.mjs";
import { r as renderSlotNodes } from "../../utils/headless-cf5c266f.mjs";
import { u as useColors } from "../../composables/useColors-f23d24ff.mjs";
const CssVarsRenderer = defineComponent({
  name: "VaCssVarsRenderer",
  inheritAttrs: false,
  setup(props, { slots, attrs }) {
    const { colorsToCSSVariable, colors } = useColors();
    const style = computed(() => {
      return colorsToCSSVariable(colors);
    });
    return () => h(Fragment, attrs, renderSlotNodes(slots.default, {}, {
      style: style.value
    }) || void 0);
  }
});
const _sfc_main = defineComponent({
  name: "VaConfig",
  components: { CssVarsRenderer },
  props: {
    ...useComponentPresetProp,
    components: { type: Object, default: () => ({}) },
    colors: { type: Object },
    i18n: { type: Object }
  },
  inheritAttrs: false,
  setup(props) {
    const prevChain = useLocalConfig();
    const nextChain = computed(() => [...prevChain.value, props.components]);
    provideLocalConfig(nextChain);
    const newConfig = useGlobalConfigProvider(computed(() => {
      const config = {};
      if (props.colors) {
        config.colors = props.colors;
      }
      if (props.i18n) {
        config.i18n = props.i18n;
      }
      return config;
    }));
    const doRenderCssVars = computed(() => {
      return Boolean(props.colors);
    });
    return {
      newConfig,
      doRenderCssVars
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaConfig.vue_vue_type_script_lang-ecb21208.mjs.map
