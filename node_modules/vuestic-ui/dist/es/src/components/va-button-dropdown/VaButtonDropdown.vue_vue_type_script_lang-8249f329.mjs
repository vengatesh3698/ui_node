import { defineComponent, computed } from "vue";
import { o as omit } from "../../../vendor-fff696df.mjs";
import { V as VaButton } from "../va-button/index-b0a9ef70.mjs";
import { V as VaButtonGroup } from "../va-button-group/index-7f4343c5.mjs";
import { V as VaDropdown } from "../va-dropdown/index-2edb30e9.mjs";
import { V as VaDropdownContent } from "../va-dropdown/components/VaDropdownContent/index-d67c0ae9.mjs";
import { u as useEmitProxy } from "../../composables/useEmitProxy-a435894a.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options-6b96d215.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { a as useStatefulProps, b as useStateful } from "../../composables/useStateful-50e4a6b9.mjs";
import { a as usePlacementAliasesProps } from "../../composables/usePlacementAliases-c092b4d3.mjs";
import { u as useBem } from "../../composables/useBem-10a5bc6e.mjs";
import { u as useTranslation } from "../../composables/useTranslation-acf7d88d.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props-9727421a.mjs";
const { createEmits, createVOnListeners: createListeners } = useEmitProxy(["click"]);
const { createEmits: createMainButtonEmits, createVOnListeners: createMainButtonListeners } = useEmitProxy(
  [{ listen: "click", emit: "main-button-click" }]
);
const VaButtonProps = omit(extractComponentProps(VaButton), ["iconRight", "block"]);
const VaDropdownProps = extractComponentProps(VaDropdown);
const _sfc_main = defineComponent({
  name: "VaButtonDropdown",
  components: {
    VaButton,
    VaDropdown,
    VaButtonGroup,
    VaDropdownContent
  },
  emits: ["update:modelValue", ...createEmits(), ...createMainButtonEmits()],
  props: {
    ...useComponentPresetProp,
    ...VaButtonProps,
    ...VaDropdownProps,
    ...useStatefulProps,
    ...usePlacementAliasesProps,
    modelValue: { type: Boolean, default: false },
    stateful: { type: Boolean, default: true },
    icon: { type: String, default: "va-arrow-down" },
    openedIcon: { type: String, default: "va-arrow-up" },
    hideIcon: { type: Boolean, default: false },
    leftIcon: { type: Boolean, default: false },
    iconColor: { type: String, default: "" },
    disabled: { type: Boolean, default: false },
    disableButton: { type: Boolean, default: false },
    disableDropdown: { type: Boolean, default: false },
    offset: { type: [Number, Array], default: 2 },
    keepAnchorWidth: { type: Boolean, default: false },
    closeOnContentClick: { type: Boolean, default: true },
    split: { type: Boolean },
    splitTo: { type: String, default: "" },
    splitHref: { type: String, default: "" },
    loading: { type: Boolean, default: false },
    label: { type: String },
    ariaLabel: { type: String, default: "$t:toggleDropdown" }
  },
  setup(props, { emit, slots }) {
    const { valueComputed } = useStateful(props, emit);
    const computedIcon = computed(() => valueComputed.value ? props.openedIcon : props.icon);
    const computedClass = useBem("va-button-dropdown", () => ({
      split: props.split
    }));
    const computedButtonIcons = computed(() => {
      if (props.hideIcon) {
        return {};
      }
      const propName = (props.label || slots.label) && !props.leftIcon ? "icon-right" : "icon";
      return { [propName]: computedIcon.value };
    });
    const buttonPropsFiltered = computed(() => {
      let ignoredProps = ["to", "href", "loading", "icon"];
      const presetProps = [
        "plain",
        "textOpacity",
        "backgroundOpacity",
        "hoverOpacity",
        "hoverBehavior",
        "hoverOpacity",
        "pressedOpacity",
        "pressedBehavior",
        "pressedOpacity"
      ];
      if (props.preset) {
        ignoredProps = [...ignoredProps, ...presetProps];
      }
      const filteredProps = omit(VaButtonProps, ignoredProps);
      return Object.keys(filteredProps);
    });
    const buttonPropsComputed = computed(
      () => Object.entries(props).filter(([key, _]) => buttonPropsFiltered.value.includes(key)).reduce((acc, [key, value]) => {
        Object.assign(acc, { [key]: value });
        return acc;
      }, {})
    );
    const computedMainButtonProps = computed(() => ({
      to: props.splitTo,
      href: props.splitHref,
      loading: props.loading
    }));
    const hideDropdown = () => {
      valueComputed.value = false;
    };
    return {
      ...useTranslation(),
      vaDropdownProps: filterComponentProps(VaDropdownProps),
      hideDropdown,
      valueComputed,
      computedIcon,
      computedClass,
      computedButtonIcons,
      buttonPropsComputed,
      computedMainButtonProps,
      listeners: createListeners(emit),
      mainButtonListeners: createMainButtonListeners(emit)
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaButtonDropdown.css';
//# sourceMappingURL=VaButtonDropdown.vue_vue_type_script_lang-8249f329.mjs.map
