import { defineComponent, shallowRef, toRefs, computed, toRef } from "vue";
import { p as pick, o as omit } from "../../../vendor-fff696df.mjs";
import { s as safeCSSLength } from "../../utils/css-cc8466bb.mjs";
import { u as useCounterPropsValidation } from "./hooks/useCounterPropsValidation-f5f640e0.mjs";
import { V as VaButton } from "../va-button/index-b0a9ef70.mjs";
import { V as VaInputWrapper } from "../va-input/components/VaInputWrapper/VaInputWrapper-89658c86.mjs";
import { a as useFocusEmits, u as useFocus } from "../../composables/useFocus-4393f76a.mjs";
import { u as useLongPress } from "../../composables/useLongPress-31ac08f9.mjs";
import { u as useFormFieldProps } from "../../composables/useFormField-0ac52e7e.mjs";
import { a as useStatefulProps, b as useStateful } from "../../composables/useStateful-50e4a6b9.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { u as useTemplateRef } from "../../composables/useTemplateRef-58eb28b3.mjs";
import { u as useColors } from "../../composables/useColors-f23d24ff.mjs";
import { u as useTranslation } from "../../composables/useTranslation-acf7d88d.mjs";
import { u as useEmitProxy } from "../../composables/useEmitProxy-a435894a.mjs";
const { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(
  ["change"]
);
const { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([
  { listen: "click-prepend", emit: "click:decrease-button" },
  { listen: "click-append", emit: "click:increase-button" },
  { listen: "click-prepend-inner", emit: "click:decrease-icon" },
  { listen: "click-append-inner", emit: "click:increase-icon" }
]);
const _sfc_main = defineComponent({
  name: "VaCounter",
  components: { VaInputWrapper, VaButton },
  props: {
    ...useFormFieldProps,
    ...useStatefulProps,
    ...useComponentPresetProp,
    // input
    modelValue: { type: [String, Number], default: 0 },
    manualInput: { type: Boolean, default: false },
    stateful: { type: Boolean, default: false },
    min: { type: Number, default: void 0 },
    max: { type: Number, default: void 0 },
    step: { type: Number, default: 1 },
    label: { type: String, default: "" },
    // hint
    messages: { type: [Array, String], default: () => [] },
    // style
    width: { type: [String, Number], default: "160px" },
    color: { type: String, default: "primary" },
    outline: { type: Boolean },
    bordered: { type: Boolean },
    // icons & buttons
    increaseIcon: { type: String, default: "add" },
    decreaseIcon: { type: String, default: "remove" },
    buttons: { type: Boolean, default: false },
    flat: { type: Boolean, default: true },
    rounded: { type: Boolean, default: false },
    margins: { type: [String, Number], default: "4px" },
    textColor: { type: String, default: void 0 },
    longPressDelay: { type: Number, default: 500 },
    ariaLabel: { type: String, default: "$t:counterValue" },
    ariaDecreaseLabel: { type: String, default: "$t:decreaseCounter" },
    ariaIncreaseLabel: { type: String, default: "$t:increaseCounter" }
  },
  emits: [
    "update:modelValue",
    ...createInputEmits(),
    ...createFieldEmits(),
    ...useFocusEmits
  ],
  inheritAttrs: false,
  setup(props, { emit, attrs, slots }) {
    const input = shallowRef();
    const { min, max, step } = toRefs(props);
    const {
      isFocused,
      focus,
      blur
    } = useFocus(input, emit);
    const { valueComputed } = useStateful(props, emit);
    const setCountInput = ({ target }) => {
      valueComputed.value = Number(target == null ? void 0 : target.value);
    };
    const setCountChange = ({ target }) => {
      calculateCounterValue(Number(target == null ? void 0 : target.value));
    };
    const getRoundDownWithStep = (value) => {
      if (typeof min.value === "undefined" || !step.value) {
        return value;
      }
      return min.value + step.value * Math.floor((value - min.value) / step.value);
    };
    const calculateCounterValue = (counterValue) => {
      if (typeof min.value !== "undefined" && counterValue < min.value) {
        valueComputed.value = min.value;
        return;
      }
      if (max.value && counterValue > max.value) {
        valueComputed.value = getRoundDownWithStep(max.value);
        return;
      }
      valueComputed.value = getRoundDownWithStep(counterValue);
    };
    const isMinReached = computed(() => {
      if (typeof min.value === "undefined") {
        return false;
      }
      return Number(valueComputed.value) <= min.value;
    });
    const isMaxReached = computed(() => {
      if (!max.value) {
        return false;
      }
      return step.value ? Number(valueComputed.value) > max.value - step.value : Number(valueComputed.value) >= max.value;
    });
    const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
    const isDecreaseActionDisabled = computed(() => isMinReached.value || props.readonly || props.disabled);
    const isIncreaseActionDisabled = computed(() => isMaxReached.value || props.readonly || props.disabled);
    const decreaseCount = () => {
      if (isDecreaseActionDisabled.value) {
        return;
      }
      calculateCounterValue(Number(valueComputed.value) - step.value);
    };
    const increaseCount = () => {
      if (isIncreaseActionDisabled.value) {
        return;
      }
      calculateCounterValue(Number(valueComputed.value) + step.value);
    };
    useLongPress(useTemplateRef("decreaseButtonRef"), {
      onUpdate: decreaseCount,
      delay: toRef(props, "longPressDelay")
    });
    useLongPress(useTemplateRef("increaseButtonRef"), {
      onUpdate: increaseCount,
      delay: toRef(props, "longPressDelay")
    });
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const decreaseIconProps = computed(() => ({
      class: { "va-counter__icon--inactive": isDecreaseActionDisabled.value },
      color: colorComputed.value,
      icon: props.decreaseIcon,
      plain: true,
      disabled: isDecreaseActionDisabled.value,
      tabindex: -1,
      ...!isDecreaseActionDisabled.value && { onClick: decreaseCount }
    }));
    const increaseIconProps = computed(() => ({
      class: { "va-counter__icon--inactive": isIncreaseActionDisabled.value },
      color: colorComputed.value,
      icon: props.increaseIcon,
      plain: true,
      disabled: isIncreaseActionDisabled.value,
      tabindex: -1,
      ...!isIncreaseActionDisabled.value && { onClick: increaseCount }
    }));
    const isSquareCorners = computed(() => (typeof props.margins === "string" ? parseFloat(props.margins) : props.margins) === 0);
    const buttonProps = computed(() => ({
      ...pick(props, ["color", "textColor"]),
      round: props.rounded,
      preset: props.flat ? "secondary" : "",
      borderColor: props.outline && props.flat ? props.color : ""
    }));
    const decreaseButtonProps = computed(() => ({
      ...buttonProps.value,
      icon: props.decreaseIcon,
      disabled: isDecreaseActionDisabled.value
    }));
    const increaseButtonProps = computed(() => ({
      ...buttonProps.value,
      icon: props.increaseIcon,
      disabled: isIncreaseActionDisabled.value
    }));
    const { tp } = useTranslation();
    const inputAttributesComputed = computed(() => ({
      tabindex: tabIndexComputed.value,
      "aria-label": tp(props.ariaLabel),
      "aria-valuemin": min.value,
      "aria-valuemax": max.value,
      ...omit(attrs, ["class", "style"]),
      ...pick(props, ["disabled", "min", "max", "step"]),
      readonly: props.readonly || !props.manualInput
    }));
    const inputWrapperPropsComputed = computed(() => ({
      ...pick(props, ["color", "readonly", "disabled", "messages", "label", "bordered", "outline"])
    }));
    const classComputed = computed(() => [
      attrs.class,
      { "va-counter--input-square": isSquareCorners.value },
      { "va-counter--content-slot": slots.content && props.buttons }
    ]);
    const styleComputed = computed(() => ({
      width: safeCSSLength(props.width),
      ...attrs.style || {}
    }));
    const marginComputed = computed(() => safeCSSLength(props.margins));
    useCounterPropsValidation(props);
    return {
      tp,
      input,
      valueComputed,
      isFocused,
      fieldListeners: createFieldListeners(emit),
      inputListeners: createInputListeners(emit),
      inputAttributesComputed,
      inputWrapperPropsComputed,
      setCountInput,
      setCountChange,
      decreaseCount,
      increaseCount,
      decreaseIconProps,
      increaseIconProps,
      decreaseButtonProps,
      increaseButtonProps,
      colorComputed,
      classComputed,
      styleComputed,
      marginComputed,
      focus,
      blur
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaCounter.css';
//# sourceMappingURL=VaCounter.vue_vue_type_script_lang-eab9649d.mjs.map
