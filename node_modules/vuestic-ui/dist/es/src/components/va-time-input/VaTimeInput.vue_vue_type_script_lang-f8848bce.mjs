import { defineComponent, shallowRef, computed, nextTick } from "vue";
import { o as omit } from "../../../vendor-fff696df.mjs";
import { u as useTimeParser } from "./hooks/time-text-parser-c4125ce5.mjs";
import { u as useTimeFormatter } from "./hooks/time-text-formatter-d801bbfb.mjs";
import { _ as _VaTimePicker } from "../va-time-picker/VaTimePicker-8f57da6c.mjs";
import { V as VaIcon } from "../va-icon/VaIcon-68debddc.mjs";
import { V as VaDropdown } from "../va-dropdown/index-2edb30e9.mjs";
import { V as VaDropdownContent } from "../va-dropdown/components/VaDropdownContent/index-d67c0ae9.mjs";
import { V as VaInputWrapper } from "../va-input/components/VaInputWrapper/VaInputWrapper-89658c86.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options-6b96d215.mjs";
import { a as useFocusEmits, u as useFocus } from "../../composables/useFocus-4393f76a.mjs";
import { a as useValidationEmits, u as useValidationProps, b as useValidation } from "../../composables/useValidation-a7c1fccc.mjs";
import { a as useClearableEmits, u as useClearableProps, b as useClearable } from "../../composables/useClearable-6c80b820.mjs";
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from "../../composables/useStateful-50e4a6b9.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { u as useSyncProp } from "../../composables/useSyncProp-326abeda.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props-9727421a.mjs";
import { u as useTranslation } from "../../composables/useTranslation-acf7d88d.mjs";
const VaInputWrapperProps = extractComponentProps(VaInputWrapper, ["focused", "maxLength", "counterValue"]);
const VaDropdownProps = extractComponentProps(
  VaDropdown,
  ["keyboardNavigation", "innerAnchorSelector", "modelValue"]
);
const _sfc_main = defineComponent({
  name: "VaTimeInput",
  components: { VaDropdown, VaDropdownContent, VaTimePicker: _VaTimePicker, VaIcon, VaInputWrapper },
  emits: [
    ...useFocusEmits,
    ...useValidationEmits,
    ...useClearableEmits,
    ...useStatefulEmits,
    "update:modelValue",
    "update:isOpen"
  ],
  props: {
    ...VaDropdownProps,
    ...useComponentPresetProp,
    ...useClearableProps,
    ...VaInputWrapperProps,
    ...extractComponentProps(_VaTimePicker),
    ...useValidationProps,
    ...useStatefulProps,
    isOpen: { type: Boolean, default: void 0 },
    closeOnContentClick: { type: Boolean, default: false },
    offset: { ...VaDropdownProps.offset, default: () => [2, 0] },
    placement: { ...VaDropdownProps.placement, default: "bottom-start" },
    modelValue: { type: Date, default: void 0 },
    clearValue: { type: Date, default: void 0 },
    format: { type: Function },
    parse: { type: Function },
    manualInput: { type: Boolean, default: false },
    leftIcon: { type: Boolean, default: false },
    icon: { type: String, default: "schedule" },
    ariaLabel: { type: String, default: "$t:selectedTime" },
    ariaResetLabel: { type: String, default: "$t:resetTime" },
    ariaToggleDropdownLabel: { type: String, default: "$t:toggleDropdown" }
  },
  inheritAttrs: false,
  setup(props, { emit, slots, attrs }) {
    const input = shallowRef();
    const timePicker = shallowRef();
    const [isOpenSync] = useSyncProp("isOpen", props, emit, false);
    const { valueComputed } = useStateful(props, emit);
    const { parse, isValid } = useTimeParser(props);
    const { format } = useTimeFormatter(props);
    const valueText = computed(() => format(valueComputed.value || props.clearValue));
    const doShowDropdown = computed({
      get() {
        if (props.disabled || props.readonly) {
          return false;
        }
        return isOpenSync.value;
      },
      set(v) {
        isOpenSync.value = v;
        if (v) {
          nextTick(() => {
            var _a;
            return (_a = timePicker.value) == null ? void 0 : _a.focus();
          });
        } else {
          nextTick(() => {
            var _a;
            return (_a = input.value) == null ? void 0 : _a.focus();
          });
        }
      }
    });
    const { isFocused, focus, blur, onFocus: focusListener, onBlur: blurListener } = useFocus(input);
    const onInputTextChanged = (e) => {
      var _a;
      if (props.disabled) {
        return;
      }
      const val = (_a = e.target) == null ? void 0 : _a.value;
      if (!val) {
        return reset();
      }
      const v = parse(val);
      if (isValid.value && v) {
        valueComputed.value = v;
      } else {
        valueComputed.value = void 0;
        isValid.value = true;
      }
    };
    const reset = () => withoutValidation(() => {
      emit("update:modelValue", props.clearValue);
      emit("clear");
      resetValidation();
    });
    const {
      computedError,
      computedErrorMessages,
      listeners,
      validationAriaAttributes,
      withoutValidation,
      resetValidation
    } = useValidation(props, emit, { reset, focus, value: valueComputed });
    const {
      canBeCleared,
      clearIconProps,
      onFocus,
      onBlur
    } = useClearable(props, valueText);
    const canBeClearedComputed = computed(() => canBeCleared.value && valueText.value !== format(props.clearValue));
    const filteredWrapperProps = filterComponentProps(VaInputWrapperProps);
    const computedInputWrapperProps = computed(() => ({
      ...filteredWrapperProps.value,
      focused: isFocused.value,
      error: computedError.value,
      errorMessages: computedErrorMessages.value,
      readonly: props.readonly || !props.manualInput
    }));
    const computedInputListeners = computed(() => ({
      focus: () => {
        if (props.disabled) {
          return;
        }
        focusListener();
        if (props.readonly) {
          return;
        }
        onFocus();
        listeners.onFocus();
      },
      blur: () => {
        if (props.disabled) {
          return;
        }
        blurListener();
        if (props.readonly) {
          return;
        }
        onBlur();
        listeners.onBlur();
      }
    }));
    const filteredSlots = computed(() => {
      const slotsWithIcons = [
        props.leftIcon && "prependInner",
        (!props.leftIcon || props.clearable) && "icon"
      ];
      return Object.keys(slots).filter((slot) => !slotsWithIcons.includes(slot));
    });
    const hideDropdown = () => {
      doShowDropdown.value = false;
    };
    const showDropdown = (event, cancel, prevent) => {
      doShowDropdown.value = true;
    };
    const checkProhibitedDropdownOpening = (e) => {
      if (isOpenSync.value) {
        return false;
      }
      if (props.disabled || props.readonly) {
        return true;
      }
      return props.manualInput && (e == null ? void 0 : e.code) !== "Space";
    };
    const toggleDropdown = (event) => {
      if (checkProhibitedDropdownOpening(event instanceof KeyboardEvent ? event : void 0)) {
        return;
      }
      doShowDropdown.value = !doShowDropdown.value;
    };
    const cursorStyleComputed = computed(() => {
      if (props.disabled) {
        return {};
      }
      if (props.manualInput) {
        return { cursor: "text" };
      }
      return { cursor: "pointer" };
    });
    const iconTabindexComputed = computed(() => props.disabled || props.readonly ? -1 : 0);
    const iconProps = computed(() => ({
      role: "button",
      "aria-hidden": false,
      size: "small",
      name: props.icon,
      color: props.color,
      tabindex: iconTabindexComputed.value
    }));
    const { tp } = useTranslation();
    const inputAttributesComputed = computed(() => ({
      readonly: props.readonly || !props.manualInput,
      disabled: props.disabled,
      tabindex: props.disabled ? -1 : 0,
      value: valueText.value,
      "aria-label": props.label || tp(props.ariaLabel),
      "aria-required": props.requiredMark,
      "aria-disabled": props.disabled,
      "aria-readonly": props.readonly,
      ...validationAriaAttributes.value,
      ...omit(attrs, ["class", "style"])
    }));
    const filteredProps = filterComponentProps(VaDropdownProps);
    const dropdownPropsComputed = computed(() => ({
      ...filteredProps.value,
      keyboardNavigation: true,
      innerAnchorSelector: ".va-input-wrapper__field"
    }));
    return {
      tp,
      input,
      timePicker,
      timePickerProps: filterComponentProps(extractComponentProps(_VaTimePicker)),
      dropdownPropsComputed,
      computedInputWrapperProps,
      computedInputListeners,
      isOpenSync,
      doShowDropdown,
      valueComputed,
      valueText,
      onInputTextChanged,
      canBeClearedComputed,
      iconProps,
      clearIconProps,
      filteredSlots,
      inputAttributesComputed,
      cursorStyleComputed,
      hideDropdown,
      showDropdown,
      toggleDropdown,
      reset,
      focus,
      blur
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaTimeInput.css';
//# sourceMappingURL=VaTimeInput.vue_vue_type_script_lang-f8848bce.mjs.map
