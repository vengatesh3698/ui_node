import { provide, computed, unref, ref } from "vue";
import { F as FormServiceKey } from "./consts-bc55152e.mjs";
import { u as useFormChild } from "./useFormChild-62e9064d.mjs";
const createFormContext = (options) => {
  const fields = ref(/* @__PURE__ */ new Map());
  return {
    // Vue unwrap ref automatically, but types are not for some reason
    fields: computed(() => [...fields.value.values()]),
    doShowError: computed(() => !options.hideErrors),
    doShowErrorMessages: computed(() => !options.hideErrorMessages),
    doShowLoading: computed(() => !options.hideLoading),
    registerField: (uid, field) => {
      fields.value.set(uid, field);
    },
    unregisterField: (uid) => {
      fields.value.delete(uid);
    }
  };
};
const useFormParent = (options) => {
  const formContext = createFormContext(options);
  provide(FormServiceKey, formContext);
  const { fields } = formContext;
  const fieldNames = computed(() => fields.value.map((field) => unref(field.name)).filter(Boolean));
  const formData = computed(() => fields.value.reduce((acc, field) => {
    if (unref(field.name)) {
      acc[unref(field.name)] = field.value;
    }
    return acc;
  }, {}));
  const isValid = computed(() => fields.value.every((field) => unref(field.isValid)));
  const isLoading = computed(() => fields.value.some((field) => unref(field.isLoading)));
  const errorMessages = computed(() => fields.value.map((field) => unref(field.errorMessages)).flat());
  const errorMessagesNamed = computed(() => fields.value.reduce((acc, field) => {
    if (unref(field.name)) {
      acc[unref(field.name)] = unref(field.errorMessages);
    }
    return acc;
  }, {}));
  const validate = () => {
    return fields.value.reduce((acc, field) => {
      return field.validate() && acc;
    }, true);
  };
  const validateAsync = () => {
    return Promise.all(fields.value.map((field) => field.validateAsync())).then((results) => {
      return results.every(Boolean);
    });
  };
  const reset = () => {
    fields.value.forEach((field) => field.reset());
  };
  const resetValidation = () => {
    fields.value.forEach((field) => field.resetValidation());
  };
  const focus = () => {
    var _a;
    (_a = fields.value[0]) == null ? void 0 : _a.focus();
  };
  const focusInvalidField = () => {
    const invalidField = fields.value.find((field) => !field.isValid);
    invalidField == null ? void 0 : invalidField.focus();
  };
  useFormChild({
    name: ref(void 0),
    isValid,
    isLoading,
    validate,
    validateAsync,
    reset,
    resetValidation,
    focus,
    errorMessages
  });
  return {
    formData,
    fields,
    fieldNames,
    isValid,
    isLoading,
    errorMessages,
    errorMessagesNamed,
    validate,
    reset,
    resetValidation,
    focus,
    focusInvalidField
  };
};
export {
  useFormParent as u
};
//# sourceMappingURL=useFormParent-7e5be1b3.mjs.map
