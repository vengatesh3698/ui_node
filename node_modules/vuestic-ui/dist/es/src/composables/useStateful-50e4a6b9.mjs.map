{"version":3,"file":"useStateful-50e4a6b9.mjs","sources":["../../../../src/composables/useStateful.ts"],"sourcesContent":["import { ref, computed, watch, PropType, Ref } from 'vue'\n\nexport type StatefulProps = {\n  stateful: boolean\n}\n\nexport type StatefulOptions<T> = {\n  eventName?: string\n  defaultValue: T\n}\n\n/**\n * You could add these props to any component by destructuring them inside props option.\n * @example\n * props: { ...useStatefulProps, componentsOwnProp, etc. }\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\n */\nexport const useStatefulProps = {\n  stateful: { type: Boolean as PropType<boolean>, default: false },\n  modelValue: { type: undefined as any },\n}\n\nexport const createStatefulProps = <T>(modelValueType?: T, statefulDefault = false) => {\n  return {\n    stateful: { type: Boolean as PropType<boolean>, default: statefulDefault },\n    modelValue: { type: modelValueType },\n  }\n}\n\nexport const useStatefulEmits = ['update:modelValue'] as const\n\n/**\n * Returns `valueComputed` that is proxy for `modelValue` or given key of the props\n * if `stateful` prop is `false`\n * Record<any, any> & Record<'modelValue', T>\n */\nexport const useStateful = <Props extends StatefulProps, Name extends string, Key extends keyof Props>(\n  props: Props,\n  emit: (name: Name, ...args: any[]) => void,\n  key: Key = 'modelValue' as Key,\n  options = {} as StatefulOptions<Props[Key]>,\n) => {\n  const { defaultValue, eventName } = options\n  const event = (eventName || `update:${key.toString()}`) as Name\n  const valueState = ref(defaultValue === undefined ? props[key] : defaultValue) as Ref\n  let unwatchModelValue: Function\n\n  const watchModelValue = () => {\n    unwatchModelValue = watch(() => props[key], (modelValue) => {\n      valueState.value = modelValue\n    })\n  }\n\n  watch(() => props.stateful, (stateful: boolean) => {\n    stateful ? watchModelValue() : unwatchModelValue?.()\n  }, { immediate: true })\n\n  const valueComputed = computed({\n    get: () => {\n      if (props.stateful) { return valueState.value }\n\n      return props[key]\n    },\n    set: (value) => {\n      if (props.stateful) { valueState.value = value }\n\n      emit(event, value)\n    },\n  })\n\n  return { valueComputed }\n}\n"],"names":[],"mappings":";AAiBO,MAAM,mBAAmB;AAAA,EAC9B,UAAU,EAAE,MAAM,SAA8B,SAAS,MAAM;AAAA,EAC/D,YAAY,EAAE,MAAM,OAAiB;AACvC;AAEO,MAAM,sBAAsB,CAAI,gBAAoB,kBAAkB,UAAU;AAC9E,SAAA;AAAA,IACL,UAAU,EAAE,MAAM,SAA8B,SAAS,gBAAgB;AAAA,IACzE,YAAY,EAAE,MAAM,eAAe;AAAA,EAAA;AAEvC;AAEa,MAAA,mBAAmB,CAAC,mBAAmB;AAOvC,MAAA,cAAc,CACzB,OACA,MACA,MAAW,cACX,UAAU,OACP;AACG,QAAA,EAAE,cAAc,UAAc,IAAA;AACpC,QAAM,QAAS,aAAa,UAAU,IAAI,SAAS;AACnD,QAAM,aAAa,IAAI,iBAAiB,SAAY,MAAM,GAAG,IAAI,YAAY;AACzE,MAAA;AAEJ,QAAM,kBAAkB,MAAM;AAC5B,wBAAoB,MAAM,MAAM,MAAM,GAAG,GAAG,CAAC,eAAe;AAC1D,iBAAW,QAAQ;AAAA,IAAA,CACpB;AAAA,EAAA;AAGH,QAAM,MAAM,MAAM,UAAU,CAAC,aAAsB;AACtC,eAAA,oBAAoB;AAAA,EAAoB,GAClD,EAAE,WAAW,KAAA,CAAM;AAEtB,QAAM,gBAAgB,SAAS;AAAA,IAC7B,KAAK,MAAM;AACT,UAAI,MAAM,UAAU;AAAE,eAAO,WAAW;AAAA,MAAM;AAE9C,aAAO,MAAM,GAAG;AAAA,IAClB;AAAA,IACA,KAAK,CAAC,UAAU;AACd,UAAI,MAAM,UAAU;AAAE,mBAAW,QAAQ;AAAA,MAAM;AAE/C,WAAK,OAAO,KAAK;AAAA,IACnB;AAAA,EAAA,CACD;AAED,SAAO,EAAE,cAAc;AACzB;"}